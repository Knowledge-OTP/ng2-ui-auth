{"version":3,"file":"ng2-ui-auth.umd.min.js","sources":["~/ng2-ui-auth/src/utils.ts","~/ng2-ui-auth/src/local.service.ts","~/ng2-ui-auth/src/config.service.ts","~/ng2-ui-auth/src/storage.service.ts","~/ng2-ui-auth/src/shared.service.ts","~/ng2-ui-auth/src/jwt-http.service.ts","~/ng2-ui-auth/src/popup.service.ts","~/ng2-ui-auth/src/oauth1.service.ts","~/ng2-ui-auth/src/oauth.service.ts","~/ng2-ui-auth/src/oauth2.service.ts","~/ng2-ui-auth/src/auth.service.ts","~/ng2-ui-auth/src/ng2-ui-auth.module.ts"],"sourcesContent":["\n/**\n * Created by Ron on 17/12/2015.\n * @param {?} target\n * @param {...?} src\n * @return {?}\n */\nexport function assign(target: any, ...src: any[]): any {\n    if (target == null) {\n        throw new TypeError('Cannot convert undefined or null to object');\n    }\n\n    target = Object(target);\n    for (var /** @type {?} */ index = 1; index < arguments.length; index++) {\n        var /** @type {?} */ source = arguments[index];\n        if (source != null) {\n            for (var /** @type {?} */ key in source) {\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n    }\n    return target;\n}\n/**\n * @param {?} baseUrl\n * @param {?} url\n * @return {?}\n */\nexport function joinUrl(baseUrl: string, url: string) {\n    if (/^(?:[a-z]+:)?\\/\\//i.test(url)) {\n        return url;\n    }\n\n    let /** @type {?} */ joined = [baseUrl, url].join('/');\n\n    let /** @type {?} */ normalize = function(str) {\n        return str\n            .replace(/[\\/]+/g, '/')\n            .replace(/\\/\\?/g, '?')\n            .replace(/\\/\\#/g, '#')\n            .replace(/\\:\\//g, '://');\n    };\n\n    return normalize(joined);\n}\n/**\n * @param {?} obj1\n * @param {?} obj2\n * @return {?}\n */\nexport function merge(obj1: object, obj2: object): any {\n    let /** @type {?} */ result = {};\n    for (var /** @type {?} */ i in obj1) {\n        if (obj1.hasOwnProperty(i)) {\n            if ((i in obj2) && (typeof obj1[i] === 'object') && (i !== null)) {\n                result[i] = merge(obj1[i], obj2[i]);\n            } else {\n                result[i] = obj1[i];\n            }\n        }\n    }\n    for (i in obj2) {\n        if (obj2.hasOwnProperty(i)) {\n            if (i in result) {\n                continue;\n            }\n            result[i] = obj2[i];\n        }\n\n    }\n    return result;\n}\n/**\n * @param {?} name\n * @return {?}\n */\nexport function camelCase(name) {\n    return name.replace(/([\\:\\-\\_]+(.))/g, function(_, separator, letter, offset) {\n        return offset ? letter.toUpperCase() : letter;\n    });\n}\n","import {Injectable} from '@angular/core';\nimport {SharedService} from './shared.service';\nimport {ConfigService} from './config.service';\nimport {RequestOptionsArgs, Response} from '@angular/http';\nimport {joinUrl} from './utils';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/operator/do';\nimport {JwtHttp} from './jwt-http.service';\n/**\n * Created by Ron on 17/12/2015.\n * @param {?} user\n * @param {?=} userOpts\n * @return {?}\n */\nfunction getFullOpts(user: string | Object, userOpts?: RequestOptionsArgs) {\n    const /** @type {?} */ opts = userOpts || {};\n    if (user) {\n        opts.body = typeof user === 'string' ? user : JSON.stringify(user);\n    }\n    opts.method = opts.method || 'POST';\n    return opts;\n}\nexport class LocalService {\n/**\n * @param {?} http\n * @param {?} shared\n * @param {?} config\n */\nconstructor(private http: JwtHttp,\nprivate shared: SharedService,\nprivate config: ConfigService) {}\n/**\n * @param {?} user\n * @param {?=} opts\n * @return {?}\n */\nlogin(user: string | Object, opts?: RequestOptionsArgs): Observable<Response> {\n        const /** @type {?} */ fullOpts = getFullOpts(user, opts);\n        const /** @type {?} */ url = fullOpts.url ? fullOpts.url : joinUrl(this.config.baseUrl, this.config.loginUrl);\n\n        return this.http.request(url, fullOpts)\n            .do((response: Response) => this.shared.setToken(response));\n    }\n/**\n * @param {?} user\n * @param {?=} opts\n * @return {?}\n */\nsignup(user: string | Object, opts?: RequestOptionsArgs): Observable<Response> {\n        const /** @type {?} */ fullOpts = getFullOpts(user, opts);\n        const /** @type {?} */ url = fullOpts.url ? fullOpts.url : joinUrl(this.config.baseUrl, this.config.signupUrl);\n\n        return this.http.request(url, getFullOpts(user, fullOpts));\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: JwtHttp, },\n{type: SharedService, },\n{type: ConfigService, },\n];\n}\n\nfunction LocalService_tsickle_Closure_declarations() {\n/** @type {?} */\nLocalService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nLocalService.ctorParameters;\n/** @type {?} */\nLocalService.prototype.http;\n/** @type {?} */\nLocalService.prototype.shared;\n/** @type {?} */\nLocalService.prototype.config;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {RequestMethod, Response} from '@angular/http';\n\n/**\n * Created by Ron on 17/12/2015.\n */\n\nexport interface IPopupOptions {\n    width?: number;\n    height?: number;\n    left?: number;\n    top?: number;\n    visibleToolbar?: boolean;\n}\n\nexport interface IOauth1Options {\n    url?: string;\n    name?: string;\n    popupOptions?: IPopupOptions;\n    redirectUri?: string;\n    authorizationEndpoint?: string;\n    oauthType?: string;\n    exchangeForToken?: boolean | ((options: {code?: string, state?: string}, userData?: any) => Observable<Response>);\n    method?: string | RequestMethod;\n}\n\nexport interface IOauth2Options extends IOauth1Options {\n    state?: string| (() => string);\n    responseType?: string;\n    responseParams?: {\n        code?: string;\n        clientId?: string;\n        redirectUri?: string;\n    };\n    clientId?: string;\n    scopeDelimiter?: string;\n    scopePrefix?: string;\n\n    requiredUrlParams?: string[];\n    optionalUrlParams?: string[];\n    scope?: string[]|string;\n    display?: string;\n}\n\nexport interface IProviders {\n    [provider: string]: IOauth2Options;\n}\n/**\n * @abstract\n */\nexport abstract class CustomConfig {\n    tokenRoot: string;\n    cordova: boolean;\n    baseUrl: string;\n    loginUrl: string;\n    signupUrl: string;\n    unlinkUrl: string;\n    tokenName: string;\n    tokenSeparator: string;\n    tokenPrefix: string;\n    authToken: string;\n    authHeader: string;\n    storageType: 'localStorage' | 'sessionStorage' | 'cookie' | 'sessionCookie';\n    providers: IProviders;\n    defaultHeaders: { [name: string]: string };\n    withCredentials: boolean;\n    autoRefreshToken: boolean;\n    refreshUrl: string;\n    refreshBeforeExpiration: number;\n    tryTokenRefreshIfUnauthorized: boolean;\n    resolveToken: (response: Response) => string;\n}\n\nfunction CustomConfig_tsickle_Closure_declarations() {\n/** @type {?} */\nCustomConfig.prototype.tokenRoot;\n/** @type {?} */\nCustomConfig.prototype.cordova;\n/** @type {?} */\nCustomConfig.prototype.baseUrl;\n/** @type {?} */\nCustomConfig.prototype.loginUrl;\n/** @type {?} */\nCustomConfig.prototype.signupUrl;\n/** @type {?} */\nCustomConfig.prototype.unlinkUrl;\n/** @type {?} */\nCustomConfig.prototype.tokenName;\n/** @type {?} */\nCustomConfig.prototype.tokenSeparator;\n/** @type {?} */\nCustomConfig.prototype.tokenPrefix;\n/** @type {?} */\nCustomConfig.prototype.authToken;\n/** @type {?} */\nCustomConfig.prototype.authHeader;\n/** @type {?} */\nCustomConfig.prototype.storageType;\n/** @type {?} */\nCustomConfig.prototype.providers;\n/** @type {?} */\nCustomConfig.prototype.defaultHeaders;\n/** @type {?} */\nCustomConfig.prototype.withCredentials;\n/** @type {?} */\nCustomConfig.prototype.autoRefreshToken;\n/** @type {?} */\nCustomConfig.prototype.refreshUrl;\n/** @type {?} */\nCustomConfig.prototype.refreshBeforeExpiration;\n/** @type {?} */\nCustomConfig.prototype.tryTokenRefreshIfUnauthorized;\n/** @type {?} */\nCustomConfig.prototype.resolveToken;\n}\n\nexport class ConfigService {\n/**\n * @param {?=} config\n */\nconstructor(config?: CustomConfig) {\n        Object.keys(config).forEach((key) => {\n            if (typeof config[key] === \"undefined\") {\n                return;\n            }\n            if (key !== 'providers') {\n                this[key] = config[key];\n            } else {\n                Object.keys(config[key]).map(provider => {\n                    this.providers[provider] = Object.assign(\n                        this.providers[provider] || {},\n                        config.providers[provider]\n                    );\n                });\n            }\n        });\n    }\n    withCredentials = false;\n    tokenRoot = null;\n    baseUrl = '/';\n    loginUrl = '/auth/login';\n    signupUrl = '/auth/signup';\n    unlinkUrl = '/auth/unlink/';\n    refreshUrl = '/auth/refresh';\n    tokenName = 'token';\n    tokenSeparator = '_';\n    tokenPrefix = 'ng2-ui-auth';\n    authHeader = 'Authorization';\n    authToken = 'Bearer';\n    storageType: 'localStorage' | 'sessionStorage' | 'cookie' | 'sessionCookie' = 'localStorage';\n    defaultHeaders = null;\n    autoRefreshToken = false;\n    refreshBeforeExpiration = 600000; //10 minutes\n    tryTokenRefreshIfUnauthorized = false;\n    cordova = this.isCordovaApp();\n    resolveToken = (response: Response|Object) => {\n        let /** @type {?} */ tokenObj = response;\n        if (response instanceof Response) {\n            tokenObj = response.json();\n        }\n        const /** @type {?} */ accessToken: string | Object | null | undefined = tokenObj &&\n            (tokenObj['access_token'] || tokenObj['token'] || tokenObj['data']);\n        if (!accessToken) {\n            console.warn('No token found');\n            return null;\n        }\n        if (typeof accessToken === 'string') {\n            return accessToken;\n        }\n        if (typeof accessToken !== 'object') {\n            console.warn('No token found');\n            return null;\n        }\n        const /** @type {?} */ tokenRootData = this.tokenRoot &&\n            this.tokenRoot.split('.').reduce(\n                (o, x) => {\n                    return o[x];\n                },\n                accessToken);\n        const /** @type {?} */ token = tokenRootData ? tokenRootData[this.tokenName] : accessToken[this.tokenName];\n        if (token) {\n            return token;\n        }\n        let /** @type {?} */ tokenPath = this.tokenRoot ? this.tokenRoot + '.' + this.tokenName : this.tokenName;\n        console.warn('Expecting a token named \"' + tokenPath);\n        return null;\n    };\n    providers: IProviders = {\n        facebook: {\n            name: 'facebook',\n            url: '/auth/facebook',\n            authorizationEndpoint: 'https://www.facebook.com/v2.5/dialog/oauth',\n            redirectUri: this.getHttpHost('/'),\n            requiredUrlParams: ['display', 'scope'],\n            scope: ['email'],\n            scopeDelimiter: ',',\n            display: 'popup',\n            oauthType: '2.0',\n            popupOptions: {width: 580, height: 400}\n        },\n        google: {\n            name: 'google',\n            url: '/auth/google',\n            authorizationEndpoint: 'https://accounts.google.com/o/oauth2/auth',\n            redirectUri: this.getHttpHost(),\n            requiredUrlParams: ['scope'],\n            optionalUrlParams: ['display', 'state', 'prompt', 'login_hint', 'access_type', 'include_granted_scopes', 'openid.realm', 'hd'],\n            scope: ['profile', 'email'],\n            scopePrefix: 'openid',\n            scopeDelimiter: ' ',\n            display: 'popup',\n            oauthType: '2.0',\n            popupOptions: {width: 452, height: 633},\n            state: () => encodeURIComponent(Math.random().toString(36).substr(2)),\n        },\n        github: {\n            name: 'github',\n            url: '/auth/github',\n            authorizationEndpoint: 'https://github.com/login/oauth/authorize',\n            redirectUri: this.getHttpHost(),\n            optionalUrlParams: ['scope'],\n            scope: ['user:email'],\n            scopeDelimiter: ' ',\n            oauthType: '2.0',\n            popupOptions: {width: 1020, height: 618}\n        },\n        instagram: {\n            name: 'instagram',\n            url: '/auth/instagram',\n            authorizationEndpoint: 'https://api.instagram.com/oauth/authorize',\n            redirectUri: this.getHttpHost(),\n            requiredUrlParams: ['scope'],\n            scope: ['basic'],\n            scopeDelimiter: '+',\n            oauthType: '2.0'\n        },\n        linkedin: {\n            name: 'linkedin',\n            url: '/auth/linkedin',\n            authorizationEndpoint: 'https://www.linkedin.com/uas/oauth2/authorization',\n            redirectUri: this.getHttpHost(),\n            requiredUrlParams: ['state'],\n            scope: ['r_emailaddress'],\n            scopeDelimiter: ' ',\n            state: 'STATE',\n            oauthType: '2.0',\n            popupOptions: {width: 527, height: 582}\n        },\n        twitter: {\n            name: 'twitter',\n            url: '/auth/twitter',\n            authorizationEndpoint: 'https://api.twitter.com/oauth/authenticate',\n            redirectUri: this.getHttpHost(),\n            oauthType: '1.0',\n            popupOptions: {width: 495, height: 645}\n        },\n        twitch: {\n            name: 'twitch',\n            url: '/auth/twitch',\n            authorizationEndpoint: 'https://api.twitch.tv/kraken/oauth2/authorize',\n            redirectUri: this.getHttpHost(),\n            requiredUrlParams: ['scope'],\n            scope: ['user_read'],\n            scopeDelimiter: ' ',\n            display: 'popup',\n            oauthType: '2.0',\n            popupOptions: {width: 500, height: 560}\n        },\n        live: {\n            name: 'live',\n            url: '/auth/live',\n            authorizationEndpoint: 'https://login.live.com/oauth20_authorize.srf',\n            redirectUri: this.getHttpHost(),\n            requiredUrlParams: ['display', 'scope'],\n            scope: ['wl.emails'],\n            scopeDelimiter: ' ',\n            display: 'popup',\n            oauthType: '2.0',\n            popupOptions: {width: 500, height: 560}\n        },\n        yahoo: {\n            name: 'yahoo',\n            url: '/auth/yahoo',\n            authorizationEndpoint: 'https://api.login.yahoo.com/oauth2/request_auth',\n            redirectUri: this.getHttpHost(),\n            scope: [],\n            scopeDelimiter: ',',\n            oauthType: '2.0',\n            popupOptions: {width: 559, height: 519}\n        },\n        bitbucket: {\n            name: 'bitbucket',\n            url: '/auth/bitbucket',\n            authorizationEndpoint: 'https://bitbucket.org/site/oauth2/authorize',\n            redirectUri: this.getHttpHost('/'),\n            requiredUrlParams: ['scope'],\n            scope: ['email'],\n            scopeDelimiter: ',',\n            oauthType: '2.0',\n            popupOptions: {width: 1028, height: 529}\n        },\n        spotify: {\n            name: 'spotify',\n            url: '/auth/spotify',\n            authorizationEndpoint: 'https://accounts.spotify.com/authorize',\n            redirectUri: this.getHttpHost(),\n            optionalUrlParams: ['state'],\n            requiredUrlParams: ['scope'],\n            scope: ['user-read-email'],\n            scopePrefix: '',\n            scopeDelimiter: ',',\n            oauthType: '2.0',\n            popupOptions: { width: 500, height: 530 },\n            state: () => encodeURIComponent(Math.random().toString(36).substr(2))\n        }\n    };\n/**\n * @param {?=} path\n * @return {?}\n */\ngetHttpHost(path = '') {\n        return window.location.origin + path;\n    }\n/**\n * @return {?}\n */\nisCordovaApp() {\n        return !!window['cordova'];\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: CustomConfig, },\n];\n}\n\nfunction ConfigService_tsickle_Closure_declarations() {\n/** @type {?} */\nConfigService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nConfigService.ctorParameters;\n/** @type {?} */\nConfigService.prototype.withCredentials;\n/** @type {?} */\nConfigService.prototype.tokenRoot;\n/** @type {?} */\nConfigService.prototype.baseUrl;\n/** @type {?} */\nConfigService.prototype.loginUrl;\n/** @type {?} */\nConfigService.prototype.signupUrl;\n/** @type {?} */\nConfigService.prototype.unlinkUrl;\n/** @type {?} */\nConfigService.prototype.refreshUrl;\n/** @type {?} */\nConfigService.prototype.tokenName;\n/** @type {?} */\nConfigService.prototype.tokenSeparator;\n/** @type {?} */\nConfigService.prototype.tokenPrefix;\n/** @type {?} */\nConfigService.prototype.authHeader;\n/** @type {?} */\nConfigService.prototype.authToken;\n/** @type {?} */\nConfigService.prototype.storageType;\n/** @type {?} */\nConfigService.prototype.defaultHeaders;\n/** @type {?} */\nConfigService.prototype.autoRefreshToken;\n/** @type {?} */\nConfigService.prototype.refreshBeforeExpiration;\n/** @type {?} */\nConfigService.prototype.tryTokenRefreshIfUnauthorized;\n/** @type {?} */\nConfigService.prototype.cordova;\n/** @type {?} */\nConfigService.prototype.resolveToken;\n/** @type {?} */\nConfigService.prototype.providers;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable} from '@angular/core';\nimport {ConfigService} from './config.service';\n/**\n * @abstract\n */\nexport abstract class StorageService {\n/**\n * @abstract\n * @param {?} key\n * @return {?}\n */\nget(key: string) {}\n/**\n * @abstract\n * @param {?} key\n * @param {?} value\n * @param {?} date\n * @return {?}\n */\nset(key: string, value: string, date: string) {}\n/**\n * @abstract\n * @param {?} key\n * @return {?}\n */\nremove(key: string) {}\n}\n/**\n * Created by Ron on 17/12/2015.\n */\nexport class BrowserStorageService extends StorageService {\nprivate store = {};\nprivate isStorageAvailable: boolean;\n/**\n * @param {?} config\n */\nconstructor(private config: ConfigService) {\n        super();\n        this.isStorageAvailable = this.checkIsStorageAvailable(config);\n        if (!this.isStorageAvailable) {\n            console.warn(config.storageType + ' is not available.');\n        }\n    }\n/**\n * @param {?} key\n * @return {?}\n */\nget(key: string) {\n        return this.isStorageAvailable\n            ? this.config.storageType === 'cookie' || this.config.storageType === 'sessionCookie'\n                ? this.getCookie(key)\n                : window[this.config.storageType].getItem(key)\n            : this.store[key];\n    }\n/**\n * @param {?} key\n * @param {?} value\n * @param {?} date\n * @return {?}\n */\nset(key: string, value: string, date: string) {\n        this.isStorageAvailable\n            ? this.config.storageType === 'cookie' || this.config.storageType === 'sessionCookie'\n            ? this.setCookie(key, value, this.config.storageType === 'cookie' ? date : '')\n            : window[this.config.storageType].setItem(key, value)\n            : this.store[key] = value;\n    }\n/**\n * @param {?} key\n * @return {?}\n */\nremove(key: string) {\n        this.isStorageAvailable\n            ? this.config.storageType === 'cookie' || this.config.storageType === 'sessionCookie'\n            ? this.removeCookie(key)\n            : window[this.config.storageType].removeItem(key)\n            : delete this.store[key];\n    }\n/**\n * @param {?} config\n * @return {?}\n */\nprivate checkIsStorageAvailable(config: ConfigService) {\n        if (config.storageType === 'cookie' || config.storageType === 'sessionCookie') {\n            return this.isCookieStorageAvailable();\n        }\n        try {\n            const /** @type {?} */ supported = window && config.storageType in window && window[config.storageType] !== null;\n\n            if (supported) {\n                const /** @type {?} */ key = Math.random().toString(36).substring(7);\n                window[this.config.storageType].setItem(key, '');\n                window[this.config.storageType].removeItem(key);\n            }\n\n            return supported;\n        } catch ( /** @type {?} */e) {\n            return false;\n        }\n    }\n/**\n * @return {?}\n */\nprivate isCookieStorageAvailable() {\n        try {\n            const /** @type {?} */ supported = document && 'cookie' in document;\n\n            if (supported) {\n                const /** @type {?} */ key = Math.random().toString(36).substring(7);\n                this.setCookie(key, 'test', new Date(Date.now() + 60 * 1000).toUTCString());\n                const /** @type {?} */ value = this.getCookie(key);\n                this.removeCookie(key);\n                return value === 'test';\n            }\n            return false;\n        } catch ( /** @type {?} */e) {\n            return false;\n        }\n    }\n/**\n * @param {?} key\n * @param {?} value\n * @param {?=} expires\n * @param {?=} path\n * @return {?}\n */\nprivate setCookie(key: string, value: string, expires = '', path = '/') {\n        document.cookie = `${key}=${value}${expires ? `; expires=${expires}` : ''}; path=${path}`;\n    }\n/**\n * @param {?} key\n * @param {?=} path\n * @return {?}\n */\nprivate removeCookie(key: string, path = '/') {\n        this.setCookie(key, '', new Date(0).toUTCString(), path);\n    }\n/**\n * @param {?} key\n * @return {?}\n */\nprivate getCookie(key: string) {\n        return document.cookie.replace(new RegExp(`(?:(?:^|.*;\\\\s*)${key}\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$`), '$1');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ConfigService, },\n];\n}\n\nfunction BrowserStorageService_tsickle_Closure_declarations() {\n/** @type {?} */\nBrowserStorageService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nBrowserStorageService.ctorParameters;\n/** @type {?} */\nBrowserStorageService.prototype.store;\n/** @type {?} */\nBrowserStorageService.prototype.isStorageAvailable;\n/** @type {?} */\nBrowserStorageService.prototype.config;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Created by Ron on 17/12/2015.\n */\n\nimport {Observable} from 'rxjs/Observable';\nimport {Subscriber} from 'rxjs/Subscriber';\nimport {Injectable} from '@angular/core';\nimport {Response} from '@angular/http';\nimport {ConfigService} from './config.service';\nimport {StorageService} from './storage.service';\n/**\n * Created by Ron on 17/12/2015.\n */\nexport class SharedService {\n    tokenName = this.config.tokenPrefix ? [this.config.tokenPrefix, this.config.tokenName].join(this.config.tokenSeparator) : this.config.tokenName;\n/**\n * @param {?} storage\n * @param {?} config\n */\nconstructor(private storage: StorageService,\nprivate config: ConfigService) {\n    }\n/**\n * @return {?}\n */\ngetToken() {\n        return this.storage.get(this.tokenName);\n    }\n/**\n * @param {?=} token\n * @return {?}\n */\ngetPayload(token = this.getToken()) {\n\n        if (token && token.split('.').length === 3) {\n            try {\n                let /** @type {?} */ base64Url = token.split('.')[1];\n                let /** @type {?} */ base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n                return JSON.parse(decodeURIComponent(encodeURIComponent(window.atob(base64))));\n            } catch ( /** @type {?} */e) {\n                return undefined;\n            }\n        }\n    }\n/**\n * @param {?} response\n * @return {?}\n */\nsetToken(response: string | Response | Object) {\n        if (!response) {\n            console.warn('Can\\'t set token without passing a value');\n            return;\n        }\n\n        let /** @type {?} */ token: string;\n        if (typeof response === 'string') {\n            token = response;\n        } else {\n            token = this.config.resolveToken(response)\n        }\n\n        if (token) {\n            const /** @type {?} */ expDate = this.getExpirationDate(token);\n            this.storage.set(this.tokenName, token, expDate ? expDate.toUTCString() : '');\n        }\n    }\n/**\n * @return {?}\n */\nremoveToken() {\n        this.storage.remove(this.tokenName);\n    }\n/**\n * @param {?=} token\n * @return {?}\n */\nisAuthenticated(token = this.getToken()) {\n\n        // a token is present\n        if (token) {\n            // token with a valid JWT format XXX.YYY.ZZZ\n            if (token.split('.').length === 3) {\n                // could be a valid JWT or an access token with the same format\n                try {\n                    let /** @type {?} */ base64Url = token.split('.')[1];\n                    let /** @type {?} */ base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n                    let /** @type {?} */ exp = JSON.parse(window.atob(base64)).exp;\n                    // jwt with an optional expiration claims\n                    if (exp) {\n                        let /** @type {?} */ isExpired = Math.round(new Date().getTime() / 1000) >= exp;\n                        if (isExpired) {\n                            // fail: Expired token\n                            this.storage.remove(this.tokenName);\n                            return false;\n                        } else {\n                            // pass: Non-expired token\n                            return true;\n                        }\n                    }\n                } catch ( /** @type {?} */e) {\n                    // pass: Non-JWT token that looks like JWT\n                    return true;\n                }\n            }\n            // pass: All other tokens\n            return true;\n        }\n        // lail: No token at all\n        return false;\n    }\n/**\n * @param {?=} token\n * @return {?}\n */\ngetExpirationDate(token = this.getToken()) {\n        let /** @type {?} */ payload = this.getPayload(token);\n        if (payload && payload.exp && Math.round(new Date().getTime() / 1000) < payload.exp) {\n            let /** @type {?} */ date = new Date(0);\n            date.setUTCSeconds(payload.exp);\n            return date;\n        }\n        return null;\n    }\n/**\n * @return {?}\n */\nlogout(): Observable<any> {\n        return Observable.create((observer: Subscriber<any>) => {\n            this.storage.remove(this.tokenName);\n            observer.next();\n            observer.complete();\n        });\n    }\n/**\n * @param {?} type\n * @return {?}\n */\nsetStorageType(type: 'localStorage' | 'sessionStorage' | 'cookie' | 'sessionCookie') {\n        this.config.storageType = type;\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: StorageService, },\n{type: ConfigService, },\n];\n}\n\nfunction SharedService_tsickle_Closure_declarations() {\n/** @type {?} */\nSharedService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nSharedService.ctorParameters;\n/** @type {?} */\nSharedService.prototype.tokenName;\n/** @type {?} */\nSharedService.prototype.storage;\n/** @type {?} */\nSharedService.prototype.config;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable} from '@angular/core';\nimport {Http, RequestMethod, Response, RequestOptionsArgs, Headers, Request} from '@angular/http';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/operator/switchMap';\nimport'rxjs/add/operator/catch';\nimport {ConfigService} from './config.service';\nimport {SharedService} from './shared.service';\n/**\n * Created by Ron on 06/01/2016.\n */\n\nexport interface JwtRequestOptionsArgs extends RequestOptionsArgs {\n    autoRefreshToken?: boolean\n}\nexport class JwtHttp {\n/**\n * @param {?} _http\n * @param {?} _shared\n * @param {?} _config\n */\nconstructor(\nprivate _http: Http,\nprivate _shared: SharedService,\nprivate _config: ConfigService\n    ) {}\n/**\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nrequest(url: string | Request, options?: JwtRequestOptionsArgs): Observable<Response> {\n        //if the token is expired the \"getExpirationDate\" function returns null\n        const /** @type {?} */ exp = this._shared.getExpirationDate();\n        if (this._shared.getToken() &&\n            (!exp || exp.getTime() + this._config.refreshBeforeExpiration > Date.now())  &&\n            (options.autoRefreshToken ||\n            typeof options.autoRefreshToken === 'undefined' && this._config.autoRefreshToken)) {\n            return this.refreshToken()\n                .switchMap(() => this.actualRequest(url, options));\n        }\n        if (this._config.tryTokenRefreshIfUnauthorized) {\n            return this.actualRequest(url, options)\n                .catch((response: Response) => {\n                    if (response.status === 401) {\n                        return this.refreshToken()\n                            .switchMap(() => this.actualRequest(url, options));\n                    }\n                    throw response;\n                })\n        }\n        return this.actualRequest(url, options);\n    }\n/**\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nget(url: string, options?: JwtRequestOptionsArgs): Observable<Response> {\n        options = options || {};\n        options.method = RequestMethod.Get;\n        return this.request(url, options);\n    }\n/**\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\npost(url: string, body: any, options?: JwtRequestOptionsArgs): Observable<Response> {\n        options = options || {};\n        options.method = RequestMethod.Post;\n        options.body = body;\n        return this.request(url, options);\n    }\n/**\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\nput(url: string, body: any, options?: JwtRequestOptionsArgs): Observable<Response> {\n        options = options || {};\n        options.method = RequestMethod.Put;\n        options.body = body;\n        return this.request(url, options);\n    }\n/**\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\ndelete(url: string, options?: JwtRequestOptionsArgs): Observable<Response> {\n        options = options || {};\n        options.method = RequestMethod.Delete;\n        return this.request(url, options);\n    }\n/**\n * @param {?} url\n * @param {?} body\n * @param {?=} options\n * @return {?}\n */\npatch(url: string, body: any, options?: JwtRequestOptionsArgs): Observable<Response> {\n        options = options || {};\n        options.method = RequestMethod.Patch;\n        options.body = body;\n        return this.request(url, options);\n    }\n/**\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nhead(url: string, options?: JwtRequestOptionsArgs): Observable<Response> {\n        options = options || {};\n        options.method = RequestMethod.Head;\n        return this.request(url, options);\n    }\n/**\n * @return {?}\n */\nrefreshToken(): Observable<Response> {\n        const /** @type {?} */ authHeader = new Headers();\n        authHeader.append(this._config.authHeader, (this._config.authToken + ' ' + this._shared.getToken()));\n        return this._http\n            .get(this._config.refreshUrl, {\n                headers: authHeader\n            })\n            .do((res: Response) => this._shared.setToken(res));\n    }\n/**\n * @param {?} url\n * @param {?=} options\n * @return {?}\n */\nprotected actualRequest(url: string | Request, options?: JwtRequestOptionsArgs) {\n        if (url instanceof Request) {\n            url.headers = url.headers || new Headers();\n            this.setHeaders(url);\n        } else {\n            options = options || {};\n            this.setHeaders(options);\n        }\n        return this._http.request(url, options);\n    }\n/**\n * @param {?} obj\n * @return {?}\n */\nprotected setHeaders(obj: { headers?: Headers, [index: string]: any }) {\n        obj.headers = obj.headers || new Headers();\n        if (this._config.defaultHeaders) {\n            Object.keys(this._config.defaultHeaders).forEach((defaultHeader) => {\n                if (!obj.headers.has(defaultHeader)) {\n                    obj.headers.set(defaultHeader, this._config.defaultHeaders[defaultHeader]);\n                }\n            });\n        }\n        if (this._shared.isAuthenticated()) {\n            obj.headers.set(this._config.authHeader, this._config.authToken + ' ' + this._shared.getToken());\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Http, },\n{type: SharedService, },\n{type: ConfigService, },\n];\n}\n\nfunction JwtHttp_tsickle_Closure_declarations() {\n/** @type {?} */\nJwtHttp.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nJwtHttp.ctorParameters;\n/** @type {?} */\nJwtHttp.prototype._http;\n/** @type {?} */\nJwtHttp.prototype._shared;\n/** @type {?} */\nJwtHttp.prototype._config;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {assign} from './utils';\nimport {ConfigService, IPopupOptions} from './config.service';\nimport'rxjs/add/observable/interval';\nimport'rxjs/add/observable/fromEvent';\nimport'rxjs/add/observable/throw';\nimport'rxjs/add/observable/empty';\nimport'rxjs/add/observable/merge';\nimport'rxjs/add/operator/switchMap';\nimport'rxjs/add/operator/take';\nimport'rxjs/add/operator/map';\n\nimport'rxjs/add/operator/takeWhile';\nimport'rxjs/add/operator/delay';\n/**\n * Created by Ron on 17/12/2015.\n */\nexport class PopupService {\n    url = '';\n    popupWindow: Window = null;\n/**\n * @param {?} config\n */\nconstructor(private config: ConfigService) {}\n/**\n * @param {?} url\n * @param {?} name\n * @param {?} options\n * @return {?}\n */\nopen(url: string, name: string, options: IPopupOptions) {\n        this.url = url;\n\n        let /** @type {?} */ stringifiedOptions = this.stringifyOptions(this.prepareOptions(options));\n        let /** @type {?} */ UA = window.navigator.userAgent;\n        let /** @type {?} */ windowName = (this.config.cordova || UA.indexOf('CriOS') > -1) ? '_blank' : name;\n\n        this.popupWindow = window.open(url, windowName, stringifiedOptions);\n\n        window['popup'] = this.popupWindow;\n\n        if (this.popupWindow && this.popupWindow.focus) {\n            this.popupWindow.focus();\n        }\n\n        return this;\n    }\n/**\n * @param {?} redirectUri\n * @return {?}\n */\neventListener(redirectUri: string) {\n        return Observable\n            .merge(\n                Observable.fromEvent(this.popupWindow, 'loadstart')\n                .switchMap((event: Event & { url: string }) => {\n\n                    if (!this.popupWindow || this.popupWindow.closed) {\n                        return Observable.throw(new Error('Authentication Canceled'));\n                    }\n                    if (event.url.indexOf(redirectUri) !== 0) {\n                        return Observable.empty();\n                    }\n\n                    let /** @type {?} */ parser = document.createElement('a');\n                    parser.href = event.url;\n\n                    if (parser.search || parser.hash) {\n                        const /** @type {?} */ queryParams = parser.search.substring(1).replace(/\\/$/, '');\n                        const /** @type {?} */ hashParams = parser.hash.substring(1).replace(/\\/$/, '');\n                        const /** @type {?} */ hash = this.parseQueryString(hashParams);\n                        const /** @type {?} */ qs = this.parseQueryString(queryParams);\n                        const /** @type {?} */ allParams = assign({}, qs, hash);\n\n                        this.popupWindow.close();\n\n                        if (allParams.error) {\n                            throw allParams.error;\n                        } else {\n                            return Observable.of(allParams);\n                        }\n                    }\n                    return Observable.empty();\n                }), Observable.fromEvent<Event>(this.popupWindow, 'exit').delay(100).map(() => {throw new Error('Authentication Canceled')})\n                       ).take(1);\n    }\n/**\n * @return {?}\n */\npollPopup() {\n        return Observable\n            .interval(50)\n            .switchMap(() => {\n                if (!this.popupWindow || this.popupWindow.closed) {\n                    return Observable.throw(new Error('Authentication Canceled'));\n                }\n                let /** @type {?} */ documentOrigin = document.location.host;\n                let /** @type {?} */ popupWindowOrigin = '';\n                try {\n                    popupWindowOrigin = this.popupWindow.location.host;\n                } catch ( /** @type {?} */error) {\n                    // ignore DOMException: Blocked a frame with origin from accessing a cross-origin frame.\n                    //error instanceof DOMException && error.name === 'SecurityError'\n                }\n                if (popupWindowOrigin === documentOrigin && (this.popupWindow.location.search || this.popupWindow.location.hash)) {\n                    const /** @type {?} */ queryParams = this.popupWindow.location.search.substring(1).replace(/\\/$/, '');\n                    const /** @type {?} */ hashParams = this.popupWindow.location.hash.substring(1).replace(/[\\/$]/, '');\n                    const /** @type {?} */ hash = this.parseQueryString(hashParams);\n                    const /** @type {?} */ qs = this.parseQueryString(queryParams);\n                    this.popupWindow.close();\n                    const /** @type {?} */ allParams = assign({}, qs, hash);\n                    if (allParams.error) {\n                        throw allParams.error;\n                    } else {\n                        return Observable.of(allParams);\n                    }\n                }\n                return Observable.empty();\n            })\n            .take(1);\n    }\n/**\n * @param {?} options\n * @return {?}\n */\nprivate prepareOptions(options: IPopupOptions) {\n        options = options || {};\n        let /** @type {?} */ width = options.width || 500;\n        let /** @type {?} */ height = options.height || 500;\n        return assign(\n            {\n                width: width,\n                height: height,\n                left: window.screenX + ((window.outerWidth - width) / 2),\n                top: window.screenY + ((window.outerHeight - height) / 2.5),\n                toolbar: options.visibleToolbar ? 'yes': 'no'\n            },\n            options);\n    }\n/**\n * @param {?} options\n * @return {?}\n */\nprivate stringifyOptions(options: Object) {\n        return Object.keys(options).map((key) => {\n            return key + '=' + options[key];\n        }).join(',');\n    }\n/**\n * @param {?} joinedKeyValue\n * @return {?}\n */\nprivate parseQueryString(joinedKeyValue: string): any {\n        let /** @type {?} */ key, /** @type {?} */ value;\n        return joinedKeyValue.split('&').reduce(\n            (obj, keyValue) => {\n                if (keyValue) {\n                    value = keyValue.split('=');\n                    key = decodeURIComponent(value[0]);\n                    obj[key] = typeof value[1] !== 'undefined' ? decodeURIComponent(value[1]) : true;\n                }\n                return obj;\n            },\n            {});\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ConfigService, },\n];\n}\n\nfunction PopupService_tsickle_Closure_declarations() {\n/** @type {?} */\nPopupService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPopupService.ctorParameters;\n/** @type {?} */\nPopupService.prototype.url;\n/** @type {?} */\nPopupService.prototype.popupWindow;\n/** @type {?} */\nPopupService.prototype.config;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable} from '@angular/core';\nimport {PopupService} from './popup.service';\nimport {Response} from '@angular/http';\nimport {assign, joinUrl} from './utils';\nimport {ConfigService, IOauth1Options} from './config.service';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/operator/switchMap';\nimport {JwtHttp} from './jwt-http.service';\n/**\n * Created by Ron on 17/12/2015.\n */\nexport class Oauth1Service {\nprivate static base: IOauth1Options = {\n        url: null,\n        name: null,\n        popupOptions: null,\n        redirectUri: null,\n        authorizationEndpoint: null\n    };\nprivate defaults: IOauth1Options;\n/**\n * @param {?} http\n * @param {?} popup\n * @param {?} config\n */\nconstructor(private http: JwtHttp,\nprivate popup: PopupService,\nprivate config: ConfigService) {\n    }\n/**\n * @param {?=} options\n * @param {?=} userData\n * @return {?}\n */\nopen(options?: IOauth1Options, userData?: any): Observable<Response> {\n        this.defaults = assign({}, Oauth1Service.base, options);\n        let /** @type {?} */ popupWindow;\n        let /** @type {?} */ serverUrl = this.config.baseUrl ? joinUrl(this.config.baseUrl, this.defaults.url) : this.defaults.url;\n\n        if (!this.config.cordova) {\n            popupWindow = this.popup.open('', this.defaults.name, this.defaults.popupOptions/*, this.defaults.redirectUri*/);\n        }\n\n        return this.http.post(serverUrl, JSON.stringify(this.defaults))\n            .switchMap((response: Response) => {\n                if (this.config.cordova) {\n                    popupWindow = this.popup.open(\n                        [this.defaults.authorizationEndpoint, this.buildQueryString(response.json())].join('?'),\n                        this.defaults.name,\n                        this.defaults.popupOptions);\n                } else {\n                    popupWindow.popupWindow.location =\n                        [this.defaults.authorizationEndpoint, this.buildQueryString(response.json())].join('?');\n                }\n\n                return this.config.cordova ? popupWindow.eventListener(this.defaults.redirectUri) : popupWindow.pollPopup();\n            })\n            .switchMap((response) => {\n                let /** @type {?} */ exchangeForToken: any = options.exchangeForToken;\n                if (typeof exchangeForToken !== 'function') {\n                    exchangeForToken = this.exchangeForToken.bind(this);\n                }\n                return exchangeForToken(response, userData);\n            });\n    }\n/**\n * @param {?} oauthData\n * @param {?=} userData\n * @return {?}\n */\nprivate exchangeForToken(oauthData, userData?: any) {\n        let /** @type {?} */ data = assign({}, this.defaults, oauthData, userData);\n        let /** @type {?} */ exchangeForTokenUrl = this.config.baseUrl ? joinUrl(this.config.baseUrl, this.defaults.url) : this.defaults.url;\n        return this.defaults.method\n            ? this.http.request(exchangeForTokenUrl, {\n                body: JSON.stringify(data),\n                withCredentials: this.config.withCredentials,\n                method: this.defaults.method\n            })\n            : this.http.post(exchangeForTokenUrl, data, {withCredentials: this.config.withCredentials});\n    }\n/**\n * @param {?} obj\n * @return {?}\n */\nprivate buildQueryString(obj: Object) {\n        return Object.keys(obj).map((key) => {\n            return encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]);\n        }).join('&');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: JwtHttp, },\n{type: PopupService, },\n{type: ConfigService, },\n];\n}\n\nfunction Oauth1Service_tsickle_Closure_declarations() {\n/** @type {?} */\nOauth1Service.base;\n/** @type {?} */\nOauth1Service.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOauth1Service.ctorParameters;\n/** @type {?} */\nOauth1Service.prototype.defaults;\n/** @type {?} */\nOauth1Service.prototype.http;\n/** @type {?} */\nOauth1Service.prototype.popup;\n/** @type {?} */\nOauth1Service.prototype.config;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable, Injector} from '@angular/core';\nimport {Oauth1Service} from './oauth1.service';\nimport {Oauth2Service} from './oauth2.service';\nimport {SharedService} from './shared.service';\nimport {Response, RequestOptionsArgs} from '@angular/http';\nimport {joinUrl} from './utils';\nimport {ConfigService, IOauth1Options} from './config.service';\nimport {Observable} from 'rxjs/Observable';\nimport'rxjs/add/operator/do';\nimport {JwtHttp} from './jwt-http.service';\n/**\n * Created by Ron on 17/12/2015.\n */\nexport class OauthService {\n/**\n * @param {?} http\n * @param {?} injector\n * @param {?} shared\n * @param {?} config\n */\nconstructor(private http: JwtHttp,\nprivate injector: Injector,\nprivate shared: SharedService,\nprivate config: ConfigService) {}\n/**\n * @param {?} name\n * @param {?=} userData\n * @param {?=} oauth\n * @return {?}\n */\nauthenticate(name: string, userData?: any, oauth?: any): Observable<Response> {\n        // var injector = Injector.resolveAndCreate([Oauth1, Oauth2]);\n        const /** @type {?} */ provider: { open(options?: any, userData?: any): Observable<any> } = this.config.providers[name].oauthType === '1.0' ? this.injector.get(Oauth1Service) : oauth;\n        return provider.open(this.config.providers[name], userData || {})\n            .do((response: Response) => {\n                // this is for a scenario when someone wishes to opt out from\n                // satellizer's magic by doing authorization code exchange and\n                // saving a token manually.\n                if (this.config.providers[name].url) {\n                    this.shared.setToken(response);\n                }\n            });\n    }\n/**\n * @param {?} provider\n * @param {?} opts\n * @return {?}\n */\nunlink(provider: string, opts: RequestOptionsArgs) {\n        opts = opts || {};\n        let /** @type {?} */ url = opts.url ? opts.url : joinUrl(this.config.baseUrl, this.config.unlinkUrl);\n        opts.body = JSON.stringify({ provider: provider }) || opts.body;\n        opts.method = opts.method || 'POST';\n\n        return this.http.request(url, opts);\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: JwtHttp, },\n{type: Injector, },\n{type: SharedService, },\n{type: ConfigService, },\n];\n}\n\nfunction OauthService_tsickle_Closure_declarations() {\n/** @type {?} */\nOauthService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOauthService.ctorParameters;\n/** @type {?} */\nOauthService.prototype.http;\n/** @type {?} */\nOauthService.prototype.injector;\n/** @type {?} */\nOauthService.prototype.shared;\n/** @type {?} */\nOauthService.prototype.config;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {assign, camelCase, joinUrl, merge} from './utils';\nimport {ConfigService, IOauth2Options} from './config.service';\nimport {PopupService} from './popup.service';\nimport {StorageService} from './storage.service';\nimport'rxjs/add/operator/switchMap';\nimport'rxjs/add/observable/of';\nimport {JwtHttp} from './jwt-http.service';\n/**\n * Created by Ron on 17/12/2015.\n */\nexport class Oauth2Service {\nprivate static base: IOauth2Options & { defaultUrlParams: string[] } = {\n        defaultUrlParams: ['response_type', 'client_id', 'redirect_uri'],\n        responseType: 'code',\n        responseParams: {\n            code: 'code',\n            clientId: 'clientId',\n            redirectUri: 'redirectUri'\n        }\n    };\nprivate defaults: IOauth2Options & { defaultUrlParams: string[] };\n/**\n * @param {?} http\n * @param {?} popup\n * @param {?} storage\n * @param {?} config\n */\nconstructor(private http: JwtHttp,\nprivate popup: PopupService,\nprivate storage: StorageService,\nprivate config: ConfigService) {\n    }\n/**\n * @param {?} options\n * @param {?=} userData\n * @return {?}\n */\nopen(options: IOauth2Options, userData?: any) {\n        this.defaults = merge(options, Oauth2Service.base);\n\n        let /** @type {?} */ url;\n        let /** @type {?} */ openPopup: Observable<any>;\n        const /** @type {?} */ stateName = this.defaults.name + '_state';\n        const /** @type {?} */ state = this.defaults.state;\n        const /** @type {?} */ exp = new Date(Date.now() + 60 * 60 * 1000).toUTCString();\n        if (typeof state === 'string') {\n            this.storage.set(stateName, state, exp);\n        } else if (typeof state === 'function') {\n            this.storage.set(stateName, state(), exp);\n        }\n\n        url = [this.defaults.authorizationEndpoint, this.buildQueryString()].join('?');\n\n        if (this.config.cordova) {\n            openPopup = this.popup\n                .open(url, this.defaults.name, this.defaults.popupOptions/*, this.defaults.redirectUri*/)\n                .eventListener(this.defaults.redirectUri);\n        } else {\n            openPopup = this.popup\n                .open(url, this.defaults.name, this.defaults.popupOptions/*, this.defaults.redirectUri*/)\n                .pollPopup();\n        }\n\n        return openPopup\n            .switchMap((oauthData) => {\n                // when no server URL provided, return popup params as-is.\n                // this is for a scenario when someone wishes to opt out from\n                // satellizer's magic by doing authorization code exchange and\n                // saving a token manually.\n                if (this.defaults.responseType === 'token' || !this.defaults.url) {\n                    return Observable.of(oauthData);\n                }\n\n                if (oauthData.state && oauthData.state !== this.storage.get(stateName)) {\n                    throw 'OAuth \"state\" mismatch';\n                }\n                let /** @type {?} */ exchangeForToken: any = options.exchangeForToken;\n                if (typeof exchangeForToken !== 'function') {\n                    exchangeForToken = this.exchangeForToken.bind(this);\n                }\n                return exchangeForToken(oauthData, userData);\n            });\n    }\n/**\n * @param {?} oauthData\n * @param {?=} userData\n * @return {?}\n */\nprivate exchangeForToken(oauthData: { code?: string, state?: string }, userData?: {}) {\n        let /** @type {?} */ data: any = assign({}, this.defaults, oauthData, userData);\n\n        let /** @type {?} */ exchangeForTokenUrl = this.config.baseUrl ? joinUrl(this.config.baseUrl, this.defaults.url) : this.defaults.url;\n\n        return this.defaults.method\n            ? this.http.request(exchangeForTokenUrl, {\n                body: JSON.stringify(data),\n                withCredentials: this.config.withCredentials,\n                method: this.defaults.method\n            })\n            : this.http.post(exchangeForTokenUrl, JSON.stringify(data), {withCredentials: this.config.withCredentials});\n    }\n/**\n * @return {?}\n */\nprivate buildQueryString() {\n        let /** @type {?} */ keyValuePairs: string[][] = [];\n        let /** @type {?} */ urlParams = ['defaultUrlParams', 'requiredUrlParams', 'optionalUrlParams'];\n\n        urlParams.forEach((params) => {\n            if (this.defaults[params]) {\n                ( /** @type {?} */((<string[]>this.defaults[params]))).forEach((paramName) => {\n                    let /** @type {?} */ camelizedName = camelCase(paramName);\n                    let /** @type {?} */ paramValue = typeof this.defaults[paramName] === 'function' ?\n                        this.defaults[paramName]() :\n                        this.defaults[camelizedName];\n\n                    if (paramName === 'state') {\n                        let /** @type {?} */ stateName = this.defaults.name + '_state';\n                        paramValue = encodeURIComponent(this.storage.get(stateName));\n                    }\n\n                    if (paramName === 'scope' && Array.isArray(paramValue)) {\n                        paramValue = paramValue.join(this.defaults.scopeDelimiter);\n\n                        if (this.defaults.scopePrefix) {\n                            paramValue = [this.defaults.scopePrefix, paramValue].join(this.defaults.scopeDelimiter);\n                        }\n                    }\n\n                    if (params !== 'optionalUrlParams' || typeof paramValue !== 'undefined') {\n                        keyValuePairs.push([paramName, paramValue]);\n                    }\n                });\n            }\n        });\n\n        return keyValuePairs.map(function (pair) {\n            return pair.join('=');\n        }).join('&');\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: JwtHttp, },\n{type: PopupService, },\n{type: StorageService, },\n{type: ConfigService, },\n];\n}\n\nfunction Oauth2Service_tsickle_Closure_declarations() {\n/** @type {?} */\nOauth2Service.base;\n/** @type {?} */\nOauth2Service.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nOauth2Service.ctorParameters;\n/** @type {?} */\nOauth2Service.prototype.defaults;\n/** @type {?} */\nOauth2Service.prototype.http;\n/** @type {?} */\nOauth2Service.prototype.popup;\n/** @type {?} */\nOauth2Service.prototype.storage;\n/** @type {?} */\nOauth2Service.prototype.config;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {Injectable} from '@angular/core';\nimport {RequestOptionsArgs, Response} from '@angular/http';\nimport {SharedService} from './shared.service';\nimport {LocalService} from './local.service';\nimport {OauthService} from './oauth.service';\nimport {Observable} from 'rxjs/Observable';\n/**\n * Created by Ron on 17/12/2015.\n */\nexport class AuthService {\n/**\n * @param {?} shared\n * @param {?} local\n * @param {?} oauth\n */\nconstructor(private shared: SharedService,\nprivate local: LocalService,\nprivate oauth: OauthService) {\n    }\n/**\n * @param {?} user\n * @param {?=} opts\n * @return {?}\n */\nlogin(user, opts?: RequestOptionsArgs): Observable<Response> {\n        return this.local.login(user, opts);\n    }\n/**\n * @param {?} user\n * @param {?=} opts\n * @return {?}\n */\nsignup(user, opts?: RequestOptionsArgs): Observable<Response> {\n        return this.local.signup(user, opts);\n    }\n/**\n * @return {?}\n */\nlogout(): Observable<void> {\n        return this.shared.logout();\n    }\n/**\n * @param {?} name\n * @param {?=} userData\n * @param {?=} oauth\n * @return {?}\n */\nauthenticate(name: string, userData?: any, oauth?: any): Observable<Response> {\n        return this.oauth.authenticate(name, userData, oauth);\n    }\n/**\n * @param {?} name\n * @param {?=} userData\n * @return {?}\n */\nlink(name: string, userData?: any): Observable<Response> {\n        return this.oauth.authenticate(name, userData);\n    }\n/**\n * @param {?} provider\n * @param {?} opts\n * @return {?}\n */\nunlink(provider: string, opts: RequestOptionsArgs): Observable<Response> {\n        return this.oauth.unlink(provider, opts);\n    }\n/**\n * @return {?}\n */\nisAuthenticated(): boolean {\n        return this.shared.isAuthenticated();\n    }\n/**\n * @return {?}\n */\ngetToken(): string {\n        return this.shared.getToken();\n    }\n/**\n * @param {?} token\n * @return {?}\n */\nsetToken(token: string | Response): void {\n        this.shared.setToken(token);\n    }\n/**\n * @return {?}\n */\nremoveToken(): void {\n        this.shared.removeToken();\n    }\n/**\n * @return {?}\n */\ngetPayload(): any {\n        return this.shared.getPayload();\n    }\n/**\n * @param {?} type\n * @return {?}\n */\nsetStorageType(type: 'localStorage' | 'sessionStorage' | 'cookie' | 'sessionCookie'): void {\n        this.shared.setStorageType(type);\n    }\n/**\n * @return {?}\n */\ngetExpirationDate(): Date {\n        return this.shared.getExpirationDate();\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: SharedService, },\n{type: LocalService, },\n{type: OauthService, },\n];\n}\n\nfunction AuthService_tsickle_Closure_declarations() {\n/** @type {?} */\nAuthService.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nAuthService.ctorParameters;\n/** @type {?} */\nAuthService.prototype.shared;\n/** @type {?} */\nAuthService.prototype.local;\n/** @type {?} */\nAuthService.prototype.oauth;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","/**\n * Created by Ron on 25/12/2015.\n */\n\nimport {CustomConfig, ConfigService} from './config.service';\nimport {SharedService} from './shared.service';\nimport {JwtHttp} from './jwt-http.service';\nimport {OauthService} from './oauth.service';\nimport {PopupService} from './popup.service';\nimport {Oauth1Service} from './oauth1.service';\nimport {Oauth2Service} from './oauth2.service';\nimport {LocalService} from './local.service';\nimport {AuthService} from './auth.service';\nimport {StorageService, BrowserStorageService} from './storage.service';\nimport {ModuleWithProviders, NgModule, Injector, Type} from '@angular/core';\nimport {HttpModule, Http} from '@angular/http';\nexport class Ng2UiAuthModule {\n/**\n * @param {?} config\n * @param {?} httpProvider\n * @return {?}\n */\nstatic forRootWithCustomHttp(config: Type<CustomConfig>, httpProvider: any): ModuleWithProviders {\n        return {\n            ngModule: Ng2UiAuthModule,\n            providers: [\n                {provide: CustomConfig, useClass: config },\n                {provide: ConfigService, useClass: ConfigService, deps: [CustomConfig] },\n                {provide: StorageService, useClass: BrowserStorageService, deps: [ConfigService]},\n                {provide: SharedService,  useClass: SharedService, deps: [StorageService, ConfigService]},\n                httpProvider,\n                {provide: OauthService,  useClass: OauthService, deps: [JwtHttp, Injector, SharedService, ConfigService]} ,\n                {provide: PopupService,  useClass: PopupService, deps: [ConfigService]},\n                {provide: Oauth1Service,  useClass: Oauth1Service, deps: [JwtHttp, PopupService, ConfigService]} ,\n                {provide: Oauth2Service,  useClass: Oauth2Service, deps: [JwtHttp, PopupService, StorageService, ConfigService]} ,\n                {provide: LocalService,  useClass: LocalService, deps: [JwtHttp, SharedService, ConfigService]} ,\n                {provide: AuthService,  useClass: AuthService, deps: [SharedService, LocalService, OauthService]} ,]\n        }\n    }\n/**\n * @param {?} config\n * @return {?}\n */\nstatic forRoot(config: Type<CustomConfig>): ModuleWithProviders {\n        return {\n            ngModule: Ng2UiAuthModule,\n            providers: [\n                {provide: CustomConfig, useClass: config },\n                {provide: ConfigService, useClass: ConfigService, deps: [CustomConfig] },\n                {provide: StorageService, useClass: BrowserStorageService, deps: [ConfigService]},\n                {provide: SharedService,  useClass: SharedService, deps: [StorageService, ConfigService]},\n                {provide: JwtHttp, useClass: JwtHttp, deps: [Http, SharedService, ConfigService]},\n                {provide: OauthService,  useClass: OauthService, deps: [JwtHttp, Injector, SharedService, ConfigService]} ,\n                {provide: PopupService,  useClass: PopupService, deps: [ConfigService]},\n                {provide: Oauth1Service,  useClass: Oauth1Service, deps: [JwtHttp, PopupService, ConfigService]} ,\n                {provide: Oauth2Service,  useClass: Oauth2Service, deps: [JwtHttp, PopupService, StorageService, ConfigService]} ,\n                {provide: LocalService,  useClass: LocalService, deps: [JwtHttp, SharedService, ConfigService]} ,\n                {provide: AuthService,  useClass: AuthService, deps: [SharedService, LocalService, OauthService]} ,]\n        }\n    }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{\n    imports: [HttpModule]\n}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction Ng2UiAuthModule_tsickle_Closure_declarations() {\n/** @type {?} */\nNg2UiAuthModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nNg2UiAuthModule.ctorParameters;\n}\n\n\nexport {\n    LocalService,\n    Oauth2Service,\n    Oauth1Service,\n    PopupService,\n    OauthService,\n    JwtHttp,\n    SharedService,\n    StorageService, BrowserStorageService,\n    AuthService,\n    ConfigService, CustomConfig\n};\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"],"names":["assign","target","src","_i","arguments","length","TypeError","Object","index","source","key","prototype","hasOwnProperty","call","joinUrl","baseUrl","url","test","str","replace","normalize","join","merge$1","obj1","obj2","result","i","merge","getFullOpts","user","userOpts","opts","body","JSON","stringify","method","CustomConfig","ConfigService","config","_this","this","withCredentials","tokenRoot","loginUrl","signupUrl","unlinkUrl","refreshUrl","tokenName","tokenSeparator","tokenPrefix","authHeader","authToken","storageType","defaultHeaders","autoRefreshToken","refreshBeforeExpiration","tryTokenRefreshIfUnauthorized","cordova","isCordovaApp","resolveToken","response","tokenObj","Response","json","accessToken","console","warn","tokenRootData","split","reduce","o","x","token","tokenPath","providers","facebook","name","authorizationEndpoint","redirectUri","getHttpHost","requiredUrlParams","scope","scopeDelimiter","display","oauthType","popupOptions","width","height","google","optionalUrlParams","scopePrefix","state","encodeURIComponent","Math","random","toString","substr","github","instagram","linkedin","twitter","twitch","live","yahoo","bitbucket","spotify","keys","forEach","map","provider","path","window","location","origin","decorators","type","Injectable","ctorParameters","StorageService","get","set","value","date","remove","BrowserStorageService","_super","store","isStorageAvailable","checkIsStorageAvailable","__extends","getCookie","getItem","setCookie","setItem","removeCookie","removeItem","isCookieStorageAvailable","supported","substring","e","document","Date","now","toUTCString","expires","cookie","RegExp","SharedService","storage","getToken","getPayload","base64","parse","decodeURIComponent","atob","undefined","setToken","expDate","getExpirationDate","removeToken","isAuthenticated","exp","round","getTime","payload","setUTCSeconds","logout","Observable","create","observer","next","complete","setStorageType","JwtHttp","_http","_shared","_config","request","options","refreshToken","switchMap","actualRequest","catch","status","RequestMethod","Get","post","Post","put","Put","delete","Delete","patch","Patch","head","Head","Headers","append","headers","do","res","Request","setHeaders","obj","defaultHeader","has","Http","PopupService","popupWindow","open","stringifiedOptions","stringifyOptions","prepareOptions","UA","navigator","userAgent","windowName","indexOf","focus","eventListener","fromEvent","event","closed","throw","Error","empty","parser","createElement","href","search","hash","queryParams","hashParams","parseQueryString","allParams","close","error","of","delay","take","pollPopup","interval","documentOrigin","host","popupWindowOrigin","qs","left","screenX","outerWidth","top","screenY","outerHeight","toolbar","visibleToolbar","joinedKeyValue","keyValue","Oauth1Service","http","popup","userData","defaults","base","serverUrl","buildQueryString","exchangeForToken","bind","oauthData","data","exchangeForTokenUrl","OauthService","injector","shared","authenticate","oauth","unlink","Injector","Oauth2Service","stateName","responseType","keyValuePairs","params","paramName","camelizedName","_","separator","letter","offset","toUpperCase","camelCase","paramValue","Array","isArray","push","pair","defaultUrlParams","responseParams","code","clientId","LocalService","login","fullOpts","signup","AuthService","local","link","Ng2UiAuthModule","forRootWithCustomHttp","httpProvider","ngModule","provide","useClass","deps","forRoot","NgModule","args","imports","HttpModule"],"mappings":"4pCAOA,SAAAA,EAHCC,GAAD,IAAC,IAADC,KAAAC,EAAA,EAACA,EAADC,UAAAC,OAACF,IAAAD,EAADC,EAAA,GAAAC,UAAAD,GAII,GAHc,MAGVF,EACA,MAHM,IAAIK,UAAU,8CAMxBL,EAHSM,OAAON,GAIhB,IAAK,IAHIO,EAAQ,EAAGA,EAAQJ,UAAUC,OAAQG,IAAS,CAInD,IAHIC,EAASL,UAAUI,GAIvB,GAHc,MAGVC,EACA,IAAK,IAHIC,KAAOD,EAIRF,OAHOI,UAAUC,eAAeC,KAAKJ,EAAQC,KAI7CT,EAHOS,GAAOD,EAAOC,IAQrC,OAHOT,EAUX,SAAAa,EAPCC,EAAAC,GAQG,GAAI,qBAPqBC,KAAKD,GAQ1B,OAPOA,EAoBX,OAfgB,SAAAE,GAQZ,OAPOA,EAQFC,QAPQ,SAAU,KAQlBA,QAPQ,QAAS,KAQjBA,QAPQ,QAAS,KAQjBA,QAPQ,QAAS,OAGnBC,EAVML,EAAUC,GAAKK,KAAK,MAwBrC,SAAAC,EAXCC,EAAAC,GAYG,IAXIC,KAYJ,IAAK,IAXIC,KAAKH,EAYNA,EAXKX,eAAec,KACfA,KAAKF,GAA6B,iBAAZD,EAAKG,IAA2B,OAAPA,EAYhDD,EAXOC,GAAKC,EAAMJ,EAAKG,GAAIF,EAAKE,IAahCD,EAXOC,GAAKH,EAAKG,IAe7B,IAAKA,KAXKF,EAYN,GAAIA,EAXKZ,eAAec,GAAI,CAYxB,GAAIA,KAXKD,EAYL,SAEJA,EAXOC,GAAKF,EAAKE,GAezB,OAXOD,EC/CX,SAAAG,EADCC,EAAAC,GAEG,IADMC,EAAOD,MAMb,OAJID,IACFE,EADOC,KAAuB,iBAATH,EAAoBA,EAAOI,KAAKC,UAAUL,IAGjEE,EADKI,OAASJ,EAAKI,QAAU,OACtBJ,yUCgCXK,EAAA,WAqBA,OArBA,aAAA,GAuBAC,EAAA,WA+CA,SAAAA,EA/CKC,GA+CL,IAAAC,EAAAC,KAiBIA,KAAJC,iBA/CsB,EAgDlBD,KAAJE,UA/CgB,KAgDZF,KAAJzB,QA/Cc,IAgDVyB,KAAJG,SA/Ce,cAgDXH,KAAJI,UA/CgB,eAgDZJ,KAAJK,UA/CgB,gBAgDZL,KAAJM,WA/CiB,gBAgDbN,KAAJO,UA/CgB,QAgDZP,KAAJQ,eA/CqB,IAgDjBR,KAAJS,YA/CkB,cAgDdT,KAAJU,WA/CiB,gBAgDbV,KAAJW,UA/CgB,SAgDZX,KAAJY,YA/CkF,eAgD9EZ,KAAJa,eA/CqB,KAgDjBb,KAAJc,kBA/CuB,EAgDnBd,KAAJe,wBA/C8B,IAgD1Bf,KAAJgB,+BA/CoC,EAgDhChB,KAAJiB,QA/CcjB,KAAKkB,eAgDflB,KAAJmB,aA/CmB,SAAAC,GAgDX,IA/CIC,EAAWD,EAgDXA,aA/CoBE,EAAAA,WAgDpBD,EA/CWD,EAASG,QAiDxB,IA/CMC,EAAkDH,IAgDnDA,EA/CU,cAAkBA,EAAU,OAAWA,EAAU,MAgDhE,IA/CKG,EAiDD,OADAC,QA/CQC,KAAK,kBACN,KAiDX,GA/C2B,iBAAhBF,EAgDP,OA/COA,EAiDX,GA/C2B,iBAAhBA,EAiDP,OADAC,QA/CQC,KAAK,kBACN,KAiDX,IA/CMC,EAAgB5B,EAAKG,WAgDvBH,EA/CKG,UAAU0B,MAAM,KAAKC,OAgDtB,SAACC,EA/CGC,GAgDA,OA/COD,EAAEC,IAiDbP,GA9CFQ,EAAQL,EAAgBA,EAAc5B,EAAKQ,WAAaiB,EAAYzB,EAAKQ,WAgD/E,GAAIyB,EACA,OA/COA,EAiDX,IA/CIC,EAAYlC,EAAKG,UAAYH,EAAKG,UAAY,IAAMH,EAAKQ,UAAYR,EAAKQ,UAiD9E,OADAkB,QA/CQC,KAAK,4BAA8BO,GACpC,MAiDXjC,KAAJkC,WACQC,UACIC,KA/CM,WAgDN5D,IA/CK,iBAgDL6D,sBA/CuB,6CAgDvBC,YA/CatC,KAAKuC,YAAY,KAgD9BC,mBA/CmB,UAAY,SAgD/BC,OA/CO,SAgDPC,eA/CgB,IAgDhBC,QA/CS,QAgDTC,UA/CW,MAgDXC,cA/CcC,MAAQ,IAAKC,OAAQ,MAiDvCC,QACIZ,KA/CM,SAgDN5D,IA/CK,eAgDL6D,sBA/CuB,4CAgDvBC,YA/CatC,KAAKuC,cAgDlBC,mBA/CmB,SAgDnBS,mBA/CmB,UAAY,QAAS,SAAU,aAAc,cAAe,yBAA0B,eAAgB,MAgDzHR,OA/CO,UAAY,SAgDnBS,YA/Ca,SAgDbR,eA/CgB,IAgDhBC,QA/CS,QAgDTC,UA/CW,MAgDXC,cA/CcC,MAAQ,IAAKC,OAAQ,KAgDnCI,MA/CO,WAAM,OAAAC,mBAAmBC,KAAKC,SAASC,SAAS,IAAIC,OAAO,MAiDtEC,QACIrB,KA/CM,SAgDN5D,IA/CK,eAgDL6D,sBA/CuB,2CAgDvBC,YA/CatC,KAAKuC,cAgDlBU,mBA/CmB,SAgDnBR,OA/CO,cAgDPC,eA/CgB,IAgDhBE,UA/CW,MAgDXC,cA/CcC,MAAQ,KAAMC,OAAQ,MAiDxCW,WACItB,KA/CM,YAgDN5D,IA/CK,kBAgDL6D,sBA/CuB,4CAgDvBC,YA/CatC,KAAKuC,cAgDlBC,mBA/CmB,SAgDnBC,OA/CO,SAgDPC,eA/CgB,IAgDhBE,UA/CW,OAiDfe,UACIvB,KA/CM,WAgDN5D,IA/CK,iBAgDL6D,sBA/CuB,oDAgDvBC,YA/CatC,KAAKuC,cAgDlBC,mBA/CmB,SAgDnBC,OA/CO,kBAgDPC,eA/CgB,IAgDhBS,MA/CO,QAgDPP,UA/CW,MAgDXC,cA/CcC,MAAQ,IAAKC,OAAQ,MAiDvCa,SACIxB,KA/CM,UAgDN5D,IA/CK,gBAgDL6D,sBA/CuB,6CAgDvBC,YA/CatC,KAAKuC,cAgDlBK,UA/CW,MAgDXC,cA/CcC,MAAQ,IAAKC,OAAQ,MAiDvCc,QACIzB,KA/CM,SAgDN5D,IA/CK,eAgDL6D,sBA/CuB,gDAgDvBC,YA/CatC,KAAKuC,cAgDlBC,mBA/CmB,SAgDnBC,OA/CO,aAgDPC,eA/CgB,IAgDhBC,QA/CS,QAgDTC,UA/CW,MAgDXC,cA/CcC,MAAQ,IAAKC,OAAQ,MAiDvCe,MACI1B,KA/CM,OAgDN5D,IA/CK,aAgDL6D,sBA/CuB,+CAgDvBC,YA/CatC,KAAKuC,cAgDlBC,mBA/CmB,UAAY,SAgD/BC,OA/CO,aAgDPC,eA/CgB,IAgDhBC,QA/CS,QAgDTC,UA/CW,MAgDXC,cA/CcC,MAAQ,IAAKC,OAAQ,MAiDvCgB,OACI3B,KA/CM,QAgDN5D,IA/CK,cAgDL6D,sBA/CuB,kDAyCjCC,YAxCuBtC,KAAKuC,cAgDlBE,SACAC,eA/CgB,IAgDhBE,UA/CW,MAgDXC,cA/CcC,MAAQ,IAAKC,OAAQ,MAiDvCiB,WACI5B,KA/CM,YAgDN5D,IA/CK,kBAgDL6D,sBA/CuB,8CAgDvBC,YA/CatC,KAAKuC,YAAY,KAgD9BC,mBA/CmB,SAgDnBC,OA/CO,SAgDPC,eA/CgB,IAgDhBE,UA/CW,MAgDXC,cA/CcC,MAAQ,KAAMC,OAAQ,MAiDxCkB,SACI7B,KA/CM,UAgDN5D,IA/CK,gBAgDL6D,sBA/CuB,yCAgDvBC,YA/CatC,KAAKuC,cAgDlBU,mBA/CmB,SAgDnBT,mBA/CmB,SAgDnBC,OA/CO,mBAgDPS,YA/Ca,GAgDbR,eA/CgB,IAgDhBE,UA/CW,MAgDXC,cA/CgBC,MAAO,IAAKC,OAAQ,KAgDpCI,MA/CO,WAAM,OAAAC,mBAAmBC,KAAKC,SAASC,SAAS,IAAIC,OAAO,OAjJtEzF,OAAOmG,KAAKpE,GAAQqE,QAAQ,SAACjG,GACE,oBAAhB4B,EAAO5B,KAGN,cAARA,EACA6B,EAAK7B,GAAO4B,EAAO5B,GAEnBH,OAAOmG,KAAKpE,EAAO5B,IAAMkG,IAAI,SAAAC,GACzBtE,EAAKmC,UAAUmC,GAAYtG,OAAOP,OAC9BuC,EAAKmC,UAAUmC,OACfvE,EAAOoC,UAAUmC,gBA6LzCxE,EAAA1B,UAAAoE,YAAA,SAlDK+B,GAmDG,YAnDR,IAAAA,IAAKA,EAAL,IACeC,OAAOC,SAASC,OAASH,GAuDxCzE,EAAA1B,UAAA+C,aAAA,WACQ,QApDSqD,OAAQ,WA1MzB,GA4MO1E,EAAP6E,aACEC,KAAMC,EAAAA,aAGP/E,EAADgF,eAAC,WAAA,QAuDAF,KAAM/E,KC5UP,IAAAkF,EAAA,WAAA,SAAAA,KAqBA,OAfAA,EAAA3G,UAAA4G,IAAA,SAPc7G,KAed4G,EAAA3G,UAAA6G,IAAA,SAbc9G,EAAA+G,EAAAC,KAmBdJ,EAAA3G,UAAAgH,OAAA,SAjBcjH,KAkBd4G,EArBA,GAyBAM,EAAA,SAAAC,GAMA,SAAAD,EAjBwBtF,GAiBxB,IAAAC,EACQsF,EADRhH,KAAA2B,OAAAA,YAjBwBD,EAAxBD,OAAwBA,EAHZC,EAAZuF,SAsBQvF,EAAKwF,mBAAqBxF,EAAKyF,wBAAwB1F,GAClDC,EAAKwF,oBACN9D,QAAQC,KAAK5B,EAAOc,YAAc,+BAzB7C6E,EAADL,EAAAC,GAgCAD,EAAAjH,UAAA4G,IAAA,SApBK7G,GAqBG,OApBO8B,KAAKuF,mBACsB,WAA5BvF,KAAKF,OAAOc,aAAwD,kBAA5BZ,KAAKF,OAAOc,YAChDZ,KAAK0F,UAAUxH,GACfqG,OAAOvE,KAAKF,OAAOc,aAAa+E,QAAQzH,GAC5C8B,KAAKsF,MAAMpH,IA4BzBkH,EAAAjH,UAAA6G,IAAA,SAzBK9G,EAAA+G,EAAAC,GA0BGlF,KAzBKuF,mBAC6B,WAA5BvF,KAAKF,OAAOc,aAAwD,kBAA5BZ,KAAKF,OAAOc,YACpDZ,KAAK4F,UAAU1H,EAAK+G,EAAmC,WAA5BjF,KAAKF,OAAOc,YAA2BsE,EAAO,IACzEX,OAAOvE,KAAKF,OAAOc,aAAaiF,QAAQ3H,EAAK+G,GAC7CjF,KAAKsF,MAAMpH,GAAO+G,GA+BhCG,EAAAjH,UAAAgH,OAAA,SA5BKjH,GA6BG8B,KA5BKuF,mBAC6B,WAA5BvF,KAAKF,OAAOc,aAAwD,kBAA5BZ,KAAKF,OAAOc,YACpDZ,KAAK8F,aAAa5H,GAClBqG,OAAOvE,KAAKF,OAAOc,aAAamF,WAAW7H,UACpC8B,KAAKsF,MAAMpH,IAG3BkH,EAALjH,UAAAqH,wBAAK,SAAA1F,GAgCG,GA/B2B,WA+BvBA,EA/BOc,aAAmD,kBAAvBd,EAAOc,YAgC1C,OA/BOZ,KAAKgG,2BAiChB,IACI,IA/BMC,EAAY1B,QAAUzE,EAAOc,eAAe2D,QAAyC,OAA/BA,OAAOzE,EAAOc,aAiC1E,GAAIqF,EA/BW,CAgCX,IA/BM/H,EAAMmF,KAAKC,SAASC,SAAS,IAAI2C,UAAU,GAgCjD3B,OA/BOvE,KAAKF,OAAOc,aAAaiF,QAAQ3H,EAAK,IAgC7CqG,OA/BOvE,KAAKF,OAAOc,aAAamF,WAAW7H,GAkC/C,OA/BO+H,EACT,MAAAE,GAgCE,OA/BO,IAIdf,EAALjH,UAAA6H,yBAAK,WAkCG,IAGI,GAnCkBI,UAAY,WAAYA,SAE3B,CAkCX,IAjCMlI,EAAMmF,KAAKC,SAASC,SAAS,IAAI2C,UAAU,GAkCjDlG,KAjCK4F,UAAU1H,EAAK,OAAQ,IAAImI,KAAKA,KAAKC,MAAQ,KAAWC,eAkC7D,IAjCMtB,EAAQjF,KAAK0F,UAAUxH,GAmC7B,OADA8B,KAjCK8F,aAAa5H,GACD,SAAV+G,EAmCX,OAjCO,EACT,MAAAkB,GAkCE,OAjCO,IAIdf,EAALjH,UAAAyH,UAAK,SAAA1H,EAAA+G,EAAAuB,EAAAlC,QAAL,IAAAkC,IAAKA,EAAL,SAAA,IAAAlC,IAAKA,EAAL,KAwCQ8B,SAvCSK,OAASvI,EAuC1B,IAvCiC+G,GAASuB,EAAY,aAAAA,EAAyB,IAuC/E,UAvCkFlC,GAG7Ec,EAALjH,UAAA2H,aAAK,SAAA5H,EAAAoG,QAAL,IAAAA,IAAKA,EAAL,KA4CQtE,KA3CK4F,UAAU1H,EAAK,GAAI,IAAImI,KAAK,GAAGE,cAAejC,IAGtDc,EAALjH,UAAAuH,UAAK,SAAAxH,GA+CG,OA9COkI,SAASK,OAAO9H,QAAQ,IAAI+H,OAAO,mBAACxI,EA8CnD,+BA9CwG,SAlExG,CAfC4G,GAmFMM,EAAPV,aACEC,KAAMC,EAAAA,aAGPQ,EAADP,eAAC,WAAA,QAiDAF,KAAM9E,KC1IP,IAAA8G,EAAA,WAMA,SAAAA,EADwBC,EAAiC9G,GAAjCE,KAAxB4G,QAAwBA,EAAiC5G,KAAzDF,OAAyDA,EAJrDE,KAAJO,UAEgBP,KAAKF,OAAOW,aAAcT,KAAMF,OAAOW,YAAaT,KAAKF,OAAOS,WAAW1B,KAAKmB,KAAKF,OAAOU,gBAAkBR,KAAKF,OAAOS,iBAS1IoG,EAAAxI,UAAA0I,SAAA,WACQ,OAJO7G,KAAK4G,QAAQ7B,IAAI/E,KAAKO,YAUrCoG,EAAAxI,UAAA2I,WAAA,SAPK9E,GASG,QATR,IAAAA,IAAKA,EAAAhC,KAAA6G,YASO7E,GAPqC,IAA5BA,EAAMJ,MAAM,KAAK/D,OAQ1B,IACI,IANIkJ,EADY/E,EAAMJ,MAAM,KAAK,GACVjD,QAAQ,KAAM,KAAKA,QAAQ,KAAM,KAQxD,OAPOc,KAAKuH,MAAMC,mBAAmB7D,mBAAmBmB,OAAO2C,KAAKH,MACtE,MAAAZ,GAQE,OAPOgB,YAevBR,EAAAxI,UAAAiJ,SAAA,SAVKhG,GAWG,GAVKA,EAUL,CAKA,IAVIY,EAiBJ,GALIA,EAXoB,iBAAbZ,EACCA,EAEApB,KAAKF,OAAOqB,aAAaC,GAG1B,CAWP,IAVMiG,EAAUrH,KAAKsH,kBAAkBtF,GAWvChC,KAVK4G,QAAQ5B,IAAIhF,KAAKO,UAAWyB,EAAOqF,EAAUA,EAAQd,cAAgB,UAH1E9E,QAVQC,KAAK,4CA6BzBiF,EAAAxI,UAAAoJ,YAAA,WACQvH,KAZK4G,QAAQzB,OAAOnF,KAAKO,YAkBjCoG,EAAAxI,UAAAqJ,gBAAA,SAfKxF,GAkBG,QAlBR,IAAAA,IAAKA,EAAAhC,KAAA6G,YAkBO7E,EAfO,CAiBP,GAfgC,IAe5BA,EAfMJ,MAAM,KAAK/D,OAiBjB,IACI,IAdIkJ,EADY/E,EAAMJ,MAAM,KAAK,GACVjD,QAAQ,KAAM,KAAKA,QAAQ,KAAM,KACpD8I,EAAMhI,KAAKuH,MAAMzC,OAAO2C,KAAKH,IAASU,IAiB1C,GAAIA,EAfK,CAiBL,QAhBgBpE,KAAKqE,OAAM,IAAIrB,MAAOsB,UAAY,MAASF,KAkBvDzH,KAfK4G,QAAQzB,OAAOnF,KAAKO,YAClB,IAMjB,MAAA4F,GAiBE,OAfO,EAmBf,OAfO,EAkBX,OAfO,GAqBfQ,EAAAxI,UAAAmJ,kBAAA,SAlBKtF,QAAL,IAAAA,IAAKA,EAAAhC,KAAA6G,YAmBG,IAlBIe,EAAU5H,KAAK8G,WAAW9E,GAmB9B,GAAI4F,GAlBWA,EAAQH,KAAOpE,KAAKqE,OAAM,IAAIrB,MAAOsB,UAAY,KAAQC,EAAQH,IAAK,CAmBjF,IAlBIvC,EAAO,IAAImB,KAAK,GAoBpB,OADAnB,EAlBK2C,cAAcD,EAAQH,KACpBvC,EAoBX,OAlBO,MAuBfyB,EAAAxI,UAAA2J,OAAA,WAAA,IAAA/H,EAAAC,KACQ,OApBO+H,EAAAA,WAAWC,OAAO,SAACC,GAqBtBlI,EApBK6G,QAAQzB,OAAOpF,EAAKQ,WAqBzB0H,EApBSC,OAqBTD,EApBSE,cA2BrBxB,EAAAxI,UAAAiK,eAAA,SAvBKzD,GAwBG3E,KAvBKF,OAAOc,YAAc+D,KAtGlC,GAwGOgC,EAAPjC,aACEC,KAAMC,EAAAA,aAGP+B,EAAD9B,eAAC,WAAA,QA0BAF,KAAMG,IACNH,KAAM9E,KCtIP,IAAAwI,EAAA,WAMA,SAAAA,EAFgBC,EACAC,EACAC,GAFAxI,KAAhBsI,MAAgBA,EACAtI,KAAhBuI,QAAgBA,EACAvI,KAAhBwI,QAAgBA,SAUhBH,EAAAlK,UAAAsK,QAAA,SAPKjK,EAAAkK,GAOL,IAAA3I,EAAAC,KALcyH,EAAMzH,KAAKuI,QAAQjB,oBAQzB,OAAItH,KAPKuI,QAAQ1B,cACXY,GAAOA,EAAIE,UAAY3H,KAAKwI,QAAQzH,wBAA0BsF,KAAKC,SAQpEoC,EAPQ5H,kBAC2B,oBAA7B4H,EAAQ5H,kBAAoCd,KAAKwI,QAAQ1H,kBACzDd,KAAK2I,eAQPC,UAPU,WAAM,OAAA7I,EAAK8I,cAAcrK,EAAKkK,KAS7C1I,KAPKwI,QAAQxH,8BACNhB,KAAK6I,cAAcrK,EAAKkK,GAQ1BI,SAPM,SAAC1H,GAQJ,GAPwB,MAOpBA,EAPS2H,OAQT,OAPOhJ,EAAK4I,eAQPC,UAPU,WAAM,OAAA7I,EAAK8I,cAAcrK,EAAKkK,KASjD,MAPMtH,IAGXpB,KAAK6I,cAAcrK,EAAKkK,IAcvCL,EAAAlK,UAAA4G,IAAA,SAXKvG,EAAAkK,GAcG,OAFAA,EAXUA,MAYVA,EAXQ/I,OAASqJ,EAAAA,cAAcC,IACxBjJ,KAAKyI,QAAQjK,EAAKkK,IAmBjCL,EAAAlK,UAAA+K,KAAA,SAhBK1K,EAAAgB,EAAAkJ,GAoBG,OAHAA,EAhBUA,MAiBVA,EAhBQ/I,OAASqJ,EAAAA,cAAcG,KAiB/BT,EAhBQlJ,KAAOA,EACRQ,KAAKyI,QAAQjK,EAAKkK,IAwBjCL,EAAAlK,UAAAiL,IAAA,SArBK5K,EAAAgB,EAAAkJ,GAyBG,OAHAA,EArBUA,MAsBVA,EArBQ/I,OAASqJ,EAAAA,cAAcK,IAsB/BX,EArBQlJ,KAAOA,EACRQ,KAAKyI,QAAQjK,EAAKkK,IA4BjCL,EAAAlK,UAAAmL,UAAA,SAzBK9K,EAAAkK,GA4BG,OAFAA,EAzBUA,MA0BVA,EAzBQ/I,OAASqJ,EAAAA,cAAcO,OACxBvJ,KAAKyI,QAAQjK,EAAKkK,IAiCjCL,EAAAlK,UAAAqL,MAAA,SA9BKhL,EAAAgB,EAAAkJ,GAkCG,OAHAA,EA9BUA,MA+BVA,EA9BQ/I,OAASqJ,EAAAA,cAAcS,MA+B/Bf,EA9BQlJ,KAAOA,EACRQ,KAAKyI,QAAQjK,EAAKkK,IAqCjCL,EAAAlK,UAAAuL,KAAA,SAlCKlL,EAAAkK,GAqCG,OAFAA,EAlCUA,MAmCVA,EAlCQ/I,OAASqJ,EAAAA,cAAcW,KACxB3J,KAAKyI,QAAQjK,EAAKkK,IAuCjCL,EAAAlK,UAAAwK,aAAA,WAAA,IAAA5I,EAAAC,KAlCcU,EAAa,IAAIkJ,EAAAA,QAqCvB,OADAlJ,EAnCWmJ,OAAO7J,KAAKwI,QAAQ9H,WAAYV,KAAMwI,QAAQ7H,UAAY,IAAMX,KAAKuI,QAAQ1B,YACjF7G,KAAKsI,MAoCPvD,IAnCI/E,KAAKwI,QAAQlI,YAoCdwJ,QAnCSpJ,IAqCZqJ,MAnCG,SAACC,GAAkB,OAAAjK,EAAKwI,QAAQnB,SAAS4C,MAGpD3B,EAALlK,UAAA0K,cAAK,SAAArK,EAAAkK,GA+CG,OAPIlK,aAvCeyL,EAAAA,SAwCfzL,EAvCIsL,QAAUtL,EAAIsL,SAAW,IAAIF,EAAAA,QAwCjC5J,KAvCKkK,WAAW1L,KAyChBkK,EAvCUA,MAwCV1I,KAvCKkK,WAAWxB,IAEb1I,KAAKsI,MAAMG,QAAQjK,EAAKkK,IAGlCL,EAALlK,UAAA+L,WAAK,SAAAC,GAAA,IAALpK,EAAAC,KA2CQmK,EA1CIL,QAAUK,EAAIL,SAAW,IAAIF,EAAAA,QA2C7B5J,KA1CKwI,QAAQ3H,gBA2Cb9C,OA1COmG,KAAKlE,KAAKwI,QAAQ3H,gBAAgBsD,QAAQ,SAACiG,GACzCD,EAAIL,QAAQO,IAAID,IA2CjBD,EA1CIL,QAAQ9E,IAAIoF,EAAerK,EAAKyI,QAAQ3H,eAAeuJ,MA8CnEpK,KA1CKuI,QAAQf,mBA2Cb2C,EA1CIL,QAAQ9E,IAAIhF,KAAKwI,QAAQ9H,WAAYV,KAAKwI,QAAQ7H,UAAY,IAAMX,KAAKuI,QAAQ1B,eAvGjG,GA0GOwB,EAAP3D,aACEC,KAAMC,EAAAA,aAGPyD,EAADxD,eAAC,WAAA,QA6CAF,KAAM2F,EAAAA,OACN3F,KAAMgC,IACNhC,KAAM9E,KCzJP,IAAA0K,EAAA,WAMA,SAAAA,EACwBzK,GAAAE,KAAxBF,OAAwBA,EANpBE,KAAJxB,IAGU,GAFNwB,KAAJwK,YAG0B,YAQ1BD,EAAApM,UAAAsM,KAAA,SALKjM,EAAA4D,EAAAsG,GAMG1I,KALKxB,IAAMA,EAOX,IALIkM,EAAqB1K,KAAK2K,iBAAiB3K,KAAK4K,eAAelC,IAC/DmC,EAAKtG,OAAOuG,UAAUC,UACtBC,EAAahL,KAAMF,OAAOmB,SAAW4J,EAAGI,QAAQ,UAAW,EAAM,SAAW7I,EAehF,OARApC,KALKwK,YAAcjG,OAAOkG,KAAKjM,EAAKwM,EAAYN,GAOhDnG,OALQ,MAAUvE,KAAKwK,YAOnBxK,KALKwK,aAAexK,KAAKwK,YAAYU,OAMrClL,KALKwK,YAAYU,QAGdlL,MAWfuK,EAAApM,UAAAgN,cAAA,SARK7I,GAQL,IAAAvC,EAAAC,KACQ,OARO+H,EAAAA,WASF5I,MACG4I,EAAAA,WARWqD,UAAUpL,KAAKwK,YAAa,aAStC5B,UARU,SAACyC,GAUR,IARKtL,EAAKyK,aAAezK,EAAKyK,YAAYc,OAStC,OAROvD,EAAAA,WAAWwD,SAAM,IAAIC,MAAM,4BAUtC,GARuC,IAQnCH,EARM7M,IAAIyM,QAAQ3I,GASlB,OAROyF,EAAAA,WAAW0D,QAWtB,IARIC,EAAStF,SAASuF,cAAc,KAWpC,GAFAD,EAROE,KAAOP,EAAM7M,IAUhBkN,EAROG,QAAUH,EAAOI,KAAM,CAS9B,IARMC,EAAcL,EAAOG,OAAO3F,UAAU,GAAGvH,QAAQ,MAAO,IACxDqN,EAAaN,EAAOI,KAAK5F,UAAU,GAAGvH,QAAQ,MAAO,IACrDmN,EAAO/L,EAAKkM,iBAAiBD,GAE7BE,EAAY1O,KADPuC,EAAKkM,iBAAiBF,GACAD,GAYjC,GAFA/L,EARKyK,YAAY2B,QAUbD,EARUE,MASV,MARMF,EAAUE,MAUhB,OAROrE,EAAAA,WAAWsE,GAAGH,GAW7B,OAROnE,EAAAA,WAAW0D,UAClB1D,EAAAA,WAAWqD,UAAgBpL,KAAMwK,YAAa,QAAQ8B,MAAM,KAAKlI,IAAI,WAAM,MAAO,IAAIoH,MAAM,8BACvFe,KAAK,IAa9BhC,EAAApM,UAAAqO,UAAA,WAAA,IAAAzM,EAAAC,KACQ,OAVO+H,EAAAA,WAWF0E,SAVS,IAWT7D,UAVU,WAWP,IAVK7I,EAAKyK,aAAezK,EAAKyK,YAAYc,OAWtC,OAVOvD,EAAAA,WAAWwD,SAAM,IAAIC,MAAM,4BAYtC,IAVIkB,EAAiBtG,SAAS5B,SAASmI,KACnCC,EAAoB,GAWxB,IACIA,EAVoB7M,EAAKyK,YAAYhG,SAASmI,KAChD,MAAAP,IAcF,GAAIQ,IAVsBF,IAAkB3M,EAAMyK,YAAYhG,SAASqH,QAAU9L,EAAKyK,YAAYhG,SAASsH,MAAO,CAW9G,IAVMC,EAAchM,EAAKyK,YAAYhG,SAASqH,OAAO3F,UAAU,GAAGvH,QAAQ,MAAO,IAC3EqN,EAAajM,EAAKyK,YAAYhG,SAASsH,KAAK5F,UAAU,GAAGvH,QAAQ,QAAS,IAC1EmN,EAAO/L,EAAKkM,iBAAiBD,GAC7Ba,EAAK9M,EAAKkM,iBAAiBF,GAWjChM,EAVKyK,YAAY2B,QAWjB,IAVMD,EAAY1O,KAAWqP,EAAIf,GAWjC,GAAII,EAVUE,MAWV,MAVMF,EAAUE,MAYhB,OAVOrE,EAAAA,WAAWsE,GAAGH,GAa7B,OAVOnE,EAAAA,WAAW0D,UAYrBc,KAVK,IAGbhC,EAALpM,UAAAyM,eAAK,SAAAlC,GAeG,IAbI5F,GAYJ4F,EAbUA,OACU5F,OAAS,IACzBC,EAAS2F,EAAQ3F,QAAU,IAc/B,OAbOvF,GAeCsF,MAbOA,EAcPC,OAbQA,EAcR+J,KAbMvI,OAAOwI,SAAYxI,OAAOyI,WAAalK,GAAS,EActDmK,IAbK1I,OAAO2I,SAAY3I,OAAO4I,YAAcpK,GAAU,IAcvDqK,QAbS1E,EAAQ2E,eAAiB,MAAO,MAe7C3E,IAVP6B,EAALpM,UAAAwM,iBAAK,SAAAjC,GAiBG,OAhBO3K,OAAOmG,KAAKwE,GAAStE,IAAI,SAAClG,GAiB7B,OAhBOA,EAAM,IAAMwK,EAAQxK,KAC5BW,KAAK,MAGX0L,EAALpM,UAAA8N,iBAAK,SAAAqB,GAaH,IAZUpP,EAAK+G,EAoBT,OAnBOqI,EAAe1L,MAAM,KAAKC,OAoB7B,SAACsI,EAnBKoD,GAyBF,OALIA,IACAtI,EAnBQsI,EAAS3L,MAAM,KAqBvBuI,EADAjM,EAnBM+I,mBAAmBhC,EAAM,KACA,oBAAbA,EAAM,IAAqBgC,mBAAmBhC,EAAM,KAEnEkF,UA7HvB,GAiIOI,EAAP7F,aACEC,KAAMC,EAAAA,aAGP2F,EAAD1F,eAAC,WAAA,QAsBAF,KAAM9E,KClKP,IAAA2N,EAAA,WAcA,SAAAA,EAAwBC,EAAuBC,EAA6B5N,GAApDE,KAAxByN,KAAwBA,EAAuBzN,KAA/C0N,MAA+CA,EAA6B1N,KAA5EF,OAA4EA,SAS5E0N,EAAArP,UAAAsM,KAAA,SANK/B,EAAAiF,GAML,IAAA5N,EAAAC,KACQA,KANK4N,SAAWpQ,KAAWgQ,EAAcK,KAAMnF,GAO/C,IANI8B,EACAsD,EAAY9N,KAAKF,OAAOvB,QAAUD,EAAQ0B,KAAKF,OAAOvB,QAASyB,KAAK4N,SAASpP,KAAOwB,KAAK4N,SAASpP,IAYtG,OAVKwB,KAAKF,OAAOmB,UAObuJ,EANcxK,KAAK0N,MAAMjD,KAAK,GAAIzK,KAAK4N,SAASxL,KAAMpC,KAAK4N,SAAS/K,eAGjE7C,KAAKyN,KAAKvE,KAAK4E,EAAWrO,KAAKC,UAAUM,KAAK4N,WAOhDhF,UANU,SAACxH,GAiBR,OAVIrB,EANKD,OAAOmB,QAOZuJ,EANczK,EAAK2N,MAAMjD,MAOpB1K,EANK6N,SAASvL,sBAAuBtC,EAAKgO,iBAAiB3M,EAASG,SAAS1C,KAAK,KAOnFkB,EANK6N,SAASxL,KAOdrC,EANK6N,SAAS/K,cAQlB2H,EANYA,YAAYhG,UAOnBzE,EANK6N,SAASvL,sBAAuBtC,EAAKgO,iBAAiB3M,EAASG,SAAS1C,KAAK,KAGpFkB,EAAKD,OAAOmB,QAAUuJ,EAAYW,cAAcpL,EAAK6N,SAAStL,aAAekI,EAAYgC,cAQnG5D,UANU,SAACxH,GAOR,IANI4M,EAAwBtF,EAAQsF,iBAUpC,MATgC,mBAArBA,IAOPA,EANmBjO,EAAKiO,iBAAiBC,KAAKlO,IAE3CiO,EAAiB5M,EAAUuM,MAI7CH,EAALrP,UAAA6P,iBAAK,SAAAE,EAAAP,GAWG,IAVIQ,EAAO3Q,KAAWwC,KAAK4N,SAAUM,EAAWP,GAC5CS,EAAsBpO,KAAKF,OAAOvB,QAAUD,EAAQ0B,KAAKF,OAAOvB,QAASyB,KAAK4N,SAASpP,KAAOwB,KAAK4N,SAASpP,IAWhH,OAVOwB,KAAK4N,SAASjO,OACfK,KAAKyN,KAAKhF,QAAQ2F,GAWhB5O,KAVMC,KAAKC,UAAUyO,GAWrBlO,gBAViBD,KAAKF,OAAOG,gBAW7BN,OAVQK,KAAK4N,SAASjO,SAExBK,KAAKyN,KAAKvE,KAAKkF,EAAqBD,GAAMlO,gBAAkBD,KAAKF,OAAOG,mBAGjFuN,EAALrP,UAAA4P,iBAAK,SAAA5D,GAKH,OAJapM,OAAOmG,KAAKiG,GAAK/F,IAAI,SAAClG,GAczB,OAbOkF,mBAAmBlF,GAAO,IAAMkF,mBAAmB+G,EAAIjM,MAC/DW,KAAK,QAhEhB,GAKmB2O,EAAnBK,MAHQrP,IAIK,KAHL4D,KAIM,KAHNS,aAIc,KAHdP,YAIa,KAHbD,sBAIuB,MAwDxBmL,EAAP9I,aACEC,KAAMC,EAAAA,aAGP4I,EAAD3I,eAAC,WAAA,QAgBAF,KAAM0D,IACN1D,KAAM4F,IACN5F,KAAM9E,KCtFP,IAAAwO,EAAA,WAOA,SAAAA,EAHwBZ,EACAa,EACAC,EACAzO,GAHAE,KAAxByN,KAAwBA,EACAzN,KAAxBsO,SAAwBA,EACAtO,KAAxBuO,OAAwBA,EACAvO,KAAxBF,OAAwBA,SAUxBuO,EAAAlQ,UAAAqQ,aAAA,SATKpM,EAAAuL,EAAAc,GASL,IAAA1O,EAAAC,KAGQ,OAVqH,QAA1CA,KAAKF,OAAOoC,UAAUE,GAAMQ,UAAsB5C,KAAKsO,SAASvJ,IAAIyI,GAAiBiB,GAChJhE,KAAKzK,KAAKF,OAAOoC,UAAUE,GAAOuL,OAU7C5D,MATG,SAAC3I,GAaGrB,EATKD,OAAOoC,UAAUE,GAAM5D,KAU5BuB,EATKwO,OAAOnH,SAAShG,MAkBzCiN,EAAAlQ,UAAAuQ,OAAA,SAdKrK,EAAA9E,GAgBG,IAdIf,GAaJe,EAdOA,OACQf,IAAMe,EAAKf,IAAMF,EAAQ0B,KAAKF,OAAOvB,QAASyB,KAAKF,OAAOO,WAkBzE,OAHAd,EAdKC,KAAOC,KAAKC,WAAY2E,SAAUA,KAAe9E,EAAKC,KAKjED,EAJWI,OAASJ,EAAKI,QAAU,OAEtBK,KAAKyN,KAAKhF,QAAQjK,EAAKe,MA3BtC,GA6BO8O,EAAP3J,aACEC,KAAMC,EAAAA,aAGPyJ,EAADxJ,eAAC,WAAA,QAiBAF,KAAM0D,IACN1D,KAAMgK,EAAAA,WACNhK,KAAMgC,IACNhC,KAAM9E,KCtDP,IAAA+O,EAAA,WAiBA,SAAAA,EAAwBnB,EACAC,EACA9G,EACA9G,GAHAE,KAAxByN,KAAwBA,EACAzN,KAAxB0N,MAAwBA,EACA1N,KAAxB4G,QAAwBA,EACA5G,KAAxBF,OAAwBA,SAOxB8O,EAAAzQ,UAAAsM,KAAA,SAJK/B,EAAAiF,GAIL,IAAA5N,EAAAC,KACQA,KAJK4N,SAAWzO,EAAMuJ,EAASkG,EAAcf,MAM7C,IAJIrP,EAEEqQ,EAAY7O,KAAK4N,SAASxL,KAAO,SACjCe,EAAQnD,KAAK4N,SAASzK,MACtBsE,EAAM,IAAIpB,KAAKA,KAAKC,MAAQ,MAAgBC,cAuBlD,MAtBqB,iBAAVpD,EAKPnD,KAJK4G,QAAQ5B,IAAI6J,EAAW1L,EAAOsE,GACX,mBAAVtE,GAKdnD,KAJK4G,QAAQ5B,IAAI6J,EAAW1L,IAASsE,GAOzCjJ,GAJMwB,KAAM4N,SAASvL,sBAAuBrC,KAAK+N,oBAAoBlP,KAAK,MAMtEmB,KAJKF,OAAOmB,QACAjB,KAAK0N,MAKZjD,KAJKjM,EAAKwB,KAAK4N,SAASxL,KAAMpC,KAAK4N,SAAS/K,cAK5CsI,cAJcnL,KAAK4N,SAAStL,aAErBtC,KAAK0N,MAKZjD,KAJKjM,EAAKwB,KAAK4N,SAASxL,KAAMpC,KAAK4N,SAAS/K,cAK5C2J,aAIJ5D,UAJU,SAACsF,GASR,GAJmC,UAI/BnO,EAJK6N,SAASkB,eAA4B/O,EAAM6N,SAASpP,IAKzD,OAJOuJ,EAAAA,WAAWsE,GAAG6B,GAOzB,GAAIA,EAJU/K,OAAS+K,EAAU/K,QAAUpD,EAAK6G,QAAQ7B,IAAI8J,GAKxD,KAJM,yBAMV,IAJIb,EAAwBtF,EAAQsF,iBAQpC,MAPgC,mBAArBA,IAKPA,EAJmBjO,EAAKiO,iBAAiBC,KAAKlO,IAE3CiO,EAAiBE,EAAWP,MAI9CiB,EAALzQ,UAAA6P,iBAAK,SAAAE,EAAAP,GASG,IARIQ,EAAY3Q,KAAWwC,KAAK4N,SAAUM,EAAWP,GAEjDS,EAAsBpO,KAAKF,OAAOvB,QAAUD,EAAQ0B,KAAKF,OAAOvB,QAASyB,KAAK4N,SAASpP,KAAOwB,KAAK4N,SAASpP,IAUhH,OAROwB,KAAK4N,SAASjO,OACfK,KAAKyN,KAAKhF,QAAQ2F,GAShB5O,KARMC,KAAKC,UAAUyO,GASrBlO,gBARiBD,KAAKF,OAAOG,gBAS7BN,OARQK,KAAK4N,SAASjO,SAExBK,KAAKyN,KAAKvE,KAAKkF,EAAqB3O,KAAKC,UAAUyO,IAAOlO,gBAAkBD,KAAKF,OAAOG,mBAGjG2O,EAALzQ,UAAA4P,iBAAK,WAAA,IAALhO,EAAAC,KACY+O,KAyCJ,OAxCgB,mBAAqB,oBAAqB,qBAEhD5K,QAAQ,SAAC6K,GAWXjP,EAVK6N,SAASoB,IACHjP,EAAK6N,SAASoB,GAAS7K,QAAQ,SAAC8K,GAWvC,IAVIC,ETzBxB,SAdC9M,GAeG,OAdOA,EAAKzD,QAAQ,kBAAmB,SAAAwQ,EAAYC,EAAWC,EAAQC,GAelE,OAdOA,EAASD,EAAOE,cAAgBF,ISqCPG,CAAUP,GAC1BQ,EAAiD,mBAA7B1P,EAAK6N,SAASqB,GAWlClP,EAVK6N,SAASqB,KAWdlP,EAVK6N,SAASsB,GAYlB,GAVkB,UAUdD,EAVuB,CAWvB,IAVIJ,EAAY9O,EAAK6N,SAASxL,KAAO,SAWrCqN,EAVarM,mBAAmBrD,EAAK6G,QAAQ7B,IAAI8J,IAGnC,UAUdI,GAVyBS,MAAMC,QAAQF,KAWvCA,EAVaA,EAAW5Q,KAAKkB,EAAK6N,SAASlL,gBAYvC3C,EAVK6N,SAAS1K,cAWduM,GAVa1P,EAAM6N,SAAS1K,YAAauM,GAAY5Q,KAAKkB,EAAK6N,SAASlL,kBAIjE,sBAUXsM,QAVwD,IAAfS,GAWzCV,EAVca,MAAMX,EAAWQ,QAMxCV,EAAc3K,IAAI,SAACyL,GAWtB,OAVOA,EAAKhR,KAAK,OAClBA,KAAK,QAtHhB,GAKmB+P,EAAnBf,MAHQiC,kBAIkB,gBAAkB,YAAa,gBAHjDhB,aAIc,OAHdiB,gBACIC,KAIM,OAHNC,SAIU,WAHV3N,YAIa,gBA6GlBsM,EAAPlK,aACEC,KAAMC,EAAAA,aAGPgK,EAAD/J,eAAC,WAAA,QAaAF,KAAM0D,IACN1D,KAAM4F,IACN5F,KAAMG,IACNH,KAAM9E,KRlIP,IAAAqQ,EAAA,WAMA,SAAAA,EAJwBzC,EACAc,EACAzO,GAFAE,KAAxByN,KAAwBA,EACAzN,KAAxBuO,OAAwBA,EACAvO,KAAxBF,OAAwBA,SAUxBoQ,EAAA/R,UAAAgS,MAAA,SARK9Q,EAAAE,GAQL,IAAAQ,EAAAC,KAPcoQ,EAAWhR,EAAYC,EAAME,GAC7Bf,EAAM4R,EAAS5R,IAAM4R,EAAS5R,IAAMF,EAAQ0B,KAAKF,OAAOvB,QAASyB,KAAKF,OAAOK,UAUnF,OAROH,KAAKyN,KAAKhF,QAAQjK,EAAK4R,GASzBrG,MARG,SAAC3I,GAAuB,OAAArB,EAAKwO,OAAOnH,SAAShG,MAe7D8O,EAAA/R,UAAAkS,OAAA,SAZKhR,EAAAE,GAaG,IAZM6Q,EAAWhR,EAAYC,EAAME,GAC7Bf,EAAM4R,EAAS5R,IAAM4R,EAAS5R,IAAMF,EAAQ0B,KAAKF,OAAOvB,QAASyB,KAAKF,OAAOM,WAcnF,OAZOJ,KAAKyN,KAAKhF,QAAQjK,EAAKY,EAAYC,EAAM+Q,OAlBxD,GAoBOF,EAAPxL,aACEC,KAAMC,EAAAA,aAGPsL,EAADrL,eAAC,WAAA,QAeAF,KAAM0D,IACN1D,KAAMgC,IACNhC,KAAM9E,KStDP,IAAAyQ,EAAA,WAMA,SAAAA,EAFwB/B,EACAgC,EACA9B,GAFAzO,KAAxBuO,OAAwBA,EACAvO,KAAxBuQ,MAAwBA,EACAvQ,KAAxByO,MAAwBA,SASxB6B,EAAAnS,UAAAgS,MAAA,SANK9Q,EAAAE,GAOG,OANOS,KAAKuQ,MAAMJ,MAAM9Q,EAAME,IAatC+Q,EAAAnS,UAAAkS,OAAA,SAVKhR,EAAAE,GAWG,OAVOS,KAAKuQ,MAAMF,OAAOhR,EAAME,IAevC+Q,EAAAnS,UAAA2J,OAAA,WACQ,OAZO9H,KAAKuO,OAAOzG,UAoB3BwI,EAAAnS,UAAAqQ,aAAA,SAjBKpM,EAAAuL,EAAAc,GAkBG,OAjBOzO,KAAKyO,MAAMD,aAAapM,EAAMuL,EAAUc,IAwBvD6B,EAAAnS,UAAAqS,KAAA,SArBKpO,EAAAuL,GAsBG,OArBO3N,KAAKyO,MAAMD,aAAapM,EAAMuL,IA4B7C2C,EAAAnS,UAAAuQ,OAAA,SAzBKrK,EAAA9E,GA0BG,OAzBOS,KAAKyO,MAAMC,OAAOrK,EAAU9E,IA8B3C+Q,EAAAnS,UAAAqJ,gBAAA,WACQ,OA3BOxH,KAAKuO,OAAO/G,mBAgC3B8I,EAAAnS,UAAA0I,SAAA,WACQ,OA7BO7G,KAAKuO,OAAO1H,YAmC3ByJ,EAAAnS,UAAAiJ,SAAA,SAhCKpF,GAiCGhC,KAhCKuO,OAAOnH,SAASpF,IAqC7BsO,EAAAnS,UAAAoJ,YAAA,WACQvH,KAlCKuO,OAAOhH,eAuCpB+I,EAAAnS,UAAA2I,WAAA,WACQ,OApCO9G,KAAKuO,OAAOzH,cA0C3BwJ,EAAAnS,UAAAiK,eAAA,SAvCKzD,GAwCG3E,KAvCKuO,OAAOnG,eAAezD,IA4CnC2L,EAAAnS,UAAAmJ,kBAAA,WACQ,OAzCOtH,KAAKuO,OAAOjH,uBA1D3B,GA4DOgJ,EAAP5L,aACEC,KAAMC,EAAAA,aAGP0L,EAADzL,eAAC,WAAA,QA4CAF,KAAMgC,IACNhC,KAAMuL,IACNvL,KAAM0J,KCnHP,IAAAoC,EAAA,WAAA,SAAAA,YAcKA,EAALC,sBAIA,SAJK5Q,EAAA6Q,GAKG,OACIC,SAJUH,EAKVvO,YACK2O,QAJSjR,EAAckR,SAAUhR,IAKjC+Q,QAJShR,EAAeiR,SAAUjR,EAAekR,MAAMnR,KAKvDiR,QAJS/L,EAAgBgM,SAAU1L,EAAuB2L,MAAMlR,KAKhEgR,QAJSlK,EAAemK,SAAWnK,EAAeoK,MAAMjM,EAAiBjF,IAK1E8Q,GACCE,QAJSxC,EAAcyC,SAAWzC,EAAc0C,MAAM1I,EAAUsG,EAAAA,SAAUhI,EAAe9G,KAKzFgR,QAJStG,EAAcuG,SAAWvG,EAAcwG,MAAMlR,KAKtDgR,QAJSrD,EAAesD,SAAWtD,EAAeuD,MAAM1I,EAAUkC,EAAc1K,KAKhFgR,QAJSjC,EAAekC,SAAWlC,EAAemC,MAAM1I,EAAUkC,EAAczF,EAAgBjF,KAKhGgR,QAJSX,EAAcY,SAAWZ,EAAca,MAAM1I,EAAU1B,EAAe9G,KAK/EgR,QAJSP,EAAaQ,SAAWR,EAAaS,MAAMpK,EAAgBuJ,EAAc7B,OAI9FoC,EAALO,QAOA,SAPKlR,GAQG,OACI8Q,SAPUH,EAQVvO,YACK2O,QAPSjR,EAAckR,SAAUhR,IAQjC+Q,QAPShR,EAAeiR,SAAUjR,EAAekR,MAAMnR,KAQvDiR,QAPS/L,EAAgBgM,SAAU1L,EAAuB2L,MAAMlR,KAQhEgR,QAPSlK,EAAemK,SAAWnK,EAAeoK,MAAMjM,EAAiBjF,KAQzEgR,QAPSxI,EAASyI,SAAUzI,EAAS0I,MAAMzG,EAAAA,KAAO3D,EAAe9G,KAQjEgR,QAPSxC,EAAcyC,SAAWzC,EAAc0C,MAAM1I,EAAUsG,EAAAA,SAAUhI,EAAe9G,KAQzFgR,QAPStG,EAAcuG,SAAWvG,EAAcwG,MAAMlR,KAQtDgR,QAPSrD,EAAesD,SAAWtD,EAAeuD,MAAM1I,EAAUkC,EAAc1K,KAQhFgR,QAPSjC,EAAekC,SAAWlC,EAAemC,MAAM1I,EAAUkC,EAAczF,EAAgBjF,KAQhGgR,QAPSX,EAAcY,SAAWZ,EAAca,MAAM1I,EAAU1B,EAAe9G,KAQ/EgR,QAPSP,EAAaQ,SAAWR,EAAaS,MAAMpK,EAAgBuJ,EAAc7B,SA9CnG,GAiDOoC,EAAP/L,aACEC,KAAMsM,EAAAA,SAAUC,OAQdC,SAPSC,EAAAA,gBAIZX,EAAD5L,eAAC,WAAA"}

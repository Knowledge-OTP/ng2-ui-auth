{"version":3,"file":null,"sources":["../src/utils.ts","../src/local.ts","../src/auth.ts","../src/config.ts","../src/storage.ts","../src/shared.ts","../src/jwtHttp.ts","../src/popup.ts","../src/oauth2.ts","../src/oauth1.ts","../src/oauth.ts"],"sourcesContent":["/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\nexport function assign(target: any, ...src: any[]): any {\r\n    if (target == null) {\r\n        throw new TypeError('Cannot convert undefined or null to object');\r\n    }\r\n\r\n    target = Object(target);\r\n    for (var index = 1; index < arguments.length; index++) {\r\n        var source = arguments[index];\r\n        if (source != null) {\r\n            for (var key in source) {\r\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n                    target[key] = source[key];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function joinUrl(baseUrl: string, url: string) {\r\n    if (/^(?:[a-z]+:)?\\/\\//i.test(url)) {\r\n        return url;\r\n    }\r\n\r\n    let joined = [baseUrl, url].join('/');\r\n\r\n    let normalize = function(str) {\r\n        return str\r\n            .replace(/[\\/]+/g, '/')\r\n            .replace(/\\/\\?/g, '?')\r\n            .replace(/\\/\\#/g, '#')\r\n            .replace(/\\:\\//g, '://');\r\n    };\r\n\r\n    return normalize(joined);\r\n}\r\n\r\nexport function merge(obj1, obj2) {\r\n    let result = {};\r\n    for (var i in obj1) {\r\n        if (obj1.hasOwnProperty(i)) {\r\n            if ((i in obj2) && (typeof obj1[i] === 'object') && (i !== null)) {\r\n                result[i] = merge(obj1[i], obj2[i]);\r\n            } else {\r\n                result[i] = obj1[i];\r\n            }\r\n        }\r\n    }\r\n    for (i in obj2) {\r\n        if (obj2.hasOwnProperty(i)) {\r\n            if (i in result) {\r\n                continue;\r\n            }\r\n            result[i] = obj2[i];\r\n        }\r\n\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function camelCase(name) {\r\n    return name.replace(/([\\:\\-\\_]+(.))/g, function(_, separator, letter, offset) {\r\n        return offset ? letter.toUpperCase() : letter;\r\n    });\r\n}","import {Injectable} from '@angular/core';\r\nimport {Shared} from './shared';\r\nimport {Config} from './config';\r\nimport {RequestOptionsArgs, Response} from '@angular/http';\r\nimport {joinUrl} from './utils';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/do';\r\nimport {JwtHttp} from './jwtHttp';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\nfunction getFullOpts(user: string | Object, userOpts?: RequestOptionsArgs) {\r\n    const opts = userOpts || {};\r\n    if (user) {\r\n        opts.body = typeof user === 'string' ? user : JSON.stringify(user);\r\n    }\r\n    opts.method = opts.method || 'POST';\r\n    return opts;\r\n}\r\n\r\n@Injectable()\r\nexport class Local {\r\n    constructor(private http: JwtHttp,\r\n                private shared: Shared,\r\n                private config: Config) {}\r\n\r\n    login(user: string | Object, opts?: RequestOptionsArgs): Observable<Response> {\r\n        const fullOpts = getFullOpts(user, opts);\r\n        const url = fullOpts.url ? fullOpts.url : joinUrl(this.config.baseUrl, this.config.loginUrl);\r\n\r\n        return this.http.request(url, fullOpts)\r\n            .do((response: Response) => this.shared.setToken(response));\r\n    }\r\n\r\n    signup(user: string | Object, opts?: RequestOptionsArgs): Observable<Response> {\r\n        const fullOpts = getFullOpts(user, opts);\r\n        const url = fullOpts.url ? fullOpts.url : joinUrl(this.config.baseUrl, this.config.signupUrl);\r\n\r\n        return this.http.request(url, getFullOpts(user, fullOpts));\r\n    }\r\n}","import {Injectable, Injector} from '@angular/core';\r\nimport {Response, RequestOptionsArgs, XHRBackend, RequestOptions} from '@angular/http';\r\nimport {Shared} from './shared';\r\nimport {Local} from './local';\r\nimport {Oauth} from './oauth';\r\nimport {Popup} from './popup';\r\nimport {Oauth2} from './oauth2';\r\nimport {Oauth1} from './oauth1';\r\nimport {Storage} from './storage';\r\nimport {ICustomConfig, Config} from './config';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {JwtHttp} from './jwtHttp';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\nexport function NG2_UI_AUTH_PROVIDERS(config: ICustomConfig): Array<any> {\r\n    return [{provide: Config, useFactory: () => { return new Config(config);}},\r\n            {provide: Storage, useFactory: (providedConfig) => { return new Storage(providedConfig);}, deps: [Config]},\r\n            {provide: Shared,  useFactory: (storage, providedConfig) => { return new Shared(storage, providedConfig);}, deps: [Storage, Config]},\r\n            {provide: JwtHttp, useFactory: (xhrBackend, requestOptions, shared, config, router) => new JwtHttp(xhrBackend, requestOptions, shared, config), deps: [XHRBackend, RequestOptions, Shared, Config]},\r\n            {provide: Oauth,  useFactory: (http, injector, shared, providedConfig) => { return new Oauth(http, injector, shared, providedConfig);}, deps: [JwtHttp, Injector, Shared, Config]} ,\r\n            {provide: Popup,  useFactory: (providedConfig) => { return new Popup(providedConfig);}, deps: [Config]},\r\n            {provide: Oauth1,  useFactory: (http, popup, providedConfig) => { return new Oauth1(http, popup, providedConfig);}, deps: [JwtHttp, Popup, Config]} ,\r\n            {provide: Oauth2,  useFactory: (http, popup, storage, providedConfig) => { return new Oauth2(http, popup, storage, providedConfig);}, deps: [JwtHttp, Popup, Storage, Config]} ,\r\n            {provide: Local,  useFactory: (http, shared, providedConfig) => { return new Local(http, shared, providedConfig);}, deps: [JwtHttp, Shared, Config]} ,\r\n            {provide: Auth,  useFactory: (shared, local, oauth) => { return new Auth(shared, local, oauth);}, deps: [Shared, Local, Oauth]} ,\r\n        ];\r\n}\r\n\r\n@Injectable()\r\nexport class Auth {\r\n    constructor(private shared: Shared,\r\n                private local: Local,\r\n                private oauth: Oauth) {}\r\n    login(user, opts?: RequestOptionsArgs): Observable<Response> {\r\n        return this.local.login(user, opts);\r\n    }\r\n    signup(user, opts?: RequestOptionsArgs): Observable<Response>  {\r\n        return this.local.signup(user, opts);\r\n    }\r\n    logout(): Observable<void> {\r\n        return this.shared.logout();\r\n    }\r\n    authenticate(name: string, userData?: any): Observable<Response> {\r\n        return this.oauth.authenticate(name, userData);\r\n    }\r\n    link(name: string, userData?: any): Observable<Response> {\r\n        return this.oauth.authenticate(name, userData);\r\n    }\r\n    unlink(provider: string, opts: RequestOptionsArgs): Observable<Response> {\r\n        return this.oauth.unlink(provider, opts);\r\n    }\r\n    isAuthenticated(): boolean {\r\n        return this.shared.isAuthenticated();\r\n    }\r\n    getToken(): string {\r\n        return this.shared.getToken();\r\n    }\r\n    setToken(token: string): void {\r\n        this.shared.setToken(token);\r\n    }\r\n    removeToken(): void {\r\n        this.shared.removeToken();\r\n    }\r\n    getPayload(): any {\r\n        return this.shared.getPayload();\r\n    }\r\n    setStorageType(type: string): void {\r\n        this.shared.setStorageType(type);\r\n    }\r\n    getExpirationDate(): Date {\r\n        return this.shared.getExpirationDate();\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\nexport interface IPopupOptions {\r\n    width?: number;\r\n    height?: number;\r\n    left?: number;\r\n    top?: number;\r\n}\r\n\r\nexport interface IOauth1Options {\r\n    url?: string;\r\n    name?: string;\r\n    popupOptions?: IPopupOptions;\r\n    redirectUri?: string;\r\n    authorizationEndpoint?: string;\r\n    type?: string;\r\n}\r\n\r\nexport interface IOauth2Options extends IOauth1Options {\r\n    state?: string| (() => string);\r\n    defaultUrlParams?: string[];\r\n    responseType?: string;\r\n    responseParams?: {\r\n        code?: string;\r\n        clientId?: string;\r\n        redirectUri?: string;\r\n    };\r\n    clientId?: string;\r\n    scopeDelimiter?: string;\r\n    scopePrefix?: string;\r\n\r\n    requiredUrlParams?: string[];\r\n    optionalUrlParams?: string[];\r\n    scope?: string[];\r\n    display?: string;\r\n}\r\n\r\nexport interface IProviders {\r\n    [provider: string]: IOauth2Options;\r\n}\r\n\r\nexport interface ICustomConfig {\r\n    tokenRoot?: string;\r\n    cordova?: boolean;\r\n    baseUrl?: string;\r\n    loginUrl?: string;\r\n    signupUrl?: string;\r\n    unlinkUrl?: string;\r\n    tokenName?: string;\r\n    tokenSeparator?: string;\r\n    tokenPrefix?: string;\r\n    authToken?: string;\r\n    authHeader?: string;\r\n    storageType?: string;\r\n    providers?: IProviders;\r\n    defaultHeaders?: { [name: string]: string };\r\n    withCredentials?: boolean;\r\n    autoRefreshToken?: boolean;\r\n    refreshUrl?: string;\r\n}\r\n\r\n@Injectable()\r\nexport class Config implements ICustomConfig {\r\n    constructor(config?: ICustomConfig) {\r\n        Object.keys(config).forEach((key) => {\r\n            if (key !== 'providers') {\r\n                this[key] = config[key];\r\n            } else {\r\n                Object.keys(config[key]).forEach((provider) => {\r\n                    if (typeof this.providers[provider] === 'undefined') {\r\n                        this.providers[provider] = config.providers[provider];\r\n                    } else {\r\n                        Object.keys(config.providers[provider]).forEach((prop) => {\r\n                            this.providers[provider][prop] = config.providers[provider][prop];\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n    withCredentials = false;\r\n    tokenRoot = null;\r\n    cordova = false;\r\n    baseUrl = '/';\r\n    loginUrl = '/auth/login';\r\n    signupUrl = '/auth/signup';\r\n    unlinkUrl = '/auth/unlink/';\r\n    refreshUrl = '/auth/refresh';\r\n    tokenName = 'token';\r\n    tokenSeparator = '_';\r\n    tokenPrefix = 'ng2-ui-auth';\r\n    authHeader = 'Authorization';\r\n    authToken = 'Bearer';\r\n    storageType = 'localStorage';\r\n    defaultHeaders = null;\r\n    autoRefreshToken = false;\r\n    providers: IProviders = {\r\n        facebook: {\r\n            name: 'facebook',\r\n            url: '/auth/facebook',\r\n            authorizationEndpoint: 'https://www.facebook.com/v2.5/dialog/oauth',\r\n            redirectUri: window.location.origin + '/',\r\n            requiredUrlParams: ['display', 'scope'],\r\n            scope: ['email'],\r\n            scopeDelimiter: ',',\r\n            display: 'popup',\r\n            type: '2.0',\r\n            popupOptions: {width: 580, height: 400}\r\n        },\r\n        google: {\r\n            name: 'google',\r\n            url: '/auth/google',\r\n            authorizationEndpoint: 'https://accounts.google.com/o/oauth2/auth',\r\n            redirectUri: window.location.origin,\r\n            requiredUrlParams: ['scope'],\r\n            optionalUrlParams: ['display', 'state'],\r\n            state: 'STATE',\r\n            scope: ['profile', 'email'],\r\n            scopePrefix: 'openid',\r\n            scopeDelimiter: ' ',\r\n            display: 'popup',\r\n            type: '2.0',\r\n            popupOptions: {width: 452, height: 633}\r\n        },\r\n        github: {\r\n            name: 'github',\r\n            url: '/auth/github',\r\n            authorizationEndpoint: 'https://github.com/login/oauth/authorize',\r\n            redirectUri: window.location.origin,\r\n            optionalUrlParams: ['scope'],\r\n            scope: ['user:email'],\r\n            scopeDelimiter: ' ',\r\n            type: '2.0',\r\n            popupOptions: {width: 1020, height: 618}\r\n        },\r\n        instagram: {\r\n            name: 'instagram',\r\n            url: '/auth/instagram',\r\n            authorizationEndpoint: 'https://api.instagram.com/oauth/authorize',\r\n            redirectUri: window.location.origin,\r\n            requiredUrlParams: ['scope'],\r\n            scope: ['basic'],\r\n            scopeDelimiter: '+',\r\n            type: '2.0'\r\n        },\r\n        linkedin: {\r\n            name: 'linkedin',\r\n            url: '/auth/linkedin',\r\n            authorizationEndpoint: 'https://www.linkedin.com/uas/oauth2/authorization',\r\n            redirectUri: window.location.origin,\r\n            requiredUrlParams: ['state'],\r\n            scope: ['r_emailaddress'],\r\n            scopeDelimiter: ' ',\r\n            state: 'STATE',\r\n            type: '2.0',\r\n            popupOptions: {width: 527, height: 582}\r\n        },\r\n        twitter: {\r\n            name: 'twitter',\r\n            url: '/auth/twitter',\r\n            authorizationEndpoint: 'https://api.twitter.com/oauth/authenticate',\r\n            redirectUri: window.location.origin,\r\n            type: '1.0',\r\n            popupOptions: {width: 495, height: 645}\r\n        },\r\n        twitch: {\r\n            name: 'twitch',\r\n            url: '/auth/twitch',\r\n            authorizationEndpoint: 'https://api.twitch.tv/kraken/oauth2/authorize',\r\n            redirectUri: window.location.origin,\r\n            requiredUrlParams: ['scope'],\r\n            scope: ['user_read'],\r\n            scopeDelimiter: ' ',\r\n            display: 'popup',\r\n            type: '2.0',\r\n            popupOptions: {width: 500, height: 560}\r\n        },\r\n        live: {\r\n            name: 'live',\r\n            url: '/auth/live',\r\n            authorizationEndpoint: 'https://login.live.com/oauth20_authorize.srf',\r\n            redirectUri: window.location.origin,\r\n            requiredUrlParams: ['display', 'scope'],\r\n            scope: ['wl.emails'],\r\n            scopeDelimiter: ' ',\r\n            display: 'popup',\r\n            type: '2.0',\r\n            popupOptions: {width: 500, height: 560}\r\n        },\r\n        yahoo: {\r\n            name: 'yahoo',\r\n            url: '/auth/yahoo',\r\n            authorizationEndpoint: 'https://api.login.yahoo.com/oauth2/request_auth',\r\n            redirectUri: window.location.origin,\r\n            scope: [],\r\n            scopeDelimiter: ',',\r\n            type: '2.0',\r\n            popupOptions: {width: 559, height: 519}\r\n        },\r\n        bitbucket: {\r\n            name: 'bitbucket',\r\n            url: '/auth/bitbucket',\r\n            authorizationEndpoint: 'https://bitbucket.org/site/oauth2/authorize',\r\n            redirectUri: window.location.origin + '/',\r\n            requiredUrlParams: ['scope'],\r\n            scope: ['email'],\r\n            scopeDelimiter: ',',\r\n            type: '2.0',\r\n            popupOptions: {width: 1028, height: 529}\r\n        }\r\n    };\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Config} from './config';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n@Injectable()\r\nexport class Storage {\r\n    private store = {};\r\n    private isStorageAvailable: boolean;\r\n    constructor(private config: Config) {\r\n        this.isStorageAvailable = (() => {\r\n            try {\r\n                let supported = config.storageType in window && window[config.storageType] !== null;\r\n\r\n                if (supported) {\r\n                    let key = Math.random().toString(36).substring(7);\r\n                    (<any>window[this.config.storageType]).setItem(key, '');\r\n                    (<any>window[this.config.storageType]).removeItem(key);\r\n                }\r\n\r\n                return supported;\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        })();\r\n        if (!this.isStorageAvailable) {\r\n            console.warn(config.storageType + ' is not available.');\r\n        }\r\n    }\r\n    get(key: string) {\r\n        return this.isStorageAvailable ? window[this.config.storageType].getItem(key) : this.store[key];\r\n    }\r\n    set(key: string, value: string) {\r\n        return this.isStorageAvailable ? window[this.config.storageType].setItem(key, value) : this.store[key] = value;\r\n    }\r\n    remove(key: string) {\r\n        return this.isStorageAvailable ? window[this.config.storageType].removeItem(key) : delete this.store[key];\r\n    }\r\n}\r\n","/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subscriber} from 'rxjs/Subscriber';\r\nimport {Injectable} from '@angular/core';\r\nimport {Response} from '@angular/http';\r\nimport {Config} from './config';\r\nimport {Storage} from './storage';\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n@Injectable()\r\nexport class Shared {\r\n    tokenName = this.config.tokenPrefix ? [this.config.tokenPrefix, this.config.tokenName].join(this.config.tokenSeparator) : this.config.tokenName;\r\n    constructor(private storage: Storage, private config: Config) {}\r\n    getToken() {\r\n        return this.storage.get(this.tokenName);\r\n    }\r\n    getPayload() {\r\n        let token = this.getToken();\r\n\r\n        if (token && token.split('.').length === 3) {\r\n            try {\r\n                let base64Url = token.split('.')[1];\r\n                let base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n                return JSON.parse(decodeURIComponent(encodeURIComponent(window.atob(base64))));\r\n            } catch (e) {\r\n                return undefined;\r\n            }\r\n        }\r\n    }\r\n    setToken(response: string | Response) {\r\n        if (!response) {\r\n            console.warn('Can\\'t set token without passing a value');\r\n            return;\r\n        }\r\n\r\n        let token: string;\r\n        if (typeof response === 'string') {\r\n            token = response;\r\n        } else {\r\n            let accessToken = response && response.json() && (response.json().access_token || response.json().token);\r\n            let tokenObject: { data: any };\r\n\r\n            if (accessToken) {\r\n                if (typeof accessToken === 'object' && typeof accessToken.data === 'object') {\r\n                    tokenObject = accessToken;\r\n                } else if (typeof accessToken === 'string') {\r\n                    token = accessToken;\r\n                }\r\n            }\r\n\r\n            if (!token && tokenObject) {\r\n                let tokenRootData = this.config.tokenRoot &&\r\n                    this.config.tokenRoot.split('.').reduce(\r\n                        (o, x) => {\r\n                            return o[x];\r\n                        },\r\n                        tokenObject.data);\r\n                token = tokenRootData ? tokenRootData[this.config.tokenName] : tokenObject.data[this.config.tokenName];\r\n            }\r\n\r\n            if (!token) {\r\n                let tokenPath = this.config.tokenRoot ? this.config.tokenRoot + '.' + this.config.tokenName : this.config.tokenName;\r\n                console.warn('Expecting a token named \"' + tokenPath);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.storage.set(this.tokenName, token);\r\n    }\r\n    removeToken() {\r\n        this.storage.remove(this.tokenName);\r\n    }\r\n    isAuthenticated() {\r\n        let token = this.getToken();\r\n\r\n        // a token is present\r\n        if (token) {\r\n            // token with a valid JWT format XXX.YYY.ZZZ\r\n            if (token.split('.').length === 3) {\r\n                // could be a valid JWT or an access token with the same format\r\n                try {\r\n                    let base64Url = token.split('.')[1];\r\n                    let base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n                    let exp = JSON.parse(window.atob(base64)).exp;\r\n                    // jwt with an optional expiration claims\r\n                    if (exp) {\r\n                        let isExpired = Math.round(new Date().getTime() / 1000) >= exp;\r\n                        if (isExpired) {\r\n                            // fail: Expired token\r\n                            this.storage.remove(this.tokenName);\r\n                            return false;\r\n                        } else {\r\n                            // pass: Non-expired token\r\n                            return true;\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    // pass: Non-JWT token that looks like JWT\r\n                    return true;\r\n                }\r\n            }\r\n            // pass: All other tokens\r\n            return true;\r\n        }\r\n        // lail: No token at all\r\n        return false;\r\n    }\r\n    getExpirationDate() {\r\n        let payload = this.getPayload();\r\n        if (payload.exp && Math.round(new Date().getTime() / 1000) < payload.exp) {\r\n            let date = new Date(0);\r\n            date.setUTCSeconds(payload.exp);\r\n            return date;\r\n        }\r\n        return null;\r\n    }\r\n    logout(): Observable<any> {\r\n        this.storage.remove(this.tokenName);\r\n        return Observable.create((observer: Subscriber<any>) => {\r\n            observer.next();\r\n            observer.complete();\r\n        });\r\n    }\r\n    setStorageType(type) {\r\n        this.config.storageType = type;\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Http, RequestMethod, Response, RequestOptionsArgs, Headers, Request, RequestOptions, ConnectionBackend} from '@angular/http';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/switchMap';\r\nimport {Config} from './config';\r\nimport {Shared} from './shared';\r\n/**\r\n * Created by Ron on 06/01/2016.\r\n */\r\n\r\nexport interface JwtRequestOptionsArgs extends RequestOptionsArgs {\r\n    autoRefreshToken?: boolean\r\n}\r\n\r\n@Injectable()\r\nexport class JwtHttp extends Http {\r\n    constructor(_backend: ConnectionBackend,\r\n                _defaultOptions: RequestOptions,\r\n                private _shared: Shared,\r\n                private _config: Config) {\r\n        super(_backend, _defaultOptions);\r\n    }\r\n\r\n    request(url: string | Request, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        //if the token is expired the \"getExpirationDate\" function returns null\r\n        if (this._shared.getToken() && !this._shared.getExpirationDate() &&\r\n            options.autoRefreshToken ||\r\n            typeof options.autoRefreshToken === 'undefined' && this._config.autoRefreshToken) {\r\n            return this.refreshToken()\r\n                .switchMap(() => this.actualRequest(url, options));\r\n        }\r\n        return this.actualRequest(url, options);\r\n    }\r\n\r\n    get(url: string, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Get;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    post(url: string, body: string, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Post;\r\n        options.body = body;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    put(url: string, body: string, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Put;\r\n        options.body = body;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    delete(url: string, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Delete;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    patch(url: string, body: string, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Patch;\r\n        options.body = body;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    head(url: string, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Head;\r\n        return this.request(url, options);\r\n    }\r\n\r\n\r\n    refreshToken(): Observable<Response> {\r\n        const authHeader = new Headers();\r\n        authHeader.append(this._config.authHeader, (this._config.authToken + ' ' + this._shared.getToken()));\r\n        return super\r\n            .get(this._config.refreshUrl, {\r\n                headers: authHeader\r\n            })\r\n            .do((res: Response) => this._shared.setToken(res));\r\n    }\r\n\r\n    private actualRequest(url: string | Request, options?: JwtRequestOptionsArgs) {\r\n        if (url instanceof Request) {\r\n            url.headers = url.headers || new Headers();\r\n            this.setHeaders(url);\r\n        } else {\r\n            options = options || {};\r\n            this.setHeaders(options);\r\n        }\r\n        return super.request(url, options);\r\n    }\r\n\r\n    private setHeaders(obj: { headers?: Headers, [index: string]: any }) {\r\n        obj.headers = obj.headers || new Headers();\r\n        if (this._config.defaultHeaders) {\r\n            Object.keys(this._config.defaultHeaders).forEach((defaultHeader) => {\r\n                if (!obj.headers.has(defaultHeader)) {\r\n                    obj.headers.set(defaultHeader, this._config.defaultHeaders[defaultHeader]);\r\n                }\r\n            });\r\n        }\r\n        if (this._shared.isAuthenticated()) {\r\n            obj.headers.set(this._config.authHeader, this._config.authToken + ' ' + this._shared.getToken());\r\n        }\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {assign} from './utils';\r\nimport {Config, IPopupOptions} from './config';\r\nimport 'rxjs/add/observable/interval';\r\nimport 'rxjs/add/observable/fromEvent';\r\nimport 'rxjs/add/operator/concatMap';\r\nimport 'rxjs/add/operator/take';\r\nimport 'rxjs/add/operator/takeWhile';\r\n\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n@Injectable()\r\nexport class Popup {\r\n    url = '';\r\n    popupWindow: Window = null;\r\n\r\n    private static prepareOptions(options: IPopupOptions) {\r\n        options = options || {};\r\n        let width = options.width || 500;\r\n        let height = options.height || 500;\r\n        return assign(\r\n            {\r\n                width: width,\r\n                height: height,\r\n                left: window.screenX + ((window.outerWidth - width) / 2),\r\n                top: window.screenY + ((window.outerHeight - height) / 2.5)\r\n            },\r\n            options);\r\n    }\r\n\r\n    private static stringifyOptions(options: Object) {\r\n        return Object.keys(options).map((key) => {\r\n            return key + '=' + options[key];\r\n        }).join(',');\r\n    }\r\n\r\n    private static parseQueryString(joinedKeyValue: string): any {\r\n        let key, value;\r\n        return joinedKeyValue.split('&').reduce(\r\n            (obj, keyValue) => {\r\n                if (keyValue) {\r\n                    value = keyValue.split('=');\r\n                    key = decodeURIComponent(value[0]);\r\n                    obj[key] = typeof value[1] !== 'undefined' ? decodeURIComponent(value[1]) : true;\r\n                }\r\n                return obj;\r\n            },\r\n            {});\r\n    }\r\n\r\n\r\n    constructor(private config: Config) {}\r\n    open(url: string, name: string, options: IPopupOptions) {\r\n        this.url = url;\r\n\r\n        let stringifiedOptions = Popup.stringifyOptions(Popup.prepareOptions(options));\r\n        let UA = window.navigator.userAgent;\r\n        let windowName = (this.config.cordova || UA.indexOf('CriOS') > -1) ? '_blank' : name;\r\n\r\n        this.popupWindow = window.open(url, windowName, stringifiedOptions);\r\n\r\n        window['popup'] = this.popupWindow;\r\n\r\n        if (this.popupWindow && this.popupWindow.focus) {\r\n            this.popupWindow.focus();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    eventListener(redirectUri: string) {\r\n        return Observable\r\n            .fromEvent(this.popupWindow, 'loadstart')\r\n            .concatMap((event: Event & { url: string }) => {\r\n                if (!this.popupWindow || this.popupWindow.closed) {\r\n                    return ['Popup Window Closed'];\r\n                }\r\n                if (event.url.indexOf(redirectUri) !== 0) {\r\n                    return [];\r\n                }\r\n\r\n                let parser = document.createElement('a');\r\n                parser.href = event.url;\r\n\r\n                if (parser.search || parser.hash) {\r\n                    const queryParams = parser.search.substring(1).replace(/\\/$/, '');\r\n                    const hashParams = parser.hash.substring(1).replace(/\\/$/, '');\r\n                    const hash = Popup.parseQueryString(hashParams);\r\n                    const qs = Popup.parseQueryString(queryParams);\r\n                    const allParams = assign({}, qs, hash);\r\n\r\n                    this.popupWindow.close();\r\n\r\n                    if (allParams.error) {\r\n                        throw allParams.error;\r\n                    } else {\r\n                        return <any>[allParams];\r\n                    }\r\n                }\r\n                return [];\r\n            })\r\n            .take(1)\r\n            .takeWhile((response) => response !== 'Popup Window Closed');\r\n    }\r\n\r\n    pollPopup() {\r\n        return Observable\r\n            .interval(50)\r\n            .concatMap(() => {\r\n                if (!this.popupWindow || this.popupWindow.closed) {\r\n                    return ['Popup Window Closed'];\r\n                }\r\n                let documentOrigin = document.location.host;\r\n                let popupWindowOrigin = '';\r\n                try {\r\n                    popupWindowOrigin = this.popupWindow.location.host;\r\n                } catch (error) {\r\n                    // ignore DOMException: Blocked a frame with origin from accessing a cross-origin frame.\r\n                    //error instanceof DOMException && error.name === 'SecurityError'\r\n                }\r\n                if (popupWindowOrigin === documentOrigin && (this.popupWindow.location.search || this.popupWindow.location.hash)) {\r\n                    const queryParams = this.popupWindow.location.search.substring(1).replace(/\\/$/, '');\r\n                    const hashParams = this.popupWindow.location.hash.substring(1).replace(/[\\/$]/, '');\r\n                    const hash = Popup.parseQueryString(hashParams);\r\n                    const qs = Popup.parseQueryString(queryParams);\r\n                    this.popupWindow.close();\r\n                    const allParams = assign({}, qs, hash);\r\n                    if (allParams.error) {\r\n                        throw allParams.error;\r\n                    } else {\r\n                        return [allParams];\r\n                    }\r\n                }\r\n                return [];\r\n            })\r\n            .take(1)\r\n            .takeWhile((response) => response !== 'Popup Window Closed');\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {assign, joinUrl, merge, camelCase} from './utils';\r\nimport {Config, IOauth2Options} from './config';\r\nimport {Popup} from './popup';\r\nimport {Storage} from './storage';\r\nimport 'rxjs/add/operator/concatMap';\r\nimport {JwtHttp} from './jwtHttp';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n\r\n@Injectable()\r\nexport class Oauth2 {\r\n    private static base: IOauth2Options = {\r\n        defaultUrlParams: ['response_type', 'client_id', 'redirect_uri'],\r\n        responseType: 'code',\r\n        responseParams: {\r\n            code: 'code',\r\n            clientId: 'clientId',\r\n            redirectUri: 'redirectUri'\r\n        }\r\n    };\r\n\r\n    private defaults: IOauth2Options;\r\n\r\n    constructor(private http: JwtHttp,\r\n                private popup: Popup,\r\n                private storage: Storage,\r\n                private config: Config) {\r\n    }\r\n\r\n    open(options: IOauth2Options, userData?: any) {\r\n        this.defaults = merge(options, Oauth2.base);\r\n\r\n        let url;\r\n        let openPopup: Observable<any>;\r\n        let stateName = this.defaults.name + '_state';\r\n        let state = this.defaults.state;\r\n        if (typeof state === 'string') {\r\n            this.storage.set(stateName, state);\r\n        } else if (typeof state === 'function') {\r\n            this.storage.set(stateName, state());\r\n        }\r\n\r\n        url = [this.defaults.authorizationEndpoint, this.buildQueryString()].join('?');\r\n\r\n        if (this.config.cordova) {\r\n            openPopup = this.popup\r\n                .open(url, this.defaults.name, this.defaults.popupOptions/*, this.defaults.redirectUri*/)\r\n                .eventListener(this.defaults.redirectUri);\r\n        } else {\r\n            openPopup = this.popup\r\n                .open(url, this.defaults.name, this.defaults.popupOptions/*, this.defaults.redirectUri*/)\r\n                .pollPopup();\r\n        }\r\n\r\n        return openPopup\r\n            .concatMap((oauthData) => {\r\n                // when no server URL provided, return popup params as-is.\r\n                // this is for a scenario when someone wishes to opt out from\r\n                // satellizer's magic by doing authorization code exchange and\r\n                // saving a token manually.\r\n                if (this.defaults.responseType === 'token' || !this.defaults.url) {\r\n                    return oauthData;\r\n                }\r\n\r\n                if (oauthData.state && oauthData.state !== this.storage.get(stateName)) {\r\n                    throw 'OAuth \"state\" mismatch';\r\n                }\r\n\r\n                return this.exchangeForToken(oauthData, userData);\r\n            });\r\n    }\r\n\r\n    private exchangeForToken(oauthData: {code?, state?}, userData?: {}) {\r\n        let data: any = assign({}, this.defaults, oauthData, userData);\r\n\r\n        let exchangeForTokenUrl = this.config.baseUrl ? joinUrl(this.config.baseUrl, this.defaults.url) : this.defaults.url;\r\n\r\n        return this.http.post(exchangeForTokenUrl,  JSON.stringify(data), { withCredentials: this.config.withCredentials });\r\n    }\r\n\r\n    private buildQueryString() {\r\n        let keyValuePairs: string[][] = [];\r\n        let urlParams = ['defaultUrlParams', 'requiredUrlParams', 'optionalUrlParams'];\r\n\r\n        urlParams.forEach((params) => {\r\n            if (this.defaults[params]) {\r\n                (<string[]>this.defaults[params]).forEach((paramName) => {\r\n                    let camelizedName = camelCase(paramName);\r\n                    let paramValue = typeof this.defaults[paramName] === 'function' ?\r\n                        this.defaults[paramName]() :\r\n                        this.defaults[camelizedName];\r\n\r\n                    if (paramName === 'state') {\r\n                        let stateName = this.defaults.name + '_state';\r\n                        paramValue = encodeURIComponent(this.storage.get(stateName));\r\n                    }\r\n\r\n                    if (paramName === 'scope' && Array.isArray(paramValue)) {\r\n                        paramValue = paramValue.join(this.defaults.scopeDelimiter);\r\n\r\n                        if (this.defaults.scopePrefix) {\r\n                            paramValue = [this.defaults.scopePrefix, paramValue].join(this.defaults.scopeDelimiter);\r\n                        }\r\n                    }\r\n\r\n                    keyValuePairs.push([paramName, paramValue]);\r\n                });\r\n            }\r\n        });\r\n\r\n        return keyValuePairs.map(function(pair) {\r\n            return pair.join('=');\r\n        }).join('&');\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Popup} from './popup';\r\nimport {Response} from '@angular/http';\r\nimport {joinUrl, assign} from './utils';\r\nimport {Config, IOauth1Options} from './config';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/concatMap';\r\nimport {JwtHttp} from './jwtHttp';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n\r\n@Injectable()\r\nexport class Oauth1 {\r\n    private static base: IOauth1Options = {\r\n        url: null,\r\n        name: null,\r\n        popupOptions: null,\r\n        redirectUri: null,\r\n        authorizationEndpoint: null\r\n    };\r\n    private defaults: IOauth1Options;\r\n    constructor(private http: JwtHttp, private popup: Popup, private config: Config) {}\r\n    open(options?: IOauth1Options, userData?: any): Observable<Response> {\r\n        this.defaults = assign({}, Oauth1.base, options);\r\n        let popupWindow;\r\n        let serverUrl = this.config.baseUrl ? joinUrl(this.config.baseUrl, this.defaults.url) : this.defaults.url;\r\n\r\n        if (!this.config.cordova) {\r\n            popupWindow = this.popup.open('', this.defaults.name, this.defaults.popupOptions/*, this.defaults.redirectUri*/);\r\n        }\r\n\r\n        return this.http.post(serverUrl, JSON.stringify(this.defaults))\r\n            .concatMap((response: Response) => {\r\n                if (this.config.cordova) {\r\n                    popupWindow = this.popup.open(\r\n                        [this.defaults.authorizationEndpoint, this.buildQueryString(response.json())].join('?'),\r\n                        this.defaults.name,\r\n                        this.defaults.popupOptions);\r\n                } else {\r\n                    popupWindow.popupWindow.location =\r\n                        [this.defaults.authorizationEndpoint, this.buildQueryString(response.json())].join('?');\r\n                }\r\n\r\n                return this.config.cordova ? popupWindow.eventListener(this.defaults.redirectUri) : popupWindow.pollPopup();\r\n            })\r\n            .concatMap((response) => {\r\n                return this.exchangeForToken(response, userData);\r\n            });\r\n    }\r\n    private exchangeForToken(oauthData, userData?: any) {\r\n        let data = assign({}, oauthData, userData);\r\n        let exchangeForTokenUrl = this.config.baseUrl ? joinUrl(this.config.baseUrl, this.defaults.url) : this.defaults.url;\r\n        return this.http.post(exchangeForTokenUrl, data, { withCredentials: this.config.withCredentials });\r\n    }\r\n    private buildQueryString(obj: Object) {\r\n        return Object.keys(obj).map((key) => {\r\n            return encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]);\r\n        }).join('&');\r\n    }\r\n}\r\n","import {Injectable, Injector} from '@angular/core';\r\nimport {Oauth1} from './oauth1';\r\nimport {Oauth2} from './oauth2';\r\nimport {Shared} from './shared';\r\nimport {Response, RequestOptionsArgs} from '@angular/http';\r\nimport {joinUrl} from './utils';\r\nimport {Config} from './config';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/do';\r\nimport {JwtHttp} from './jwtHttp';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n@Injectable()\r\nexport class Oauth {\r\n    constructor(private http: JwtHttp,\r\n                private injector: Injector,\r\n                private shared: Shared,\r\n                private config: Config) {}\r\n    authenticate(name: string, userData?: any): Observable<Response> {\r\n        // var injector = Injector.resolveAndCreate([Oauth1, Oauth2]);\r\n        let provider: Oauth1 | Oauth2 = this.config.providers[name].type === '1.0' ? this.injector.get(Oauth1) : this.injector.get(Oauth2);\r\n        return provider.open(this.config.providers[name], userData || {})\r\n            .do((response: Response) => {\r\n                // this is for a scenario when someone wishes to opt out from\r\n                // satellizer's magic by doing authorization code exchange and\r\n                // saving a token manually.\r\n                if (this.config.providers[name].url) {\r\n                    this.shared.setToken(response);\r\n                }\r\n            });\r\n    }\r\n    unlink(provider: string, opts: RequestOptionsArgs) {\r\n        opts = opts || {};\r\n        let url = opts.url ? opts.url : joinUrl(this.config.baseUrl, this.config.unlinkUrl);\r\n        opts.body = JSON.stringify({ provider: provider }) || opts.body;\r\n        opts.method = opts.method || 'POST';\r\n        \r\n        return this.http.request(url, opts);\r\n    }\r\n}\r\n"],"names":["target","_i","src","TypeError","Object","index","arguments","length","source","key","prototype","hasOwnProperty","call","baseUrl","url","test","joined","join","normalize","str","replace","obj1","obj2","result","i","merge","name","_","separator","letter","offset","toUpperCase","user","userOpts","opts","body","JSON","stringify","method","config","provide","Config","useFactory","Storage","providedConfig","deps","Shared","storage","JwtHttp","xhrBackend","requestOptions","shared","router","XHRBackend","RequestOptions","Oauth","http","injector","Injector","Popup","Oauth1","popup","Oauth2","Local","Auth","local","oauth","this","facebook","authorizationEndpoint","redirectUri","window","location","origin","requiredUrlParams","scope","scopeDelimiter","display","type","popupOptions","width","height","google","optionalUrlParams","state","scopePrefix","github","instagram","linkedin","twitter","twitch","live","yahoo","bitbucket","keys","forEach","_this","provider","providers","prop","Injectable","isStorageAvailable","supported","storageType","Math","random","toString","substring","setItem","removeItem","e","console","warn","getItem","store","value","tokenPrefix","tokenName","tokenSeparator","get","token","getToken","split","base64Url","base64","parse","decodeURIComponent","encodeURIComponent","atob","response","accessToken","json","access_token","tokenObject","data","tokenRootData","tokenRoot","reduce","o","x","tokenPath","set","remove","exp","isExpired","round","Date","getTime","payload","getPayload","date","setUTCSeconds","Observable","create","observer","next","complete","_backend","_defaultOptions","_shared","_config","_super","__extends","options","getExpirationDate","autoRefreshToken","refreshToken","switchMap","actualRequest","RequestMethod","Get","request","Post","Put","Delete","Patch","Head","authHeader","Headers","append","authToken","refreshUrl","headers","do","res","setToken","Request","setHeaders","obj","defaultHeaders","defaultHeader","has","isAuthenticated","Http","fullOpts","getFullOpts","joinUrl","loginUrl","signupUrl","assign","left","screenX","outerWidth","top","screenY","outerHeight","map","joinedKeyValue","keyValue","stringifiedOptions","stringifyOptions","prepareOptions","UA","navigator","userAgent","windowName","cordova","indexOf","popupWindow","open","focus","fromEvent","concatMap","event","closed","parser","document","createElement","href","search","hash","queryParams","hashParams","parseQueryString","qs","allParams","close","error","take","takeWhile","interval","documentOrigin","host","popupWindowOrigin","userData","defaults","base","openPopup","stateName","buildQueryString","eventListener","pollPopup","oauthData","responseType","exchangeForToken","exchangeForTokenUrl","post","withCredentials","keyValuePairs","urlParams","params","paramName","camelizedName","camelCase","paramValue","Array","isArray","push","pair","defaultUrlParams","responseParams","code","clientId","serverUrl","unlinkUrl","login","signup","logout","authenticate","unlink","removeToken","setStorageType"],"mappings":"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"}
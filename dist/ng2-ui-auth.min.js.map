{"version":3,"file":null,"sources":["../src/utils.ts","../src/local.ts","../src/config.ts","../src/storage.ts","../src/shared.ts","../src/popup.ts","../src/oauth2.ts","../src/oauth1.ts","../src/oauth.ts","../src/jwtHttp.ts","../src/auth.ts"],"sourcesContent":["/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\nexport function assign(target: any, ...src: any[]): any {\r\n    if (target == null) {\r\n        throw new TypeError('Cannot convert undefined or null to object');\r\n    }\r\n\r\n    target = Object(target);\r\n    for (var index = 1; index < arguments.length; index++) {\r\n        var source = arguments[index];\r\n        if (source != null) {\r\n            for (var key in source) {\r\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n                    target[key] = source[key];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function joinUrl(baseUrl: string, url: string) {\r\n    if (/^(?:[a-z]+:)?\\/\\//i.test(url)) {\r\n        return url;\r\n    }\r\n\r\n    let joined = [baseUrl, url].join('/');\r\n\r\n    let normalize = function(str) {\r\n        return str\r\n            .replace(/[\\/]+/g, '/')\r\n            .replace(/\\/\\?/g, '?')\r\n            .replace(/\\/\\#/g, '#')\r\n            .replace(/\\:\\//g, '://');\r\n    };\r\n\r\n    return normalize(joined);\r\n}\r\n\r\nexport function merge(obj1, obj2) {\r\n    let result = {};\r\n    for (var i in obj1) {\r\n        if (obj1.hasOwnProperty(i)) {\r\n            if ((i in obj2) && (typeof obj1[i] === 'object') && (i !== null)) {\r\n                result[i] = merge(obj1[i], obj2[i]);\r\n            } else {\r\n                result[i] = obj1[i];\r\n            }\r\n        }\r\n    }\r\n    for (i in obj2) {\r\n        if (obj2.hasOwnProperty(i)) {\r\n            if (i in result) {\r\n                continue;\r\n            }\r\n            result[i] = obj2[i];\r\n        }\r\n\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function camelCase(name) {\r\n    return name.replace(/([\\:\\-\\_]+(.))/g, function(_, separator, letter, offset) {\r\n        return offset ? letter.toUpperCase() : letter;\r\n    });\r\n}","import {Injectable} from '@angular/core';\r\nimport {Shared} from './shared';\r\nimport {Config} from './config';\r\nimport {Http, RequestOptionsArgs, Response} from '@angular/http';\r\nimport {joinUrl} from './utils';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/do';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\nfunction getFullOpts(user: string | Object, userOpts?: RequestOptionsArgs) {\r\n    const opts = userOpts || {};\r\n    if (user) {\r\n        opts.body = typeof user === 'string' ? user : JSON.stringify(user);\r\n    }\r\n    opts.method = opts.method || 'POST';\r\n    return opts;\r\n}\r\n\r\n@Injectable()\r\nexport class Local {\r\n    constructor(private http: Http,\r\n                private shared: Shared,\r\n                private config: Config) {}\r\n\r\n    login(user: string | Object, opts?: RequestOptionsArgs): Observable<Response> {\r\n        const fullOpts = getFullOpts(user, opts);\r\n        const url = fullOpts.url ? fullOpts.url : joinUrl(this.config.baseUrl, this.config.loginUrl);\r\n\r\n        return this.http.request(url, fullOpts)\r\n            .do((response: Response) => this.shared.setToken(response));\r\n    }\r\n\r\n    signup(user: string | Object, opts?: RequestOptionsArgs): Observable<Response> {\r\n        const fullOpts = getFullOpts(user, opts);\r\n        const url = fullOpts.url ? fullOpts.url : joinUrl(this.config.baseUrl, this.config.signupUrl);\r\n\r\n        return this.http.request(url, getFullOpts(user, fullOpts));\r\n    }\r\n}","import {Injectable} from '@angular/core';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\nexport interface IPopupOptions {\r\n    width?: number;\r\n    height?: number;\r\n    left?: number;\r\n    top?: number;\r\n}\r\n\r\nexport interface IOauth1Options {\r\n    url?: string;\r\n    name?: string;\r\n    popupOptions?: IPopupOptions;\r\n    redirectUri?: string;\r\n    authorizationEndpoint?: string;\r\n    type?: string;\r\n}\r\n\r\nexport interface IOauth2Options extends IOauth1Options {\r\n    state?: string| (() => string);\r\n    defaultUrlParams?: string[];\r\n    responseType?: string;\r\n    responseParams?: {\r\n        code?: string;\r\n        clientId?: string;\r\n        redirectUri?: string;\r\n    };\r\n    clientId?: string;\r\n    scopeDelimiter?: string;\r\n    scopePrefix?: string;\r\n\r\n    requiredUrlParams?: string[];\r\n    optionalUrlParams?: string[];\r\n    scope?: string[];\r\n    display?: string;\r\n}\r\nexport interface IProviders {\r\n    [provider: string]: IOauth2Options;\r\n}\r\nexport interface ICustomConfig {\r\n    tokenRoot?: string;\r\n    cordova?: boolean;\r\n    baseUrl?: string;\r\n    loginUrl?: string;\r\n    signupUrl?: string;\r\n    unlinkUrl?: string;\r\n    tokenName?: string;\r\n    tokenSeparator?: string;\r\n    tokenPrefix?: string;\r\n    authToken?: string;\r\n    authHeader?: string;\r\n    storageType?: string;\r\n    providers?: IProviders;\r\n    defaultHeaders?: { [name: string]: string };\r\n    withCredentials?: boolean;\r\n    autoRefreshToken?: boolean;\r\n    refreshUrl?: string;\r\n}\r\n@Injectable()\r\nexport class Config implements ICustomConfig {\r\n    constructor(config?: ICustomConfig) {\r\n        Object.keys(config).forEach((key) => {\r\n            if (key !== 'providers') {\r\n                this[key] = config[key];\r\n            } else {\r\n                Object.keys(config[key]).forEach((provider) => {\r\n                    if (typeof this.providers[provider] === 'undefined') {\r\n                        this.providers[provider] = config.providers[provider];\r\n                    } else {\r\n                        Object.keys(config.providers[provider]).forEach((prop) => {\r\n                            this.providers[provider][prop] = config.providers[provider][prop];\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n    withCredentials = false;\r\n    tokenRoot = null;\r\n    cordova = false;\r\n    baseUrl = '/';\r\n    loginUrl = '/auth/login';\r\n    signupUrl = '/auth/signup';\r\n    unlinkUrl = '/auth/unlink/';\r\n    refreshUrl = '/auth/refresh';\r\n    tokenName = 'token';\r\n    tokenSeparator = '_';\r\n    tokenPrefix = 'ng2-ui-auth';\r\n    authHeader = 'Authorization';\r\n    authToken = 'Bearer';\r\n    storageType = 'localStorage';\r\n    defaultHeaders = null;\r\n    autoRefreshToken = false;\r\n    providers: IProviders = {\r\n        facebook: {\r\n            name: 'facebook',\r\n            url: '/auth/facebook',\r\n            authorizationEndpoint: 'https://www.facebook.com/v2.5/dialog/oauth',\r\n            redirectUri: window.location.origin + '/',\r\n            requiredUrlParams: ['display', 'scope'],\r\n            scope: ['email'],\r\n            scopeDelimiter: ',',\r\n            display: 'popup',\r\n            type: '2.0',\r\n            popupOptions: {width: 580, height: 400}\r\n        },\r\n        google: {\r\n            name: 'google',\r\n            url: '/auth/google',\r\n            authorizationEndpoint: 'https://accounts.google.com/o/oauth2/auth',\r\n            redirectUri: window.location.origin,\r\n            requiredUrlParams: ['scope'],\r\n            optionalUrlParams: ['display', 'state'],\r\n            state: 'STATE',\r\n            scope: ['profile', 'email'],\r\n            scopePrefix: 'openid',\r\n            scopeDelimiter: ' ',\r\n            display: 'popup',\r\n            type: '2.0',\r\n            popupOptions: {width: 452, height: 633}\r\n        },\r\n        github: {\r\n            name: 'github',\r\n            url: '/auth/github',\r\n            authorizationEndpoint: 'https://github.com/login/oauth/authorize',\r\n            redirectUri: window.location.origin,\r\n            optionalUrlParams: ['scope'],\r\n            scope: ['user:email'],\r\n            scopeDelimiter: ' ',\r\n            type: '2.0',\r\n            popupOptions: {width: 1020, height: 618}\r\n        },\r\n        instagram: {\r\n            name: 'instagram',\r\n            url: '/auth/instagram',\r\n            authorizationEndpoint: 'https://api.instagram.com/oauth/authorize',\r\n            redirectUri: window.location.origin,\r\n            requiredUrlParams: ['scope'],\r\n            scope: ['basic'],\r\n            scopeDelimiter: '+',\r\n            type: '2.0'\r\n        },\r\n        linkedin: {\r\n            name: 'linkedin',\r\n            url: '/auth/linkedin',\r\n            authorizationEndpoint: 'https://www.linkedin.com/uas/oauth2/authorization',\r\n            redirectUri: window.location.origin,\r\n            requiredUrlParams: ['state'],\r\n            scope: ['r_emailaddress'],\r\n            scopeDelimiter: ' ',\r\n            state: 'STATE',\r\n            type: '2.0',\r\n            popupOptions: {width: 527, height: 582}\r\n        },\r\n        twitter: {\r\n            name: 'twitter',\r\n            url: '/auth/twitter',\r\n            authorizationEndpoint: 'https://api.twitter.com/oauth/authenticate',\r\n            redirectUri: window.location.origin,\r\n            type: '1.0',\r\n            popupOptions: {width: 495, height: 645}\r\n        },\r\n        twitch: {\r\n            name: 'twitch',\r\n            url: '/auth/twitch',\r\n            authorizationEndpoint: 'https://api.twitch.tv/kraken/oauth2/authorize',\r\n            redirectUri: window.location.origin,\r\n            requiredUrlParams: ['scope'],\r\n            scope: ['user_read'],\r\n            scopeDelimiter: ' ',\r\n            display: 'popup',\r\n            type: '2.0',\r\n            popupOptions: {width: 500, height: 560}\r\n        },\r\n        live: {\r\n            name: 'live',\r\n            url: '/auth/live',\r\n            authorizationEndpoint: 'https://login.live.com/oauth20_authorize.srf',\r\n            redirectUri: window.location.origin,\r\n            requiredUrlParams: ['display', 'scope'],\r\n            scope: ['wl.emails'],\r\n            scopeDelimiter: ' ',\r\n            display: 'popup',\r\n            type: '2.0',\r\n            popupOptions: {width: 500, height: 560}\r\n        },\r\n        yahoo: {\r\n            name: 'yahoo',\r\n            url: '/auth/yahoo',\r\n            authorizationEndpoint: 'https://api.login.yahoo.com/oauth2/request_auth',\r\n            redirectUri: window.location.origin,\r\n            scope: [],\r\n            scopeDelimiter: ',',\r\n            type: '2.0',\r\n            popupOptions: {width: 559, height: 519}\r\n        },\r\n        bitbucket: {\r\n            name: 'bitbucket',\r\n            url: '/auth/bitbucket',\r\n            authorizationEndpoint: 'https://bitbucket.org/site/oauth2/authorize',\r\n            redirectUri: window.location.origin + '/',\r\n            requiredUrlParams: ['scope'],\r\n            scope: ['email'],\r\n            scopeDelimiter: ',',\r\n            type: '2.0',\r\n            popupOptions: {width: 1028, height: 529}\r\n        }\r\n    };\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Config} from './config';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n@Injectable()\r\nexport class Storage {\r\n    private store = {};\r\n    private isStorageAvailable: boolean;\r\n    constructor(private config: Config) {\r\n        this.isStorageAvailable = (() => {\r\n            try {\r\n                let supported = config.storageType in window && window[config.storageType] !== null;\r\n\r\n                if (supported) {\r\n                    let key = Math.random().toString(36).substring(7);\r\n                    (<any>window[this.config.storageType]).setItem(key, '');\r\n                    (<any>window[this.config.storageType]).removeItem(key);\r\n                }\r\n\r\n                return supported;\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        })();\r\n        if (!this.isStorageAvailable) {\r\n            console.warn(config.storageType + ' is not available.');\r\n        }\r\n    }\r\n    get(key: string) {\r\n        return this.isStorageAvailable ? window[this.config.storageType].getItem(key) : this.store[key];\r\n    }\r\n    set(key: string, value: string) {\r\n        return this.isStorageAvailable ? window[this.config.storageType].setItem(key, value) : this.store[key] = value;\r\n    }\r\n    remove(key: string) {\r\n        return this.isStorageAvailable ? window[this.config.storageType].removeItem(key) : delete this.store[key];\r\n    }\r\n}\r\n","/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subscriber} from 'rxjs/Subscriber';\r\nimport {Injectable} from '@angular/core';\r\nimport {Response} from '@angular/http';\r\nimport {Config} from './config';\r\nimport {Storage} from './storage';\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n@Injectable()\r\nexport class Shared {\r\n    tokenName = this.config.tokenPrefix ? [this.config.tokenPrefix, this.config.tokenName].join(this.config.tokenSeparator) : this.config.tokenName;\r\n    constructor(private storage: Storage, private config: Config) {}\r\n    getToken() {\r\n        return this.storage.get(this.tokenName);\r\n    }\r\n    getPayload() {\r\n        let token = this.getToken();\r\n\r\n        if (token && token.split('.').length === 3) {\r\n            try {\r\n                let base64Url = token.split('.')[1];\r\n                let base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n                return JSON.parse(decodeURIComponent(encodeURIComponent(window.atob(base64))));\r\n            } catch (e) {\r\n                return undefined;\r\n            }\r\n        }\r\n    }\r\n    setToken(response: string | Response) {\r\n        if (!response) {\r\n            console.warn('Can\\'t set token without passing a value');\r\n            return;\r\n        }\r\n\r\n        let token: string;\r\n        if (typeof response === 'string') {\r\n            token = response;\r\n        } else {\r\n            let accessToken = response && response.json() && (response.json().access_token || response.json().token);\r\n            let tokenObject: { data: any };\r\n\r\n            if (accessToken) {\r\n                if (typeof accessToken === 'object' && typeof accessToken.data === 'object') {\r\n                    tokenObject = accessToken;\r\n                } else if (typeof accessToken === 'string') {\r\n                    token = accessToken;\r\n                }\r\n            }\r\n\r\n            if (!token && tokenObject) {\r\n                let tokenRootData = this.config.tokenRoot &&\r\n                    this.config.tokenRoot.split('.').reduce(\r\n                        (o, x) => {\r\n                            return o[x];\r\n                        },\r\n                        tokenObject.data);\r\n                token = tokenRootData ? tokenRootData[this.config.tokenName] : tokenObject.data[this.config.tokenName];\r\n            }\r\n\r\n            if (!token) {\r\n                let tokenPath = this.config.tokenRoot ? this.config.tokenRoot + '.' + this.config.tokenName : this.config.tokenName;\r\n                console.warn('Expecting a token named \"' + tokenPath);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.storage.set(this.tokenName, token);\r\n    }\r\n    removeToken() {\r\n        this.storage.remove(this.tokenName);\r\n    }\r\n    isAuthenticated() {\r\n        let token = this.getToken();\r\n\r\n        // a token is present\r\n        if (token) {\r\n            // token with a valid JWT format XXX.YYY.ZZZ\r\n            if (token.split('.').length === 3) {\r\n                // could be a valid JWT or an access token with the same format\r\n                try {\r\n                    let base64Url = token.split('.')[1];\r\n                    let base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n                    let exp = JSON.parse(window.atob(base64)).exp;\r\n                    // jwt with an optional expiration claims\r\n                    if (exp) {\r\n                        let isExpired = Math.round(new Date().getTime() / 1000) >= exp;\r\n                        if (isExpired) {\r\n                            // fail: Expired token\r\n                            this.storage.remove(this.tokenName);\r\n                            return false;\r\n                        } else {\r\n                            // pass: Non-expired token\r\n                            return true;\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    // pass: Non-JWT token that looks like JWT\r\n                    return true;\r\n                }\r\n            }\r\n            // pass: All other tokens\r\n            return true;\r\n        }\r\n        // lail: No token at all\r\n        return false;\r\n    }\r\n    getExpirationDate() {\r\n        let payload = this.getPayload();\r\n        if (payload.exp && Math.round(new Date().getTime() / 1000) < payload.exp) {\r\n            let date = new Date(0);\r\n            date.setUTCSeconds(payload.exp);\r\n            return date;\r\n        }\r\n        return null;\r\n    }\r\n    logout(): Observable<any> {\r\n        this.storage.remove(this.tokenName);\r\n        return Observable.create((observer: Subscriber<any>) => {\r\n            observer.next();\r\n            observer.complete();\r\n        });\r\n    }\r\n    setStorageType(type) {\r\n        this.config.storageType = type;\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {assign} from './utils';\r\nimport {Config, IPopupOptions} from './config';\r\nimport 'rxjs/add/observable/interval';\r\nimport 'rxjs/add/observable/fromEvent';\r\nimport 'rxjs/add/operator/concatMap';\r\nimport 'rxjs/add/operator/take';\r\nimport 'rxjs/add/operator/takeWhile';\r\n\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n@Injectable()\r\nexport class Popup {\r\n    url = '';\r\n    popupWindow: Window = null;\r\n\r\n    private static prepareOptions(options: IPopupOptions) {\r\n        options = options || {};\r\n        let width = options.width || 500;\r\n        let height = options.height || 500;\r\n        return assign(\r\n            {\r\n                width: width,\r\n                height: height,\r\n                left: window.screenX + ((window.outerWidth - width) / 2),\r\n                top: window.screenY + ((window.outerHeight - height) / 2.5)\r\n            },\r\n            options);\r\n    }\r\n\r\n    private static stringifyOptions(options: Object) {\r\n        return Object.keys(options).map((key) => {\r\n            return key + '=' + options[key];\r\n        }).join(',');\r\n    }\r\n\r\n    private static parseQueryString(joinedKeyValue: string): any {\r\n        let key, value;\r\n        return joinedKeyValue.split('&').reduce(\r\n            (obj, keyValue) => {\r\n                if (keyValue) {\r\n                    value = keyValue.split('=');\r\n                    key = decodeURIComponent(value[0]);\r\n                    obj[key] = typeof value[1] !== 'undefined' ? decodeURIComponent(value[1]) : true;\r\n                }\r\n                return obj;\r\n            },\r\n            {});\r\n    }\r\n\r\n\r\n    constructor(private config: Config) {}\r\n    open(url: string, name: string, options: IPopupOptions) {\r\n        this.url = url;\r\n\r\n        let stringifiedOptions = Popup.stringifyOptions(Popup.prepareOptions(options));\r\n        let UA = window.navigator.userAgent;\r\n        let windowName = (this.config.cordova || UA.indexOf('CriOS') > -1) ? '_blank' : name;\r\n\r\n        this.popupWindow = window.open(url, windowName, stringifiedOptions);\r\n\r\n        window['popup'] = this.popupWindow;\r\n\r\n        if (this.popupWindow && this.popupWindow.focus) {\r\n            this.popupWindow.focus();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    eventListener(redirectUri: string) {\r\n        return Observable\r\n            .fromEvent(this.popupWindow, 'loadstart')\r\n            .concatMap((event: Event & { url: string }) => {\r\n                if (!this.popupWindow || this.popupWindow.closed) {\r\n                    return ['Popup Window Closed'];\r\n                }\r\n                if (event.url.indexOf(redirectUri) !== 0) {\r\n                    return [];\r\n                }\r\n\r\n                let parser = document.createElement('a');\r\n                parser.href = event.url;\r\n\r\n                if (parser.search || parser.hash) {\r\n                    const queryParams = parser.search.substring(1).replace(/\\/$/, '');\r\n                    const hashParams = parser.hash.substring(1).replace(/\\/$/, '');\r\n                    const hash = Popup.parseQueryString(hashParams);\r\n                    const qs = Popup.parseQueryString(queryParams);\r\n                    const allParams = assign({}, qs, hash);\r\n\r\n                    this.popupWindow.close();\r\n\r\n                    if (allParams.error) {\r\n                        throw allParams.error;\r\n                    } else {\r\n                        return <any>[allParams];\r\n                    }\r\n                }\r\n                return [];\r\n            })\r\n            .take(1)\r\n            .takeWhile((response) => response !== 'Popup Window Closed');\r\n    }\r\n\r\n    pollPopup() {\r\n        return Observable\r\n            .interval(50)\r\n            .concatMap(() => {\r\n                if (!this.popupWindow || this.popupWindow.closed) {\r\n                    return ['Popup Window Closed'];\r\n                }\r\n                let documentOrigin = document.location.host;\r\n                let popupWindowOrigin = '';\r\n                try {\r\n                    popupWindowOrigin = this.popupWindow.location.host;\r\n                } catch (error) {\r\n                    // ignore DOMException: Blocked a frame with origin from accessing a cross-origin frame.\r\n                    //error instanceof DOMException && error.name === 'SecurityError'\r\n                }\r\n                if (popupWindowOrigin === documentOrigin && (this.popupWindow.location.search || this.popupWindow.location.hash)) {\r\n                    const queryParams = this.popupWindow.location.search.substring(1).replace(/\\/$/, '');\r\n                    const hashParams = this.popupWindow.location.hash.substring(1).replace(/[\\/$]/, '');\r\n                    const hash = Popup.parseQueryString(hashParams);\r\n                    const qs = Popup.parseQueryString(queryParams);\r\n                    this.popupWindow.close();\r\n                    const allParams = assign({}, qs, hash);\r\n                    if (allParams.error) {\r\n                        throw allParams.error;\r\n                    } else {\r\n                        return [allParams];\r\n                    }\r\n                }\r\n                return [];\r\n            })\r\n            .take(1)\r\n            .takeWhile((response) => response !== 'Popup Window Closed');\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Http} from '@angular/http';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {assign, joinUrl, merge, camelCase} from './utils';\r\nimport {Config, IOauth2Options} from './config';\r\nimport {Popup} from './popup';\r\nimport {Storage} from './storage';\r\nimport 'rxjs/add/operator/concatMap';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n\r\n@Injectable()\r\nexport class Oauth2 {\r\n    private static base: IOauth2Options = {\r\n        defaultUrlParams: ['response_type', 'client_id', 'redirect_uri'],\r\n        responseType: 'code',\r\n        responseParams: {\r\n            code: 'code',\r\n            clientId: 'clientId',\r\n            redirectUri: 'redirectUri'\r\n        }\r\n    };\r\n\r\n    private defaults: IOauth2Options;\r\n\r\n    constructor(private http: Http,\r\n                private popup: Popup,\r\n                private storage: Storage,\r\n                private config: Config) {\r\n    }\r\n\r\n    open(options: IOauth2Options, userData?: any) {\r\n        this.defaults = merge(options, Oauth2.base);\r\n\r\n        let url;\r\n        let openPopup: Observable<any>;\r\n        let stateName = this.defaults.name + '_state';\r\n        let state = this.defaults.state;\r\n        if (typeof state === 'string') {\r\n            this.storage.set(stateName, state);\r\n        } else if (typeof state === 'function') {\r\n            this.storage.set(stateName, state());\r\n        }\r\n\r\n        url = [this.defaults.authorizationEndpoint, this.buildQueryString()].join('?');\r\n\r\n        if (this.config.cordova) {\r\n            openPopup = this.popup\r\n                .open(url, this.defaults.name, this.defaults.popupOptions/*, this.defaults.redirectUri*/)\r\n                .eventListener(this.defaults.redirectUri);\r\n        } else {\r\n            openPopup = this.popup\r\n                .open(url, this.defaults.name, this.defaults.popupOptions/*, this.defaults.redirectUri*/)\r\n                .pollPopup();\r\n        }\r\n\r\n        return openPopup\r\n            .concatMap((oauthData) => {\r\n                // when no server URL provided, return popup params as-is.\r\n                // this is for a scenario when someone wishes to opt out from\r\n                // satellizer's magic by doing authorization code exchange and\r\n                // saving a token manually.\r\n                if (this.defaults.responseType === 'token' || !this.defaults.url) {\r\n                    return oauthData;\r\n                }\r\n\r\n                if (oauthData.state && oauthData.state !== this.storage.get(stateName)) {\r\n                    throw 'OAuth \"state\" mismatch';\r\n                }\r\n\r\n                return this.exchangeForToken(oauthData, userData);\r\n            });\r\n    }\r\n\r\n    private exchangeForToken(oauthData: {code?, state?}, userData?: {}) {\r\n        let data: any = assign({}, this.defaults, oauthData, userData);\r\n\r\n        let exchangeForTokenUrl = this.config.baseUrl ? joinUrl(this.config.baseUrl, this.defaults.url) : this.defaults.url;\r\n\r\n        return this.http.post(exchangeForTokenUrl,  JSON.stringify(data), { withCredentials: this.config.withCredentials });\r\n    }\r\n\r\n    private buildQueryString() {\r\n        let keyValuePairs: string[][] = [];\r\n        let urlParams = ['defaultUrlParams', 'requiredUrlParams', 'optionalUrlParams'];\r\n\r\n        urlParams.forEach((params) => {\r\n            if (this.defaults[params]) {\r\n                (<string[]>this.defaults[params]).forEach((paramName) => {\r\n                    let camelizedName = camelCase(paramName);\r\n                    let paramValue = typeof this.defaults[paramName] === 'function' ?\r\n                        this.defaults[paramName]() :\r\n                        this.defaults[camelizedName];\r\n\r\n                    if (paramName === 'state') {\r\n                        let stateName = this.defaults.name + '_state';\r\n                        paramValue = encodeURIComponent(this.storage.get(stateName));\r\n                    }\r\n\r\n                    if (paramName === 'scope' && Array.isArray(paramValue)) {\r\n                        paramValue = paramValue.join(this.defaults.scopeDelimiter);\r\n\r\n                        if (this.defaults.scopePrefix) {\r\n                            paramValue = [this.defaults.scopePrefix, paramValue].join(this.defaults.scopeDelimiter);\r\n                        }\r\n                    }\r\n\r\n                    keyValuePairs.push([paramName, paramValue]);\r\n                });\r\n            }\r\n        });\r\n\r\n        return keyValuePairs.map(function(pair) {\r\n            return pair.join('=');\r\n        }).join('&');\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Popup} from './popup';\r\nimport {Http, Response} from '@angular/http';\r\nimport {joinUrl, assign} from './utils';\r\nimport {Config, IOauth1Options} from './config';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/concatMap';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n\r\n@Injectable()\r\nexport class Oauth1 {\r\n    private static base: IOauth1Options = {\r\n        url: null,\r\n        name: null,\r\n        popupOptions: null,\r\n        redirectUri: null,\r\n        authorizationEndpoint: null\r\n    };\r\n    private defaults: IOauth1Options;\r\n    constructor(private http: Http, private popup: Popup, private config: Config) {}\r\n    open(options?: IOauth1Options, userData?: any): Observable<Response> {\r\n        this.defaults = assign({}, Oauth1.base, options);\r\n        let popupWindow;\r\n        let serverUrl = this.config.baseUrl ? joinUrl(this.config.baseUrl, this.defaults.url) : this.defaults.url;\r\n\r\n        if (!this.config.cordova) {\r\n            popupWindow = this.popup.open('', this.defaults.name, this.defaults.popupOptions/*, this.defaults.redirectUri*/);\r\n        }\r\n\r\n        return this.http.post(serverUrl, JSON.stringify(this.defaults))\r\n            .concatMap((response: Response) => {\r\n                if (this.config.cordova) {\r\n                    popupWindow = this.popup.open(\r\n                        [this.defaults.authorizationEndpoint, this.buildQueryString(response.json())].join('?'),\r\n                        this.defaults.name,\r\n                        this.defaults.popupOptions);\r\n                } else {\r\n                    popupWindow.popupWindow.location =\r\n                        [this.defaults.authorizationEndpoint, this.buildQueryString(response.json())].join('?');\r\n                }\r\n\r\n                return this.config.cordova ? popupWindow.eventListener(this.defaults.redirectUri) : popupWindow.pollPopup();\r\n            })\r\n            .concatMap((response) => {\r\n                return this.exchangeForToken(response, userData);\r\n            });\r\n    }\r\n    private exchangeForToken(oauthData, userData?: any) {\r\n        let data = assign({}, oauthData, userData);\r\n        let exchangeForTokenUrl = this.config.baseUrl ? joinUrl(this.config.baseUrl, this.defaults.url) : this.defaults.url;\r\n        return this.http.post(exchangeForTokenUrl, data, { withCredentials: this.config.withCredentials });\r\n    }\r\n    private buildQueryString(obj: Object) {\r\n        return Object.keys(obj).map((key) => {\r\n            return encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]);\r\n        }).join('&');\r\n    }\r\n}\r\n","import {Injectable, Injector} from '@angular/core';\r\nimport {Oauth1} from './oauth1';\r\nimport {Oauth2} from './oauth2';\r\nimport {Shared} from './shared';\r\nimport {Http, Response, RequestOptionsArgs} from '@angular/http';\r\nimport {joinUrl} from './utils';\r\nimport {Config} from './config';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/do';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n@Injectable()\r\nexport class Oauth {\r\n    constructor(private http: Http,\r\n                private injector: Injector,\r\n                private shared: Shared,\r\n                private config: Config) {}\r\n    authenticate(name: string, userData?: any): Observable<Response> {\r\n        // var injector = Injector.resolveAndCreate([Oauth1, Oauth2]);\r\n        let provider: Oauth1 | Oauth2 = this.config.providers[name].type === '1.0' ? this.injector.get(Oauth1) : this.injector.get(Oauth2);\r\n        return provider.open(this.config.providers[name], userData || {})\r\n            .do((response: Response) => {\r\n                // this is for a scenario when someone wishes to opt out from\r\n                // satellizer's magic by doing authorization code exchange and\r\n                // saving a token manually.\r\n                if (this.config.providers[name].url) {\r\n                    this.shared.setToken(response);\r\n                }\r\n            });\r\n    }\r\n    unlink(provider: string, opts: RequestOptionsArgs) {\r\n        opts = opts || {};\r\n        let url = opts.url ? opts.url : joinUrl(this.config.baseUrl, this.config.unlinkUrl);\r\n        opts.body = JSON.stringify({ provider: provider }) || opts.body;\r\n        opts.method = opts.method || 'POST';\r\n        \r\n        return this.http.request(url, opts);\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Http, RequestMethod, Response, RequestOptionsArgs, Headers, Request, RequestOptions, ConnectionBackend} from '@angular/http';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/switchMap';\r\nimport {Config} from './config';\r\nimport {Shared} from './shared';\r\n/**\r\n * Created by Ron on 06/01/2016.\r\n */\r\n\r\nexport interface JwtRequestOptionsArgs extends RequestOptionsArgs {\r\n    autoRefreshToken?: boolean\r\n}\r\n\r\n@Injectable()\r\nexport class JwtHttp extends Http {\r\n    constructor(_backend: ConnectionBackend,\r\n                _defaultOptions: RequestOptions,\r\n                private _shared: Shared,\r\n                private _config: Config) {\r\n        super(_backend, _defaultOptions);\r\n    }\r\n\r\n    request(url: string | Request, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        //if the token is expired the \"getExpirationDate\" function returns null\r\n        if (this._shared.getToken() && !this._shared.getExpirationDate() &&\r\n            options.autoRefreshToken ||\r\n            typeof options.autoRefreshToken === 'undefined' && this._config.autoRefreshToken) {\r\n            return this.refreshToken()\r\n                .switchMap(() => this.actualRequest(url, options));\r\n        }\r\n        return this.actualRequest(url, options);\r\n    }\r\n\r\n    get(url: string, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Get;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    post(url: string, body: string, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Post;\r\n        options.body = body;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    put(url: string, body: string, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Put;\r\n        options.body = body;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    delete(url: string, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Delete;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    patch(url: string, body: string, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Patch;\r\n        options.body = body;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    head(url: string, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Head;\r\n        return this.request(url, options);\r\n    }\r\n\r\n\r\n    refreshToken(): Observable<Response> {\r\n        const authHeader = new Headers();\r\n        authHeader.append(this._config.authHeader, (this._config.authToken + ' ' + this._shared.getToken()));\r\n        return super\r\n            .get(this._config.refreshUrl, {\r\n                headers: authHeader\r\n            })\r\n            .do((res: Response) => this._shared.setToken(res));\r\n    }\r\n\r\n    private actualRequest(url: string | Request, options?: JwtRequestOptionsArgs) {\r\n        if (url instanceof Request) {\r\n            url.headers = url.headers || new Headers();\r\n            this.setHeaders(url);\r\n        } else {\r\n            options = options || {};\r\n            this.setHeaders(options);\r\n        }\r\n        return super.request(url, options);\r\n    }\r\n\r\n    private setHeaders(obj: { headers?: Headers, [index: string]: any }) {\r\n        obj.headers = obj.headers || new Headers();\r\n        if (this._config.defaultHeaders) {\r\n            Object.keys(this._config.defaultHeaders).forEach((defaultHeader) => {\r\n                if (!obj.headers.has(defaultHeader)) {\r\n                    obj.headers.set(defaultHeader, this._config.defaultHeaders[defaultHeader]);\r\n                }\r\n            });\r\n        }\r\n        if (this._shared.isAuthenticated()) {\r\n            obj.headers.set(this._config.authHeader, this._config.authToken + ' ' + this._shared.getToken());\r\n        }\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Response, RequestOptionsArgs} from '@angular/http';\r\nimport {Shared} from './shared';\r\nimport {Local} from './local';\r\nimport {Oauth} from './oauth';\r\nimport {Popup} from './popup';\r\nimport {Oauth2} from './oauth2';\r\nimport {Oauth1} from './oauth1';\r\nimport {Storage} from './storage';\r\nimport {ICustomConfig, Config} from './config';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {JwtHttp} from './jwtHttp';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\nexport const NG2_UI_AUTH_PROVIDERS = (config: ICustomConfig) => {\r\n    return [{provide: Config, useValue: new Config(config)},\r\n        Storage, Shared, JwtHttp, Oauth, Popup, Oauth1, Oauth2, Local, Auth\r\n        ];\r\n};\r\n\r\n@Injectable()\r\nexport class Auth {\r\n    constructor(private shared: Shared,\r\n                private local: Local,\r\n                private oauth: Oauth) {}\r\n    login(user, opts?: RequestOptionsArgs): Observable<Response> {\r\n        return this.local.login(user, opts);\r\n    }\r\n    signup(user, opts?: RequestOptionsArgs): Observable<Response>  {\r\n        return this.local.signup(user, opts);\r\n    }\r\n    logout(): Observable<void> {\r\n        return this.shared.logout();\r\n    }\r\n    authenticate(name: string, userData?: any): Observable<Response> {\r\n        return this.oauth.authenticate(name, userData);\r\n    }\r\n    link(name: string, userData?: any): Observable<Response> {\r\n        return this.oauth.authenticate(name, userData);\r\n    }\r\n    unlink(provider: string, opts: RequestOptionsArgs): Observable<Response> {\r\n        return this.oauth.unlink(provider, opts);\r\n    }\r\n    isAuthenticated(): boolean {\r\n        return this.shared.isAuthenticated();\r\n    }\r\n    getToken(): string {\r\n        return this.shared.getToken();\r\n    }\r\n    setToken(token: string): void {\r\n        this.shared.setToken(token);\r\n    }\r\n    removeToken(): void {\r\n        this.shared.removeToken();\r\n    }\r\n    getPayload(): any {\r\n        return this.shared.getPayload();\r\n    }\r\n    setStorageType(type: string): void {\r\n        this.shared.setStorageType(type);\r\n    }\r\n    getExpirationDate(): Date {\r\n        return this.shared.getExpirationDate();\r\n    }\r\n}\r\n"],"names":["target","_i","src","TypeError","Object","index","arguments","length","source","key","prototype","hasOwnProperty","call","baseUrl","url","test","joined","join","normalize","str","replace","obj1","obj2","result","i","merge","name","_","separator","letter","offset","toUpperCase","user","userOpts","opts","body","JSON","stringify","method","config","this","facebook","authorizationEndpoint","redirectUri","window","location","origin","requiredUrlParams","scope","scopeDelimiter","display","type","popupOptions","width","height","google","optionalUrlParams","state","scopePrefix","github","instagram","linkedin","twitter","twitch","live","yahoo","bitbucket","keys","forEach","_this","provider","providers","prop","Config","Injectable","isStorageAvailable","supported","storageType","Math","random","toString","substring","setItem","removeItem","e","console","warn","Storage","getItem","store","value","storage","tokenPrefix","tokenName","tokenSeparator","Shared","get","token","getToken","split","base64Url","base64","parse","decodeURIComponent","encodeURIComponent","atob","response","accessToken","json","access_token","tokenObject","data","tokenRootData","tokenRoot","reduce","o","x","tokenPath","set","remove","exp","isExpired","round","Date","getTime","payload","getPayload","date","setUTCSeconds","Observable","create","observer","next","complete","http","shared","Local","fullOpts","getFullOpts","joinUrl","loginUrl","request","do","setToken","signupUrl","Popup","options","assign","left","screenX","outerWidth","top","screenY","outerHeight","map","joinedKeyValue","obj","keyValue","stringifiedOptions","stringifyOptions","prepareOptions","UA","navigator","userAgent","windowName","cordova","indexOf","popupWindow","open","focus","fromEvent","concatMap","event","closed","parser","document","createElement","href","search","hash","queryParams","hashParams","parseQueryString","qs","allParams","close","error","take","takeWhile","interval","documentOrigin","host","popupWindowOrigin","popup","Oauth2","userData","defaults","base","openPopup","stateName","buildQueryString","eventListener","pollPopup","oauthData","responseType","exchangeForToken","exchangeForTokenUrl","post","withCredentials","keyValuePairs","urlParams","params","paramName","camelizedName","camelCase","paramValue","Array","isArray","push","pair","defaultUrlParams","responseParams","code","clientId","Oauth1","serverUrl","injector","Oauth","unlinkUrl","_backend","_defaultOptions","_shared","_config","_super","__extends","JwtHttp","getExpirationDate","autoRefreshToken","refreshToken","switchMap","actualRequest","RequestMethod","Get","Post","Put","Delete","Patch","Head","authHeader","Headers","append","authToken","refreshUrl","headers","res","Request","setHeaders","defaultHeaders","defaultHeader","has","isAuthenticated","Http","NG2_UI_AUTH_PROVIDERS","provide","useValue","Auth","local","oauth","login","signup","logout","authenticate","unlink","removeToken","setStorageType"],"mappings":"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"}
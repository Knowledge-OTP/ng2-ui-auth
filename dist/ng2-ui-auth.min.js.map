{"version":3,"file":null,"sources":["../src/utils.ts","../src/local.ts","../src/auth.ts","../src/config.ts","../src/storage.ts","../src/shared.ts","../src/popup.ts","../src/oauth1.ts","../src/oauth2.ts","../src/oauth.ts","../src/jwtHttp.ts"],"sourcesContent":["/**\n * Created by Ron on 17/12/2015.\n */\n\nexport function assign(target: any, ...src: any[]): any {\n    if (target == null) {\n        throw new TypeError('Cannot convert undefined or null to object');\n    }\n\n    target = Object(target);\n    for (var index = 1; index < arguments.length; index++) {\n        var source = arguments[index];\n        if (source != null) {\n            for (var key in source) {\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n    }\n    return target;\n}\n\nexport function joinUrl(baseUrl: string, url: string) {\n    if (/^(?:[a-z]+:)?\\/\\//i.test(url)) {\n        return url;\n    }\n\n    let joined = [baseUrl, url].join('/');\n\n    let normalize = function(str) {\n        return str\n            .replace(/[\\/]+/g, '/')\n            .replace(/\\/\\?/g, '?')\n            .replace(/\\/\\#/g, '#')\n            .replace(/\\:\\//g, '://');\n    };\n\n    return normalize(joined);\n}\n\nexport function merge(obj1, obj2) {\n    let result = {};\n    for (var i in obj1) {\n        if (obj1.hasOwnProperty(i)) {\n            if ((i in obj2) && (typeof obj1[i] === 'object') && (i !== null)) {\n                result[i] = merge(obj1[i], obj2[i]);\n            } else {\n                result[i] = obj1[i];\n            }\n        }\n    }\n    for (i in obj2) {\n        if (obj2.hasOwnProperty(i)) {\n            if (i in result) {\n                continue;\n            }\n            result[i] = obj2[i];\n        }\n\n    }\n    return result;\n}\n\nexport function camelCase(name) {\n    return name.replace(/([\\:\\-\\_]+(.))/g, function(_, separator, letter, offset) {\n        return offset ? letter.toUpperCase() : letter;\n    });\n}","import {Injectable} from '@angular/core';\r\nimport {Shared} from './shared';\r\nimport {Config} from './config';\r\nimport {Http, RequestOptionsArgs, Response} from '@angular/http';\r\nimport {joinUrl} from './utils';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/do';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\nfunction getFullOpts(user: string | Object, userOpts?: RequestOptionsArgs) {\r\n    const opts = userOpts || {};\r\n    if (user) {\r\n        opts.body = typeof user === 'string' ? user : JSON.stringify(user);\r\n    }\r\n    opts.method = opts.method || 'POST';\r\n    return opts;\r\n}\r\n\r\n@Injectable()\r\nexport class Local {\r\n    constructor(private http: Http,\r\n                private shared: Shared,\r\n                private config: Config) {}\r\n\r\n    login(user: string | Object, opts?: RequestOptionsArgs): Observable<Response> {\r\n        const fullOpts = getFullOpts(user, opts);\r\n        const url = fullOpts.url ? fullOpts.url : joinUrl(this.config.baseUrl, this.config.loginUrl);\r\n\r\n        return this.http.request(url, fullOpts)\r\n            .do((response: Response) => this.shared.setToken(response));\r\n    }\r\n\r\n    signup(user: string | Object, opts?: RequestOptionsArgs): Observable<Response> {\r\n        const fullOpts = getFullOpts(user, opts);\r\n        const url = fullOpts.url ? fullOpts.url : joinUrl(this.config.baseUrl, this.config.signupUrl);\r\n\r\n        return this.http.request(url, getFullOpts(user, fullOpts));\r\n    }\r\n}","import {Injectable} from '@angular/core';\r\nimport {Response, RequestOptionsArgs} from '@angular/http';\r\nimport {Shared} from './shared';\r\nimport {Local} from './local';\r\nimport {Oauth} from './oauth';\r\nimport {Popup} from './popup';\r\nimport {Oauth2} from './oauth2';\r\nimport {Oauth1} from './oauth1';\r\nimport {Storage} from './storage';\r\nimport {ICustomConfig, Config} from './config';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {JwtHttp} from './jwtHttp';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\nexport function NG2_UI_AUTH_PROVIDERS(config: ICustomConfig): Array<any> {\r\n    return [{provide: Config, useValue: new Config(config)},\r\n        Storage, Shared, JwtHttp, Oauth, Popup, Oauth1, Oauth2, Local, Auth\r\n        ];\r\n}\r\n\r\n@Injectable()\r\nexport class Auth {\r\n    constructor(private shared: Shared,\r\n                private local: Local,\r\n                private oauth: Oauth) {}\r\n    login(user, opts?: RequestOptionsArgs): Observable<Response> {\r\n        return this.local.login(user, opts);\r\n    }\r\n    signup(user, opts?: RequestOptionsArgs): Observable<Response>  {\r\n        return this.local.signup(user, opts);\r\n    }\r\n    logout(): Observable<void> {\r\n        return this.shared.logout();\r\n    }\r\n    authenticate(name: string, userData?: any): Observable<Response> {\r\n        return this.oauth.authenticate(name, userData);\r\n    }\r\n    link(name: string, userData?: any): Observable<Response> {\r\n        return this.oauth.authenticate(name, userData);\r\n    }\r\n    unlink(provider: string, opts: RequestOptionsArgs): Observable<Response> {\r\n        return this.oauth.unlink(provider, opts);\r\n    }\r\n    isAuthenticated(): boolean {\r\n        return this.shared.isAuthenticated();\r\n    }\r\n    getToken(): string {\r\n        return this.shared.getToken();\r\n    }\r\n    setToken(token: string): void {\r\n        this.shared.setToken(token);\r\n    }\r\n    removeToken(): void {\r\n        this.shared.removeToken();\r\n    }\r\n    getPayload(): any {\r\n        return this.shared.getPayload();\r\n    }\r\n    setStorageType(type: string): void {\r\n        this.shared.setStorageType(type);\r\n    }\r\n    getExpirationDate(): Date {\r\n        return this.shared.getExpirationDate();\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\nexport interface IPopupOptions {\r\n    width?: number;\r\n    height?: number;\r\n    left?: number;\r\n    top?: number;\r\n}\r\n\r\nexport interface IOauth1Options {\r\n    url?: string;\r\n    name?: string;\r\n    popupOptions?: IPopupOptions;\r\n    redirectUri?: string;\r\n    authorizationEndpoint?: string;\r\n    type?: string;\r\n}\r\n\r\nexport interface IOauth2Options extends IOauth1Options {\r\n    state?: string| (() => string);\r\n    defaultUrlParams?: string[];\r\n    responseType?: string;\r\n    responseParams?: {\r\n        code?: string;\r\n        clientId?: string;\r\n        redirectUri?: string;\r\n    };\r\n    clientId?: string;\r\n    scopeDelimiter?: string;\r\n    scopePrefix?: string;\r\n\r\n    requiredUrlParams?: string[];\r\n    optionalUrlParams?: string[];\r\n    scope?: string[];\r\n    display?: string;\r\n}\r\nexport interface IProviders {\r\n    [provider: string]: IOauth2Options;\r\n}\r\nexport interface ICustomConfig {\r\n    tokenRoot?: string;\r\n    cordova?: boolean;\r\n    baseUrl?: string;\r\n    loginUrl?: string;\r\n    signupUrl?: string;\r\n    unlinkUrl?: string;\r\n    tokenName?: string;\r\n    tokenSeparator?: string;\r\n    tokenPrefix?: string;\r\n    authToken?: string;\r\n    authHeader?: string;\r\n    storageType?: string;\r\n    providers?: IProviders;\r\n    defaultHeaders?: { [name: string]: string };\r\n    withCredentials?: boolean\r\n}\r\n@Injectable()\r\nexport class Config implements ICustomConfig {\r\n    constructor(config?: ICustomConfig) {\r\n        Object.keys(config).forEach((key) => {\r\n            if (key !== 'providers') {\r\n                this[key] = config[key];\r\n            } else {\r\n                Object.keys(config[key]).forEach((provider) => {\r\n                    if (typeof this.providers[provider] === 'undefined') {\r\n                        this.providers[provider] = config.providers[provider];\r\n                    } else {\r\n                        Object.keys(config.providers[provider]).forEach((prop) => {\r\n                            this.providers[provider][prop] = config.providers[provider][prop];\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n    withCredentials = false;\r\n    tokenRoot = null;\r\n    cordova = false;\r\n    baseUrl = '/';\r\n    loginUrl = '/auth/login';\r\n    signupUrl = '/auth/signup';\r\n    unlinkUrl = '/auth/unlink/';\r\n    tokenName = 'token';\r\n    tokenSeparator = '_';\r\n    tokenPrefix = 'ng2-ui-auth';\r\n    authHeader = 'Authorization';\r\n    authToken = 'Bearer';\r\n    storageType = 'localStorage';\r\n    defaultHeaders = null;\r\n    providers: IProviders = {\r\n        facebook: {\r\n            name: 'facebook',\r\n            url: '/auth/facebook',\r\n            authorizationEndpoint: 'https://www.facebook.com/v2.5/dialog/oauth',\r\n            redirectUri: window.location.origin + '/',\r\n            requiredUrlParams: ['display', 'scope'],\r\n            scope: ['email'],\r\n            scopeDelimiter: ',',\r\n            display: 'popup',\r\n            type: '2.0',\r\n            popupOptions: {width: 580, height: 400}\r\n        },\r\n        google: {\r\n            name: 'google',\r\n            url: '/auth/google',\r\n            authorizationEndpoint: 'https://accounts.google.com/o/oauth2/auth',\r\n            redirectUri: window.location.origin,\r\n            requiredUrlParams: ['scope'],\r\n            optionalUrlParams: ['display'],\r\n            scope: ['profile', 'email'],\r\n            scopePrefix: 'openid',\r\n            scopeDelimiter: ' ',\r\n            display: 'popup',\r\n            type: '2.0',\r\n            popupOptions: {width: 452, height: 633}\r\n        },\r\n        github: {\r\n            name: 'github',\r\n            url: '/auth/github',\r\n            authorizationEndpoint: 'https://github.com/login/oauth/authorize',\r\n            redirectUri: window.location.origin,\r\n            optionalUrlParams: ['scope'],\r\n            scope: ['user:email'],\r\n            scopeDelimiter: ' ',\r\n            type: '2.0',\r\n            popupOptions: {width: 1020, height: 618}\r\n        },\r\n        instagram: {\r\n            name: 'instagram',\r\n            url: '/auth/instagram',\r\n            authorizationEndpoint: 'https://api.instagram.com/oauth/authorize',\r\n            redirectUri: window.location.origin,\r\n            requiredUrlParams: ['scope'],\r\n            scope: ['basic'],\r\n            scopeDelimiter: '+',\r\n            type: '2.0'\r\n        },\r\n        linkedin: {\r\n            name: 'linkedin',\r\n            url: '/auth/linkedin',\r\n            authorizationEndpoint: 'https://www.linkedin.com/uas/oauth2/authorization',\r\n            redirectUri: window.location.origin,\r\n            requiredUrlParams: ['state'],\r\n            scope: ['r_emailaddress'],\r\n            scopeDelimiter: ' ',\r\n            state: 'STATE',\r\n            type: '2.0',\r\n            popupOptions: {width: 527, height: 582}\r\n        },\r\n        twitter: {\r\n            name: 'twitter',\r\n            url: '/auth/twitter',\r\n            authorizationEndpoint: 'https://api.twitter.com/oauth/authenticate',\r\n            redirectUri: window.location.origin,\r\n            type: '1.0',\r\n            popupOptions: {width: 495, height: 645}\r\n        },\r\n        twitch: {\r\n            name: 'twitch',\r\n            url: '/auth/twitch',\r\n            authorizationEndpoint: 'https://api.twitch.tv/kraken/oauth2/authorize',\r\n            redirectUri: window.location.origin,\r\n            requiredUrlParams: ['scope'],\r\n            scope: ['user_read'],\r\n            scopeDelimiter: ' ',\r\n            display: 'popup',\r\n            type: '2.0',\r\n            popupOptions: {width: 500, height: 560}\r\n        },\r\n        live: {\r\n            name: 'live',\r\n            url: '/auth/live',\r\n            authorizationEndpoint: 'https://login.live.com/oauth20_authorize.srf',\r\n            redirectUri: window.location.origin,\r\n            requiredUrlParams: ['display', 'scope'],\r\n            scope: ['wl.emails'],\r\n            scopeDelimiter: ' ',\r\n            display: 'popup',\r\n            type: '2.0',\r\n            popupOptions: {width: 500, height: 560}\r\n        },\r\n        yahoo: {\r\n            name: 'yahoo',\r\n            url: '/auth/yahoo',\r\n            authorizationEndpoint: 'https://api.login.yahoo.com/oauth2/request_auth',\r\n            redirectUri: window.location.origin,\r\n            scope: [],\r\n            scopeDelimiter: ',',\r\n            type: '2.0',\r\n            popupOptions: {width: 559, height: 519}\r\n        },\r\n        bitbucket: {\r\n            name: 'bitbucket',\r\n            url: '/auth/bitbucket',\r\n            authorizationEndpoint: 'https://bitbucket.org/site/oauth2/authorize',\r\n            redirectUri: window.location.origin + '/',\r\n            requiredUrlParams: ['scope'],\r\n            scope: ['email'],\r\n            scopeDelimiter: ',',\r\n            type: '2.0',\r\n            popupOptions: {width: 1028, height: 529}\r\n        }\r\n    };\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Config} from './config';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n@Injectable()\r\nexport class Storage {\r\n    private store = {};\r\n    private isStorageAvailable: boolean;\r\n    constructor(private config: Config) {\r\n        this.isStorageAvailable = (() => {\r\n            try {\r\n                let supported = config.storageType in window && window[config.storageType] !== null;\r\n\r\n                if (supported) {\r\n                    let key = Math.random().toString(36).substring(7);\r\n                    (<any>window[this.config.storageType]).setItem(key, '');\r\n                    (<any>window[this.config.storageType]).removeItem(key);\r\n                }\r\n\r\n                return supported;\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        })();\r\n        if (!this.isStorageAvailable) {\r\n            console.warn(config.storageType + ' is not available.');\r\n        }\r\n    }\r\n    get(key: string) {\r\n        return this.isStorageAvailable ? window[this.config.storageType].getItem(key) : this.store[key];\r\n    }\r\n    set(key: string, value: string) {\r\n        return this.isStorageAvailable ? window[this.config.storageType].setItem(key, value) : this.store[key] = value;\r\n    }\r\n    remove(key: string) {\r\n        return this.isStorageAvailable ? window[this.config.storageType].removeItem(key) : delete this.store[key];\r\n    }\r\n}\r\n","/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subscriber} from 'rxjs/Subscriber';\r\nimport {Injectable} from '@angular/core';\r\nimport {Response} from '@angular/http';\r\nimport {Config} from './config';\r\nimport {Storage} from './storage';\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n@Injectable()\r\nexport class Shared {\r\n    tokenName = this.config.tokenPrefix ? [this.config.tokenPrefix, this.config.tokenName].join(this.config.tokenSeparator) : this.config.tokenName;\r\n    constructor(private storage: Storage, private config: Config) {}\r\n    getToken() {\r\n        return this.storage.get(this.tokenName);\r\n    }\r\n    getPayload() {\r\n        let token = this.getToken();\r\n\r\n        if (token && token.split('.').length === 3) {\r\n            try {\r\n                let base64Url = token.split('.')[1];\r\n                let base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n                return JSON.parse(decodeURIComponent(encodeURIComponent(window.atob(base64))));\r\n            } catch (e) {\r\n                return undefined;\r\n            }\r\n        }\r\n    }\r\n    setToken(response: string | Response) {\r\n        if (!response) {\r\n            console.warn('Can\\'t set token without passing a value');\r\n            return;\r\n        }\r\n\r\n        let token: string;\r\n        if (typeof response === 'string') {\r\n            token = response;\r\n        } else {\r\n            let accessToken = response && response.json() && (response.json().access_token || response.json().token);\r\n            let tokenObject: { data: any };\r\n\r\n            if (accessToken) {\r\n                if (typeof accessToken === 'object' && typeof accessToken.data === 'object') {\r\n                    tokenObject = accessToken;\r\n                } else if (typeof accessToken === 'string') {\r\n                    token = accessToken;\r\n                }\r\n            }\r\n\r\n            if (!token && tokenObject) {\r\n                let tokenRootData = this.config.tokenRoot &&\r\n                    this.config.tokenRoot.split('.').reduce(\r\n                        (o, x) => {\r\n                            return o[x];\r\n                        },\r\n                        tokenObject.data);\r\n                token = tokenRootData ? tokenRootData[this.config.tokenName] : tokenObject.data[this.config.tokenName];\r\n            }\r\n\r\n            if (!token) {\r\n                let tokenPath = this.config.tokenRoot ? this.config.tokenRoot + '.' + this.config.tokenName : this.config.tokenName;\r\n                console.warn('Expecting a token named \"' + tokenPath);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.storage.set(this.tokenName, token);\r\n    }\r\n    removeToken() {\r\n        this.storage.remove(this.tokenName);\r\n    }\r\n    isAuthenticated() {\r\n        let token = this.getToken();\r\n\r\n        // a token is present\r\n        if (token) {\r\n            // token with a valid JWT format XXX.YYY.ZZZ\r\n            if (token.split('.').length === 3) {\r\n                // could be a valid JWT or an access token with the same format\r\n                try {\r\n                    let base64Url = token.split('.')[1];\r\n                    let base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n                    let exp = JSON.parse(window.atob(base64)).exp;\r\n                    // jwt with an optional expiration claims\r\n                    if (exp) {\r\n                        let isExpired = Math.round(new Date().getTime() / 1000) >= exp;\r\n                        if (isExpired) {\r\n                            // fail: Expired token\r\n                            this.storage.remove(this.tokenName);\r\n                            return false;\r\n                        } else {\r\n                            // pass: Non-expired token\r\n                            return true;\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    // pass: Non-JWT token that looks like JWT\r\n                    return true;\r\n                }\r\n            }\r\n            // pass: All other tokens\r\n            return true;\r\n        }\r\n        // lail: No token at all\r\n        return false;\r\n    }\r\n    getExpirationDate() {\r\n        let payload = this.getPayload();\r\n        if (payload.exp && Math.round(new Date().getTime() / 1000) < payload.exp) {\r\n            let date = new Date(0);\r\n            date.setUTCSeconds(payload.exp);\r\n            return date;\r\n        }\r\n        return null;\r\n    }\r\n    logout(): Observable<any> {\r\n        this.storage.remove(this.tokenName);\r\n        return Observable.create((observer: Subscriber<any>) => {\r\n            observer.next();\r\n            observer.complete();\r\n        });\r\n    }\r\n    setStorageType(type) {\r\n        this.config.storageType = type;\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {assign} from './utils';\nimport {Config, IPopupOptions} from './config';\nimport 'rxjs/add/observable/interval';\nimport 'rxjs/add/observable/fromEvent';\nimport 'rxjs/add/operator/concatMap';\nimport 'rxjs/add/operator/take';\nimport 'rxjs/add/operator/takeWhile';\n\n\n/**\n * Created by Ron on 17/12/2015.\n */\n\n@Injectable()\nexport class Popup {\n    url = '';\n    popupWindow: Window = null;\n\n    private static prepareOptions(options: IPopupOptions) {\n        options = options || {};\n        let width = options.width || 500;\n        let height = options.height || 500;\n        return assign(\n            {\n                width: width,\n                height: height,\n                left: window.screenX + ((window.outerWidth - width) / 2),\n                top: window.screenY + ((window.outerHeight - height) / 2.5)\n            },\n            options);\n    }\n\n    private static stringifyOptions(options: Object) {\n        return Object.keys(options).map((key) => {\n            return key + '=' + options[key];\n        }).join(',');\n    }\n\n    private static parseQueryString(joinedKeyValue: string): any {\n        let key, value;\n        return joinedKeyValue.split('&').reduce(\n            (obj, keyValue) => {\n                if (keyValue) {\n                    value = keyValue.split('=');\n                    key = decodeURIComponent(value[0]);\n                    obj[key] = typeof value[1] !== 'undefined' ? decodeURIComponent(value[1]) : true;\n                }\n                return obj;\n            },\n            {});\n    }\n\n\n    constructor(private config: Config) {}\n    open(url: string, name: string, options: IPopupOptions) {\n        this.url = url;\n\n        let stringifiedOptions = Popup.stringifyOptions(Popup.prepareOptions(options));\n        let UA = window.navigator.userAgent;\n        let windowName = (this.config.cordova || UA.indexOf('CriOS') > -1) ? '_blank' : name;\n\n        this.popupWindow = window.open(url, windowName, stringifiedOptions);\n\n        window['popup'] = this.popupWindow;\n\n        if (this.popupWindow && this.popupWindow.focus) {\n            this.popupWindow.focus();\n        }\n\n        return this;\n    }\n\n    eventListener(redirectUri: string) {\n        return Observable\n            .fromEvent(this.popupWindow, 'loadstart')\n            .concatMap((event: Event & { url: string }) => {\n                if (!this.popupWindow || this.popupWindow.closed) {\n                    return ['Popup Window Closed'];\n                }\n                if (event.url.indexOf(redirectUri) !== 0) {\n                    return [];\n                }\n\n                let parser = document.createElement('a');\n                parser.href = event.url;\n\n                if (parser.search || parser.hash) {\n                    const queryParams = parser.search.substring(1).replace(/\\/$/, '');\n                    const hashParams = parser.hash.substring(1).replace(/\\/$/, '');\n                    const hash = Popup.parseQueryString(hashParams);\n                    const qs = Popup.parseQueryString(queryParams);\n                    const allParams = assign({}, qs, hash);\n\n                    this.popupWindow.close();\n\n                    if (allParams.error) {\n                        throw allParams.error;\n                    } else {\n                        return <any>[allParams];\n                    }\n                }\n                return [];\n            })\n            .take(1)\n            .takeWhile((response) => response !== 'Popup Window Closed');\n    }\n\n    pollPopup() {\n        return Observable\n            .interval(50)\n            .concatMap(() => {\n                if (!this.popupWindow || this.popupWindow.closed) {\n                    return ['Popup Window Closed'];\n                }\n                let documentOrigin = document.location.host;\n                let popupWindowOrigin = '';\n                try {\n                    popupWindowOrigin = this.popupWindow.location.host;\n                } catch (error) {\n                    // ignore DOMException: Blocked a frame with origin from accessing a cross-origin frame.\n                    //error instanceof DOMException && error.name === 'SecurityError'\n                }\n                if (popupWindowOrigin === documentOrigin && (this.popupWindow.location.search || this.popupWindow.location.hash)) {\n                    const queryParams = this.popupWindow.location.search.substring(1).replace(/\\/$/, '');\n                    const hashParams = this.popupWindow.location.hash.substring(1).replace(/[\\/$]/, '');\n                    const hash = Popup.parseQueryString(hashParams);\n                    const qs = Popup.parseQueryString(queryParams);\n                    this.popupWindow.close();\n                    const allParams = assign({}, qs, hash);\n                    if (allParams.error) {\n                        throw allParams.error;\n                    } else {\n                        return [allParams];\n                    }\n                }\n                return [];\n            })\n            .take(1)\n            .takeWhile((response) => response !== 'Popup Window Closed');\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {Popup} from './popup';\nimport {Http, Response} from '@angular/http';\nimport {joinUrl, assign} from './utils';\nimport {Config, IOauth1Options} from './config';\nimport {Observable} from 'rxjs/Observable';\nimport 'rxjs/add/operator/concatMap';\n\n/**\n * Created by Ron on 17/12/2015.\n */\n\n\n@Injectable()\nexport class Oauth1 {\n    private static base: IOauth1Options = {\n        url: null,\n        name: null,\n        popupOptions: null,\n        redirectUri: null,\n        authorizationEndpoint: null\n    };\n    private defaults: IOauth1Options;\n    constructor(private http: Http, private popup: Popup, private config: Config) {}\n    open(options?: IOauth1Options, userData?: any): Observable<Response> {\n        this.defaults = assign({}, Oauth1.base, options);\n        let popupWindow;\n        let serverUrl = this.config.baseUrl ? joinUrl(this.config.baseUrl, this.defaults.url) : this.defaults.url;\n\n        if (!this.config.cordova) {\n            popupWindow = this.popup.open('', this.defaults.name, this.defaults.popupOptions/*, this.defaults.redirectUri*/);\n        }\n\n        return this.http.post(serverUrl, JSON.stringify(this.defaults))\n            .concatMap((response: Response) => {\n                if (this.config.cordova) {\n                    popupWindow = this.popup.open(\n                        [this.defaults.authorizationEndpoint, this.buildQueryString(response.json())].join('?'),\n                        this.defaults.name,\n                        this.defaults.popupOptions);\n                } else {\n                    popupWindow.popupWindow.location =\n                        [this.defaults.authorizationEndpoint, this.buildQueryString(response.json())].join('?');\n                }\n\n                return this.config.cordova ? popupWindow.eventListener(this.defaults.redirectUri) : popupWindow.pollPopup();\n            })\n            .concatMap((response) => {\n                return this.exchangeForToken(response, userData);\n            });\n    }\n    private exchangeForToken(oauthData, userData?: any) {\n        let data = assign({}, oauthData, userData);\n        let exchangeForTokenUrl = this.config.baseUrl ? joinUrl(this.config.baseUrl, this.defaults.url) : this.defaults.url;\n        return this.http.post(exchangeForTokenUrl, data, { withCredentials: this.config.withCredentials });\n    }\n    private buildQueryString(obj: Object) {\n        return Object.keys(obj).map((key) => {\n            return encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]);\n        }).join('&');\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {Http} from '@angular/http';\nimport {Observable} from 'rxjs/Observable';\nimport {assign, joinUrl, merge, camelCase} from './utils';\nimport {Config, IOauth2Options} from './config';\nimport {Popup} from './popup';\nimport {Storage} from './storage';\nimport 'rxjs/add/operator/concatMap';\n\n/**\n * Created by Ron on 17/12/2015.\n */\n\n\n@Injectable()\nexport class Oauth2 {\n    private static base: IOauth2Options = {\n        defaultUrlParams: ['response_type', 'client_id', 'redirect_uri'],\n        responseType: 'code',\n        responseParams: {\n            code: 'code',\n            clientId: 'clientId',\n            redirectUri: 'redirectUri'\n        }\n    };\n\n    private defaults: IOauth2Options;\n\n    constructor(private http: Http,\n                private popup: Popup,\n                private storage: Storage,\n                private config: Config) {\n    }\n\n    open(options: IOauth2Options, userData?: any) {\n        this.defaults = merge(options, Oauth2.base);\n\n        let url;\n        let openPopup: Observable<any>;\n        let stateName = this.defaults.name + '_state';\n        let state = this.defaults.state;\n        if (typeof state === 'string') {\n            this.storage.set(stateName, state);\n        } else if (typeof state === 'function') {\n            this.storage.set(stateName, state());\n        }\n\n        url = [this.defaults.authorizationEndpoint, this.buildQueryString()].join('?');\n\n        if (this.config.cordova) {\n            openPopup = this.popup\n                .open(url, this.defaults.name, this.defaults.popupOptions/*, this.defaults.redirectUri*/)\n                .eventListener(this.defaults.redirectUri);\n        } else {\n            openPopup = this.popup\n                .open(url, this.defaults.name, this.defaults.popupOptions/*, this.defaults.redirectUri*/)\n                .pollPopup();\n        }\n\n        return openPopup\n            .concatMap((oauthData) => {\n                // when no server URL provided, return popup params as-is.\n                // this is for a scenario when someone wishes to opt out from\n                // satellizer's magic by doing authorization code exchange and\n                // saving a token manually.\n                if (this.defaults.responseType === 'token' || !this.defaults.url) {\n                    return oauthData;\n                }\n\n                if (oauthData.state && oauthData.state !== this.storage.get(stateName)) {\n                    throw 'OAuth \"state\" mismatch';\n                }\n\n                return this.exchangeForToken(oauthData, userData);\n            });\n    }\n\n    private exchangeForToken(oauthData: {code?, state?}, userData?: {}) {\n        let data: any = assign({}, this.defaults, oauthData, userData);\n\n        let exchangeForTokenUrl = this.config.baseUrl ? joinUrl(this.config.baseUrl, this.defaults.url) : this.defaults.url;\n\n        return this.http.post(exchangeForTokenUrl,  JSON.stringify(data), { withCredentials: this.config.withCredentials });\n    }\n\n    private buildQueryString() {\n        let keyValuePairs: string[][] = [];\n        let urlParams = ['defaultUrlParams', 'requiredUrlParams', 'optionalUrlParams'];\n\n        urlParams.forEach((params) => {\n            if (this.defaults[params]) {\n                (<string[]>this.defaults[params]).forEach((paramName) => {\n                    let camelizedName = camelCase(paramName);\n                    let paramValue = typeof this.defaults[paramName] === 'function' ?\n                        this.defaults[paramName]() :\n                        this.defaults[camelizedName];\n\n                    if (paramName === 'state') {\n                        let stateName = this.defaults.name + '_state';\n                        paramValue = encodeURIComponent(this.storage.get(stateName));\n                    }\n\n                    if (paramName === 'scope' && Array.isArray(paramValue)) {\n                        paramValue = paramValue.join(this.defaults.scopeDelimiter);\n\n                        if (this.defaults.scopePrefix) {\n                            paramValue = [this.defaults.scopePrefix, paramValue].join(this.defaults.scopeDelimiter);\n                        }\n                    }\n\n                    keyValuePairs.push([paramName, paramValue]);\n                });\n            }\n        });\n\n        return keyValuePairs.map(function(pair) {\n            return pair.join('=');\n        }).join('&');\n    }\n}\n","import {Injectable, Injector} from '@angular/core';\r\nimport {Oauth1} from './oauth1';\r\nimport {Oauth2} from './oauth2';\r\nimport {Shared} from './shared';\r\nimport {Http, Response, RequestOptionsArgs} from '@angular/http';\r\nimport {joinUrl} from './utils';\r\nimport {Config} from './config';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/do';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n@Injectable()\r\nexport class Oauth {\r\n    constructor(private http: Http,\r\n                private injector: Injector,\r\n                private shared: Shared,\r\n                private config: Config) {}\r\n    authenticate(name: string, userData?: any): Observable<Response> {\r\n        // var injector = Injector.resolveAndCreate([Oauth1, Oauth2]);\r\n        let provider: Oauth1 | Oauth2 = this.config.providers[name].type === '1.0' ? this.injector.get(Oauth1) : this.injector.get(Oauth2);\r\n        return provider.open(this.config.providers[name], userData || {})\r\n            .do((response: Response) => {\r\n                // this is for a scenario when someone wishes to opt out from\r\n                // satellizer's magic by doing authorization code exchange and\r\n                // saving a token manually.\r\n                if (this.config.providers[name].url) {\r\n                    this.shared.setToken(response);\r\n                }\r\n            });\r\n    }\r\n    unlink(provider: string, opts: RequestOptionsArgs) {\r\n        opts = opts || {};\r\n        let url = opts.url ? opts.url : joinUrl(this.config.baseUrl, this.config.unlinkUrl);\r\n        opts.body = JSON.stringify({ provider: provider }) || opts.body;\r\n        opts.method = opts.method || 'POST';\r\n        \r\n        return this.http.request(url, opts);\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {\r\n    Http,\r\n    RequestMethod,\r\n    Response,\r\n    RequestOptionsArgs,\r\n    Headers,\r\n    Request,\r\n    RequestOptions,\r\n    ConnectionBackend\r\n} from '@angular/http';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Config} from './config';\r\nimport {Shared} from './shared';\r\n/**\r\n * Created by Ron on 06/01/2016.\r\n */\r\n\r\n@Injectable()\r\nexport class JwtHttp extends Http {\r\n    constructor(_backend: ConnectionBackend,\r\n                _defaultOptions: RequestOptions,\r\n                private _shared: Shared,\r\n                private _config: Config) {\r\n        super(_backend, _defaultOptions);\r\n    }\r\n\r\n    request(url: string | Request, options?: RequestOptionsArgs): Observable<Response> {\r\n        if (url instanceof Request) {\r\n            url.headers = url.headers || new Headers();\r\n            this.setHeaders(url);\r\n        } else {\r\n            options = options || {};\r\n            this.setHeaders(options);\r\n        }\r\n        return super.request(url, options);\r\n    }\r\n\r\n    get(url: string, options?: RequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Get;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    post(url: string, body: string, options?: RequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Post;\r\n        options.body = body;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    put(url: string, body: string, options?: RequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Put;\r\n        options.body = body;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    delete(url: string, options?: RequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Delete;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    patch(url: string, body: string, options?: RequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Patch;\r\n        options.body = body;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    head(url: string, options?: RequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Head;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    private setHeaders(obj: { headers?: Headers, [index: string]: any }) {\r\n        obj.headers = obj.headers || new Headers();\r\n        if (this._config.defaultHeaders) {\r\n            Object.keys(this._config.defaultHeaders).forEach((defaultHeader) => {\r\n                if (!obj.headers.has(defaultHeader)) {\r\n                    obj.headers.set(defaultHeader, this._config.defaultHeaders[defaultHeader]);\r\n                }\r\n            });\r\n        }\r\n        if (this._shared.isAuthenticated()) {\r\n            obj.headers.set(this._config.authHeader, this._config.authToken + ' ' + this._shared.getToken());\r\n        }\r\n    }\r\n}\r\n"],"names":["target","_i","src","TypeError","Object","index","arguments","length","source","key","prototype","hasOwnProperty","call","baseUrl","url","test","joined","join","normalize","str","replace","obj1","obj2","result","i","merge","name","_","separator","letter","offset","toUpperCase","user","userOpts","opts","body","JSON","stringify","method","config","provide","Config","useValue","Storage","Shared","JwtHttp","Oauth","Popup","Oauth1","Oauth2","Local","Auth","this","facebook","authorizationEndpoint","redirectUri","window","location","origin","requiredUrlParams","scope","scopeDelimiter","display","type","popupOptions","width","height","google","optionalUrlParams","scopePrefix","github","instagram","linkedin","state","twitter","twitch","live","yahoo","bitbucket","keys","forEach","_this","provider","providers","prop","Injectable","isStorageAvailable","supported","storageType","Math","random","toString","substring","setItem","removeItem","e","console","warn","getItem","store","value","storage","tokenPrefix","tokenName","tokenSeparator","get","token","getToken","split","base64Url","base64","parse","decodeURIComponent","encodeURIComponent","atob","response","accessToken","json","access_token","tokenObject","data","tokenRootData","tokenRoot","reduce","o","x","tokenPath","set","remove","exp","isExpired","round","Date","getTime","payload","getPayload","date","setUTCSeconds","Observable","create","observer","next","complete","http","shared","fullOpts","getFullOpts","joinUrl","loginUrl","request","do","setToken","signupUrl","options","assign","left","screenX","outerWidth","top","screenY","outerHeight","map","joinedKeyValue","obj","keyValue","stringifiedOptions","stringifyOptions","prepareOptions","UA","navigator","userAgent","windowName","cordova","indexOf","popupWindow","open","focus","fromEvent","concatMap","event","closed","parser","document","createElement","href","search","hash","queryParams","hashParams","parseQueryString","qs","allParams","close","error","take","takeWhile","interval","documentOrigin","host","popupWindowOrigin","popup","userData","defaults","base","serverUrl","post","buildQueryString","eventListener","pollPopup","exchangeForToken","oauthData","exchangeForTokenUrl","withCredentials","openPopup","stateName","responseType","keyValuePairs","urlParams","params","paramName","camelizedName","camelCase","paramValue","Array","isArray","push","pair","defaultUrlParams","responseParams","code","clientId","injector","unlinkUrl","_backend","_defaultOptions","_shared","_config","_super","__extends","Request","headers","Headers","setHeaders","RequestMethod","Get","Post","Put","Delete","Patch","Head","defaultHeaders","defaultHeader","has","isAuthenticated","authHeader","authToken","Http","local","oauth","login","signup","logout","authenticate","unlink","removeToken","setStorageType","getExpirationDate"],"mappings":"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"}
{"version":3,"file":null,"sources":["../src/utils.ts","../src/local.service.ts","../src/config.service.ts","../src/storage.service.ts","../src/shared.service.ts","../src/jwt-http.service.ts","../src/popup.service.ts","../src/oauth1.service.ts","../src/oauth2.service.ts","../src/oauth.service.ts","../src/auth.service.ts","../src/ng2-ui-auth.module.ts"],"sourcesContent":["/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\nexport function assign(target: any, ...src: any[]): any {\r\n    if (target == null) {\r\n        throw new TypeError('Cannot convert undefined or null to object');\r\n    }\r\n\r\n    target = Object(target);\r\n    for (var index = 1; index < arguments.length; index++) {\r\n        var source = arguments[index];\r\n        if (source != null) {\r\n            for (var key in source) {\r\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n                    target[key] = source[key];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return target;\r\n}\r\n\r\nexport function joinUrl(baseUrl: string, url: string) {\r\n    if (/^(?:[a-z]+:)?\\/\\//i.test(url)) {\r\n        return url;\r\n    }\r\n\r\n    let joined = [baseUrl, url].join('/');\r\n\r\n    let normalize = function(str) {\r\n        return str\r\n            .replace(/[\\/]+/g, '/')\r\n            .replace(/\\/\\?/g, '?')\r\n            .replace(/\\/\\#/g, '#')\r\n            .replace(/\\:\\//g, '://');\r\n    };\r\n\r\n    return normalize(joined);\r\n}\r\n\r\nexport function merge(obj1, obj2) {\r\n    let result = {};\r\n    for (var i in obj1) {\r\n        if (obj1.hasOwnProperty(i)) {\r\n            if ((i in obj2) && (typeof obj1[i] === 'object') && (i !== null)) {\r\n                result[i] = merge(obj1[i], obj2[i]);\r\n            } else {\r\n                result[i] = obj1[i];\r\n            }\r\n        }\r\n    }\r\n    for (i in obj2) {\r\n        if (obj2.hasOwnProperty(i)) {\r\n            if (i in result) {\r\n                continue;\r\n            }\r\n            result[i] = obj2[i];\r\n        }\r\n\r\n    }\r\n    return result;\r\n}\r\n\r\nexport function camelCase(name) {\r\n    return name.replace(/([\\:\\-\\_]+(.))/g, function(_, separator, letter, offset) {\r\n        return offset ? letter.toUpperCase() : letter;\r\n    });\r\n}","import {Injectable} from '@angular/core';\r\nimport {SharedService} from './shared.service';\r\nimport {ConfigService} from './config.service';\r\nimport {RequestOptionsArgs, Response} from '@angular/http';\r\nimport {joinUrl} from './utils';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/do';\r\nimport {JwtHttp} from './jwt-http.service';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\nfunction getFullOpts(user: string | Object, userOpts?: RequestOptionsArgs) {\r\n    const opts = userOpts || {};\r\n    if (user) {\r\n        opts.body = typeof user === 'string' ? user : JSON.stringify(user);\r\n    }\r\n    opts.method = opts.method || 'POST';\r\n    return opts;\r\n}\r\n\r\n@Injectable()\r\nexport class LocalService {\r\n    constructor(private http: JwtHttp,\r\n                private shared: SharedService,\r\n                private config: ConfigService) {}\r\n\r\n    login(user: string | Object, opts?: RequestOptionsArgs): Observable<Response> {\r\n        const fullOpts = getFullOpts(user, opts);\r\n        const url = fullOpts.url ? fullOpts.url : joinUrl(this.config.baseUrl, this.config.loginUrl);\r\n\r\n        return this.http.request(url, fullOpts)\r\n            .do((response: Response) => this.shared.setToken(response));\r\n    }\r\n\r\n    signup(user: string | Object, opts?: RequestOptionsArgs): Observable<Response> {\r\n        const fullOpts = getFullOpts(user, opts);\r\n        const url = fullOpts.url ? fullOpts.url : joinUrl(this.config.baseUrl, this.config.signupUrl);\r\n\r\n        return this.http.request(url, getFullOpts(user, fullOpts));\r\n    }\r\n}","import {Injectable} from '@angular/core';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\nexport interface IPopupOptions {\r\n    width?: number;\r\n    height?: number;\r\n    left?: number;\r\n    top?: number;\r\n}\r\n\r\nexport interface IOauth1Options {\r\n    url?: string;\r\n    name?: string;\r\n    popupOptions?: IPopupOptions;\r\n    redirectUri?: string;\r\n    authorizationEndpoint?: string;\r\n    oauthType?: string;\r\n}\r\n\r\nexport interface IOauth2Options extends IOauth1Options {\r\n    state?: string| (() => string);\r\n    defaultUrlParams?: string[];\r\n    responseType?: string;\r\n    responseParams?: {\r\n        code?: string;\r\n        clientId?: string;\r\n        redirectUri?: string;\r\n    };\r\n    clientId?: string;\r\n    scopeDelimiter?: string;\r\n    scopePrefix?: string;\r\n\r\n    requiredUrlParams?: string[];\r\n    optionalUrlParams?: string[];\r\n    scope?: string[];\r\n    display?: string;\r\n}\r\n\r\nexport interface IProviders {\r\n    [provider: string]: IOauth2Options;\r\n}\r\n\r\nexport abstract class CustomConfig {\r\n    tokenRoot: string;\r\n    cordova: boolean;\r\n    baseUrl: string;\r\n    loginUrl: string;\r\n    signupUrl: string;\r\n    unlinkUrl: string;\r\n    tokenName: string;\r\n    tokenSeparator: string;\r\n    tokenPrefix: string;\r\n    authToken: string;\r\n    authHeader: string;\r\n    storageType: string;\r\n    providers: IProviders;\r\n    defaultHeaders: { [name: string]: string };\r\n    withCredentials: boolean;\r\n    autoRefreshToken: boolean;\r\n    refreshUrl: string;\r\n}\r\n\r\n@Injectable()\r\nexport class ConfigService {\r\n    constructor(config?: CustomConfig) {\r\n        Object.keys(config).forEach((key) => {\r\n            if (typeof config[key] === \"undefined\") {\r\n                return;\r\n            }\r\n            if (key !== 'providers') {\r\n                this[key] = config[key];\r\n            } else {\r\n                Object.keys(config[key]).forEach((provider) => {\r\n                    if (typeof this.providers[provider] === 'undefined') {\r\n                        this.providers[provider] = config.providers[provider];\r\n                    } else {\r\n                        Object.keys(config.providers[provider]).forEach((prop) => {\r\n                            this.providers[provider][prop] = config.providers[provider][prop];\r\n                        });\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    }\r\n    withCredentials = false;\r\n    tokenRoot = null;\r\n    cordova = false;\r\n    baseUrl = '/';\r\n    loginUrl = '/auth/login';\r\n    signupUrl = '/auth/signup';\r\n    unlinkUrl = '/auth/unlink/';\r\n    refreshUrl = '/auth/refresh';\r\n    tokenName = 'token';\r\n    tokenSeparator = '_';\r\n    tokenPrefix = 'ng2-ui-auth';\r\n    authHeader = 'Authorization';\r\n    authToken = 'Bearer';\r\n    storageType = 'localStorage';\r\n    defaultHeaders = null;\r\n    autoRefreshToken = false;\r\n    providers: IProviders = {\r\n        facebook: {\r\n            name: 'facebook',\r\n            url: '/auth/facebook',\r\n            authorizationEndpoint: 'https://www.facebook.com/v2.5/dialog/oauth',\r\n            redirectUri: window.location.origin + '/',\r\n            requiredUrlParams: ['display', 'scope'],\r\n            scope: ['email'],\r\n            scopeDelimiter: ',',\r\n            display: 'popup',\r\n            oauthType: '2.0',\r\n            popupOptions: {width: 580, height: 400}\r\n        },\r\n        google: {\r\n            name: 'google',\r\n            url: '/auth/google',\r\n            authorizationEndpoint: 'https://accounts.google.com/o/oauth2/auth',\r\n            redirectUri: window.location.origin,\r\n            requiredUrlParams: ['scope'],\r\n            optionalUrlParams: ['display', 'state'],\r\n            scope: ['profile', 'email'],\r\n            scopePrefix: 'openid',\r\n            scopeDelimiter: ' ',\r\n            display: 'popup',\r\n            oauthType: '2.0',\r\n            popupOptions: {width: 452, height: 633},\r\n            state: () => encodeURIComponent(Math.random().toString(36).substr(2)),\r\n        },\r\n        github: {\r\n            name: 'github',\r\n            url: '/auth/github',\r\n            authorizationEndpoint: 'https://github.com/login/oauth/authorize',\r\n            redirectUri: window.location.origin,\r\n            optionalUrlParams: ['scope'],\r\n            scope: ['user:email'],\r\n            scopeDelimiter: ' ',\r\n            oauthType: '2.0',\r\n            popupOptions: {width: 1020, height: 618}\r\n        },\r\n        instagram: {\r\n            name: 'instagram',\r\n            url: '/auth/instagram',\r\n            authorizationEndpoint: 'https://api.instagram.com/oauth/authorize',\r\n            redirectUri: window.location.origin,\r\n            requiredUrlParams: ['scope'],\r\n            scope: ['basic'],\r\n            scopeDelimiter: '+',\r\n            oauthType: '2.0'\r\n        },\r\n        linkedin: {\r\n            name: 'linkedin',\r\n            url: '/auth/linkedin',\r\n            authorizationEndpoint: 'https://www.linkedin.com/uas/oauth2/authorization',\r\n            redirectUri: window.location.origin,\r\n            requiredUrlParams: ['state'],\r\n            scope: ['r_emailaddress'],\r\n            scopeDelimiter: ' ',\r\n            state: 'STATE',\r\n            oauthType: '2.0',\r\n            popupOptions: {width: 527, height: 582}\r\n        },\r\n        twitter: {\r\n            name: 'twitter',\r\n            url: '/auth/twitter',\r\n            authorizationEndpoint: 'https://api.twitter.com/oauth/authenticate',\r\n            redirectUri: window.location.origin,\r\n            oauthType: '1.0',\r\n            popupOptions: {width: 495, height: 645}\r\n        },\r\n        twitch: {\r\n            name: 'twitch',\r\n            url: '/auth/twitch',\r\n            authorizationEndpoint: 'https://api.twitch.tv/kraken/oauth2/authorize',\r\n            redirectUri: window.location.origin,\r\n            requiredUrlParams: ['scope'],\r\n            scope: ['user_read'],\r\n            scopeDelimiter: ' ',\r\n            display: 'popup',\r\n            oauthType: '2.0',\r\n            popupOptions: {width: 500, height: 560}\r\n        },\r\n        live: {\r\n            name: 'live',\r\n            url: '/auth/live',\r\n            authorizationEndpoint: 'https://login.live.com/oauth20_authorize.srf',\r\n            redirectUri: window.location.origin,\r\n            requiredUrlParams: ['display', 'scope'],\r\n            scope: ['wl.emails'],\r\n            scopeDelimiter: ' ',\r\n            display: 'popup',\r\n            oauthType: '2.0',\r\n            popupOptions: {width: 500, height: 560}\r\n        },\r\n        yahoo: {\r\n            name: 'yahoo',\r\n            url: '/auth/yahoo',\r\n            authorizationEndpoint: 'https://api.login.yahoo.com/oauth2/request_auth',\r\n            redirectUri: window.location.origin,\r\n            scope: [],\r\n            scopeDelimiter: ',',\r\n            oauthType: '2.0',\r\n            popupOptions: {width: 559, height: 519}\r\n        },\r\n        bitbucket: {\r\n            name: 'bitbucket',\r\n            url: '/auth/bitbucket',\r\n            authorizationEndpoint: 'https://bitbucket.org/site/oauth2/authorize',\r\n            redirectUri: window.location.origin + '/',\r\n            requiredUrlParams: ['scope'],\r\n            scope: ['email'],\r\n            scopeDelimiter: ',',\r\n            oauthType: '2.0',\r\n            popupOptions: {width: 1028, height: 529}\r\n        },\r\n        spotify: {\r\n            name: 'spotify',\r\n            url: '/auth/spotify',\r\n            authorizationEndpoint: 'https://accounts.spotify.com/authorize',\r\n            redirectUri: window.location.origin,\r\n            optionalUrlParams: ['state'],\r\n            requiredUrlParams: ['scope'],\r\n            scope: ['user-read-email'],\r\n            scopePrefix: '',\r\n            scopeDelimiter: ',',\r\n            oauthType: '2.0',\r\n            popupOptions: { width: 500, height: 530 },\r\n            state: () => encodeURIComponent(Math.random().toString(36).substr(2))\r\n        }\r\n    };\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {ConfigService} from './config.service';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n@Injectable()\r\nexport class StorageService {\r\n    private store = {};\r\n    private isStorageAvailable: boolean;\r\n    constructor(private config: ConfigService) {\r\n        this.isStorageAvailable = (() => {\r\n            try {\r\n                let supported = config.storageType in window && window[config.storageType] !== null;\r\n\r\n                if (supported) {\r\n                    let key = Math.random().toString(36).substring(7);\r\n                    (<any>window[this.config.storageType]).setItem(key, '');\r\n                    (<any>window[this.config.storageType]).removeItem(key);\r\n                }\r\n\r\n                return supported;\r\n            } catch (e) {\r\n                return false;\r\n            }\r\n        })();\r\n        if (!this.isStorageAvailable) {\r\n            console.warn(config.storageType + ' is not available.');\r\n        }\r\n    }\r\n    get(key: string) {\r\n        return this.isStorageAvailable ? window[this.config.storageType].getItem(key) : this.store[key];\r\n    }\r\n    set(key: string, value: string) {\r\n        return this.isStorageAvailable ? window[this.config.storageType].setItem(key, value) : this.store[key] = value;\r\n    }\r\n    remove(key: string) {\r\n        return this.isStorageAvailable ? window[this.config.storageType].removeItem(key) : delete this.store[key];\r\n    }\r\n}\r\n","/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subscriber} from 'rxjs/Subscriber';\r\nimport {Injectable} from '@angular/core';\r\nimport {Response} from '@angular/http';\r\nimport {ConfigService} from './config.service';\r\nimport {StorageService} from './storage.service';\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n@Injectable()\r\nexport class SharedService {\r\n    tokenName = this.config.tokenPrefix ? [this.config.tokenPrefix, this.config.tokenName].join(this.config.tokenSeparator) : this.config.tokenName;\r\n    constructor(private storage: StorageService, private config: ConfigService) {}\r\n    getToken() {\r\n        return this.storage.get(this.tokenName);\r\n    }\r\n    getPayload() {\r\n        let token = this.getToken();\r\n\r\n        if (token && token.split('.').length === 3) {\r\n            try {\r\n                let base64Url = token.split('.')[1];\r\n                let base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n                return JSON.parse(decodeURIComponent(encodeURIComponent(window.atob(base64))));\r\n            } catch (e) {\r\n                return undefined;\r\n            }\r\n        }\r\n    }\r\n    setToken(response: string | Response) {\r\n        if (!response) {\r\n            console.warn('Can\\'t set token without passing a value');\r\n            return;\r\n        }\r\n\r\n        let token: string;\r\n        if (typeof response === 'string') {\r\n            token = response;\r\n        } else {\r\n            let accessToken = response && response.json() && (response.json().access_token || response.json().token);\r\n            let tokenObject: { data: any };\r\n\r\n            if (accessToken) {\r\n                if (typeof accessToken === 'object' && typeof accessToken.data === 'object') {\r\n                    tokenObject = <{data: any}>accessToken;\r\n                } else if (typeof accessToken === 'string') {\r\n                    token = accessToken;\r\n                }\r\n            }\r\n\r\n            if (!token && tokenObject) {\r\n                let tokenRootData = this.config.tokenRoot &&\r\n                    this.config.tokenRoot.split('.').reduce(\r\n                        (o, x) => {\r\n                            return o[x];\r\n                        },\r\n                        tokenObject.data);\r\n                token = tokenRootData ? tokenRootData[this.config.tokenName] : tokenObject.data[this.config.tokenName];\r\n            }\r\n\r\n            if (!token) {\r\n                let tokenPath = this.config.tokenRoot ? this.config.tokenRoot + '.' + this.config.tokenName : this.config.tokenName;\r\n                console.warn('Expecting a token named \"' + tokenPath);\r\n                return;\r\n            }\r\n        }\r\n\r\n        this.storage.set(this.tokenName, token);\r\n    }\r\n    removeToken() {\r\n        this.storage.remove(this.tokenName);\r\n    }\r\n    isAuthenticated() {\r\n        let token = this.getToken();\r\n\r\n        // a token is present\r\n        if (token) {\r\n            // token with a valid JWT format XXX.YYY.ZZZ\r\n            if (token.split('.').length === 3) {\r\n                // could be a valid JWT or an access token with the same format\r\n                try {\r\n                    let base64Url = token.split('.')[1];\r\n                    let base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n                    let exp = JSON.parse(window.atob(base64)).exp;\r\n                    // jwt with an optional expiration claims\r\n                    if (exp) {\r\n                        let isExpired = Math.round(new Date().getTime() / 1000) >= exp;\r\n                        if (isExpired) {\r\n                            // fail: Expired token\r\n                            this.storage.remove(this.tokenName);\r\n                            return false;\r\n                        } else {\r\n                            // pass: Non-expired token\r\n                            return true;\r\n                        }\r\n                    }\r\n                } catch (e) {\r\n                    // pass: Non-JWT token that looks like JWT\r\n                    return true;\r\n                }\r\n            }\r\n            // pass: All other tokens\r\n            return true;\r\n        }\r\n        // lail: No token at all\r\n        return false;\r\n    }\r\n    getExpirationDate() {\r\n        let payload = this.getPayload();\r\n        if (payload.exp && Math.round(new Date().getTime() / 1000) < payload.exp) {\r\n            let date = new Date(0);\r\n            date.setUTCSeconds(payload.exp);\r\n            return date;\r\n        }\r\n        return null;\r\n    }\r\n    logout(): Observable<any> {\r\n        this.storage.remove(this.tokenName);\r\n        return Observable.create((observer: Subscriber<any>) => {\r\n            observer.next();\r\n            observer.complete();\r\n        });\r\n    }\r\n    setStorageType(type) {\r\n        this.config.storageType = type;\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Http, RequestMethod, Response, RequestOptionsArgs, Headers, Request, RequestOptions, ConnectionBackend} from '@angular/http';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/switchMap';\r\nimport {ConfigService} from './config.service';\r\nimport {SharedService} from './shared.service';\r\n/**\r\n * Created by Ron on 06/01/2016.\r\n */\r\n\r\nexport interface JwtRequestOptionsArgs extends RequestOptionsArgs {\r\n    autoRefreshToken?: boolean\r\n}\r\n\r\n@Injectable()\r\nexport class JwtHttp extends Http {\r\n    constructor(_backend: ConnectionBackend,\r\n                _defaultOptions: RequestOptions,\r\n                private _shared: SharedService,\r\n                private _config: ConfigService) {\r\n        super(_backend, _defaultOptions);\r\n    }\r\n\r\n    request(url: string | Request, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        //if the token is expired the \"getExpirationDate\" function returns null\r\n        if (this._shared.getToken() && !this._shared.getExpirationDate() &&\r\n            options.autoRefreshToken ||\r\n            typeof options.autoRefreshToken === 'undefined' && this._config.autoRefreshToken) {\r\n            return this.refreshToken()\r\n                .switchMap(() => this.actualRequest(url, options));\r\n        }\r\n        return this.actualRequest(url, options);\r\n    }\r\n\r\n    get(url: string, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Get;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    post(url: string, body: string, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Post;\r\n        options.body = body;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    put(url: string, body: string, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Put;\r\n        options.body = body;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    delete(url: string, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Delete;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    patch(url: string, body: string, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Patch;\r\n        options.body = body;\r\n        return this.request(url, options);\r\n    }\r\n\r\n    head(url: string, options?: JwtRequestOptionsArgs): Observable<Response> {\r\n        options = options || {};\r\n        options.method = RequestMethod.Head;\r\n        return this.request(url, options);\r\n    }\r\n\r\n\r\n    refreshToken(): Observable<Response> {\r\n        const authHeader = new Headers();\r\n        authHeader.append(this._config.authHeader, (this._config.authToken + ' ' + this._shared.getToken()));\r\n        return super\r\n            .get(this._config.refreshUrl, {\r\n                headers: authHeader\r\n            })\r\n            .do((res: Response) => this._shared.setToken(res));\r\n    }\r\n\r\n    private actualRequest(url: string | Request, options?: JwtRequestOptionsArgs) {\r\n        if (url instanceof Request) {\r\n            url.headers = url.headers || new Headers();\r\n            this.setHeaders(url);\r\n        } else {\r\n            options = options || {};\r\n            this.setHeaders(options);\r\n        }\r\n        return super.request(url, options);\r\n    }\r\n\r\n    private setHeaders(obj: { headers?: Headers, [index: string]: any }) {\r\n        obj.headers = obj.headers || new Headers();\r\n        if (this._config.defaultHeaders) {\r\n            Object.keys(this._config.defaultHeaders).forEach((defaultHeader) => {\r\n                if (!obj.headers.has(defaultHeader)) {\r\n                    obj.headers.set(defaultHeader, this._config.defaultHeaders[defaultHeader]);\r\n                }\r\n            });\r\n        }\r\n        if (this._shared.isAuthenticated()) {\r\n            obj.headers.set(this._config.authHeader, this._config.authToken + ' ' + this._shared.getToken());\r\n        }\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {assign} from './utils';\r\nimport {ConfigService, IPopupOptions} from './config.service';\r\nimport 'rxjs/add/observable/interval';\r\nimport 'rxjs/add/observable/fromEvent';\r\nimport 'rxjs/add/operator/concatMap';\r\nimport 'rxjs/add/operator/take';\r\nimport 'rxjs/add/operator/takeWhile';\r\n\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n@Injectable()\r\nexport class PopupService {\r\n    url = '';\r\n    popupWindow: Window = null;\r\n\r\n    private static prepareOptions(options: IPopupOptions) {\r\n        options = options || {};\r\n        let width = options.width || 500;\r\n        let height = options.height || 500;\r\n        return assign(\r\n            {\r\n                width: width,\r\n                height: height,\r\n                left: window.screenX + ((window.outerWidth - width) / 2),\r\n                top: window.screenY + ((window.outerHeight - height) / 2.5)\r\n            },\r\n            options);\r\n    }\r\n\r\n    private static stringifyOptions(options: Object) {\r\n        return Object.keys(options).map((key) => {\r\n            return key + '=' + options[key];\r\n        }).join(',');\r\n    }\r\n\r\n    private static parseQueryString(joinedKeyValue: string): any {\r\n        let key, value;\r\n        return joinedKeyValue.split('&').reduce(\r\n            (obj, keyValue) => {\r\n                if (keyValue) {\r\n                    value = keyValue.split('=');\r\n                    key = decodeURIComponent(value[0]);\r\n                    obj[key] = typeof value[1] !== 'undefined' ? decodeURIComponent(value[1]) : true;\r\n                }\r\n                return obj;\r\n            },\r\n            {});\r\n    }\r\n\r\n\r\n    constructor(private config: ConfigService) {}\r\n    open(url: string, name: string, options: IPopupOptions) {\r\n        this.url = url;\r\n\r\n        let stringifiedOptions = PopupService.stringifyOptions(PopupService.prepareOptions(options));\r\n        let UA = window.navigator.userAgent;\r\n        let windowName = (this.config.cordova || UA.indexOf('CriOS') > -1) ? '_blank' : name;\r\n\r\n        this.popupWindow = window.open(url, windowName, stringifiedOptions);\r\n\r\n        window['popup'] = this.popupWindow;\r\n\r\n        if (this.popupWindow && this.popupWindow.focus) {\r\n            this.popupWindow.focus();\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    eventListener(redirectUri: string) {\r\n        return Observable\r\n            .fromEvent<Event>(this.popupWindow, 'loadstart')\r\n            .concatMap((event: Event & { url: string }) => {\r\n                if (!this.popupWindow || this.popupWindow.closed) {\r\n                    return ['Popup Window Closed'];\r\n                }\r\n                if (event.url.indexOf(redirectUri) !== 0) {\r\n                    return [];\r\n                }\r\n\r\n                let parser = document.createElement('a');\r\n                parser.href = event.url;\r\n\r\n                if (parser.search || parser.hash) {\r\n                    const queryParams = parser.search.substring(1).replace(/\\/$/, '');\r\n                    const hashParams = parser.hash.substring(1).replace(/\\/$/, '');\r\n                    const hash = PopupService.parseQueryString(hashParams);\r\n                    const qs = PopupService.parseQueryString(queryParams);\r\n                    const allParams = assign({}, qs, hash);\r\n\r\n                    this.popupWindow.close();\r\n\r\n                    if (allParams.error) {\r\n                        throw allParams.error;\r\n                    } else {\r\n                        return <any>[allParams];\r\n                    }\r\n                }\r\n                return [];\r\n            })\r\n            .take(1)\r\n            .takeWhile((response) => response !== 'Popup Window Closed');\r\n    }\r\n\r\n    pollPopup() {\r\n        return Observable\r\n            .interval(50)\r\n            .concatMap(() => {\r\n                if (!this.popupWindow || this.popupWindow.closed) {\r\n                    return ['Popup Window Closed'];\r\n                }\r\n                let documentOrigin = document.location.host;\r\n                let popupWindowOrigin = '';\r\n                try {\r\n                    popupWindowOrigin = this.popupWindow.location.host;\r\n                } catch (error) {\r\n                    // ignore DOMException: Blocked a frame with origin from accessing a cross-origin frame.\r\n                    //error instanceof DOMException && error.name === 'SecurityError'\r\n                }\r\n                if (popupWindowOrigin === documentOrigin && (this.popupWindow.location.search || this.popupWindow.location.hash)) {\r\n                    const queryParams = this.popupWindow.location.search.substring(1).replace(/\\/$/, '');\r\n                    const hashParams = this.popupWindow.location.hash.substring(1).replace(/[\\/$]/, '');\r\n                    const hash = PopupService.parseQueryString(hashParams);\r\n                    const qs = PopupService.parseQueryString(queryParams);\r\n                    this.popupWindow.close();\r\n                    const allParams = assign({}, qs, hash);\r\n                    if (allParams.error) {\r\n                        throw allParams.error;\r\n                    } else {\r\n                        return [allParams];\r\n                    }\r\n                }\r\n                return [];\r\n            })\r\n            .take(1)\r\n            .takeWhile((response) => response !== 'Popup Window Closed');\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {PopupService} from './popup.service';\r\nimport {Response} from '@angular/http';\r\nimport {joinUrl, assign} from './utils';\r\nimport {ConfigService, IOauth1Options} from './config.service';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/concatMap';\r\nimport {JwtHttp} from './jwt-http.service';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n\r\n@Injectable()\r\nexport class Oauth1Service {\r\n    private static base: IOauth1Options = {\r\n        url: null,\r\n        name: null,\r\n        popupOptions: null,\r\n        redirectUri: null,\r\n        authorizationEndpoint: null\r\n    };\r\n    private defaults: IOauth1Options;\r\n    constructor(private http: JwtHttp, private popup: PopupService, private config: ConfigService) {}\r\n    open(options?: IOauth1Options, userData?: any): Observable<Response> {\r\n        this.defaults = assign({}, Oauth1Service.base, options);\r\n        let popupWindow;\r\n        let serverUrl = this.config.baseUrl ? joinUrl(this.config.baseUrl, this.defaults.url) : this.defaults.url;\r\n\r\n        if (!this.config.cordova) {\r\n            popupWindow = this.popup.open('', this.defaults.name, this.defaults.popupOptions/*, this.defaults.redirectUri*/);\r\n        }\r\n\r\n        return this.http.post(serverUrl, JSON.stringify(this.defaults))\r\n            .concatMap((response: Response) => {\r\n                if (this.config.cordova) {\r\n                    popupWindow = this.popup.open(\r\n                        [this.defaults.authorizationEndpoint, this.buildQueryString(response.json())].join('?'),\r\n                        this.defaults.name,\r\n                        this.defaults.popupOptions);\r\n                } else {\r\n                    popupWindow.popupWindow.location =\r\n                        [this.defaults.authorizationEndpoint, this.buildQueryString(response.json())].join('?');\r\n                }\r\n\r\n                return this.config.cordova ? popupWindow.eventListener(this.defaults.redirectUri) : popupWindow.pollPopup();\r\n            })\r\n            .concatMap((response) => {\r\n                return this.exchangeForToken(response, userData);\r\n            });\r\n    }\r\n    private exchangeForToken(oauthData, userData?: any) {\r\n        let data = assign({}, oauthData, userData);\r\n        let exchangeForTokenUrl = this.config.baseUrl ? joinUrl(this.config.baseUrl, this.defaults.url) : this.defaults.url;\r\n        return this.http.post(exchangeForTokenUrl, data, { withCredentials: this.config.withCredentials });\r\n    }\r\n    private buildQueryString(obj: Object) {\r\n        return Object.keys(obj).map((key) => {\r\n            return encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]);\r\n        }).join('&');\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {assign, joinUrl, merge, camelCase} from './utils';\r\nimport {ConfigService, IOauth2Options} from './config.service';\r\nimport {PopupService} from './popup.service';\r\nimport {StorageService} from './storage.service';\r\nimport 'rxjs/add/operator/concatMap';\r\nimport {JwtHttp} from './jwt-http.service';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n\r\n@Injectable()\r\nexport class Oauth2Service {\r\n    private static base: IOauth2Options = {\r\n        defaultUrlParams: ['response_type', 'client_id', 'redirect_uri'],\r\n        responseType: 'code',\r\n        responseParams: {\r\n            code: 'code',\r\n            clientId: 'clientId',\r\n            redirectUri: 'redirectUri'\r\n        }\r\n    };\r\n\r\n    private defaults: IOauth2Options;\r\n\r\n    constructor(private http: JwtHttp,\r\n                private popup: PopupService,\r\n                private storage: StorageService,\r\n                private config: ConfigService) {\r\n    }\r\n\r\n    open(options: IOauth2Options, userData?: any) {\r\n        this.defaults = merge(options, Oauth2Service.base);\r\n\r\n        let url;\r\n        let openPopup: Observable<any>;\r\n        let stateName = this.defaults.name + '_state';\r\n        let state = this.defaults.state;\r\n        if (typeof state === 'string') {\r\n            this.storage.set(stateName, state);\r\n        } else if (typeof state === 'function') {\r\n            this.storage.set(stateName, state());\r\n        }\r\n\r\n        url = [this.defaults.authorizationEndpoint, this.buildQueryString()].join('?');\r\n\r\n        if (this.config.cordova) {\r\n            openPopup = this.popup\r\n                .open(url, this.defaults.name, this.defaults.popupOptions/*, this.defaults.redirectUri*/)\r\n                .eventListener(this.defaults.redirectUri);\r\n        } else {\r\n            openPopup = this.popup\r\n                .open(url, this.defaults.name, this.defaults.popupOptions/*, this.defaults.redirectUri*/)\r\n                .pollPopup();\r\n        }\r\n\r\n        return openPopup\r\n            .concatMap((oauthData) => {\r\n                // when no server URL provided, return popup params as-is.\r\n                // this is for a scenario when someone wishes to opt out from\r\n                // satellizer's magic by doing authorization code exchange and\r\n                // saving a token manually.\r\n                if (this.defaults.responseType === 'token' || !this.defaults.url) {\r\n                    return oauthData;\r\n                }\r\n\r\n                if (oauthData.state && oauthData.state !== this.storage.get(stateName)) {\r\n                    throw 'OAuth \"state\" mismatch';\r\n                }\r\n\r\n                return this.exchangeForToken(oauthData, userData);\r\n            });\r\n    }\r\n\r\n    private exchangeForToken(oauthData: {code?, state?}, userData?: {}) {\r\n        let data: any = assign({}, this.defaults, oauthData, userData);\r\n\r\n        let exchangeForTokenUrl = this.config.baseUrl ? joinUrl(this.config.baseUrl, this.defaults.url) : this.defaults.url;\r\n\r\n        return this.http.post(exchangeForTokenUrl,  JSON.stringify(data), { withCredentials: this.config.withCredentials });\r\n    }\r\n\r\n    private buildQueryString() {\r\n        let keyValuePairs: string[][] = [];\r\n        let urlParams = ['defaultUrlParams', 'requiredUrlParams', 'optionalUrlParams'];\r\n\r\n        urlParams.forEach((params) => {\r\n            if (this.defaults[params]) {\r\n                (<string[]>this.defaults[params]).forEach((paramName) => {\r\n                    let camelizedName = camelCase(paramName);\r\n                    let paramValue = typeof this.defaults[paramName] === 'function' ?\r\n                        this.defaults[paramName]() :\r\n                        this.defaults[camelizedName];\r\n\r\n                    if (paramName === 'state') {\r\n                        let stateName = this.defaults.name + '_state';\r\n                        paramValue = encodeURIComponent(this.storage.get(stateName));\r\n                    }\r\n\r\n                    if (paramName === 'scope' && Array.isArray(paramValue)) {\r\n                        paramValue = paramValue.join(this.defaults.scopeDelimiter);\r\n\r\n                        if (this.defaults.scopePrefix) {\r\n                            paramValue = [this.defaults.scopePrefix, paramValue].join(this.defaults.scopeDelimiter);\r\n                        }\r\n                    }\r\n\r\n                    keyValuePairs.push([paramName, paramValue]);\r\n                });\r\n            }\r\n        });\r\n\r\n        return keyValuePairs.map(function(pair) {\r\n            return pair.join('=');\r\n        }).join('&');\r\n    }\r\n}\r\n","import {Injectable, Injector} from '@angular/core';\r\nimport {Oauth1Service} from './oauth1.service';\r\nimport {Oauth2Service} from './oauth2.service';\r\nimport {SharedService} from './shared.service';\r\nimport {Response, RequestOptionsArgs} from '@angular/http';\r\nimport {joinUrl} from './utils';\r\nimport {ConfigService} from './config.service';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/do';\r\nimport {JwtHttp} from './jwt-http.service';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n@Injectable()\r\nexport class OauthService {\r\n    constructor(private http: JwtHttp,\r\n                private injector: Injector,\r\n                private shared: SharedService,\r\n                private config: ConfigService) {}\r\n    authenticate(name: string, userData?: any): Observable<Response> {\r\n        // var injector = Injector.resolveAndCreate([Oauth1, Oauth2]);\r\n        let provider: Oauth1Service | Oauth2Service = this.config.providers[name].oauthType === '1.0' ? this.injector.get(Oauth1Service) : this.injector.get(Oauth2Service);\r\n        return provider.open(this.config.providers[name], userData || {})\r\n            .do((response: Response) => {\r\n                // this is for a scenario when someone wishes to opt out from\r\n                // satellizer's magic by doing authorization code exchange and\r\n                // saving a token manually.\r\n                if (this.config.providers[name].url) {\r\n                    this.shared.setToken(response);\r\n                }\r\n            });\r\n    }\r\n    unlink(provider: string, opts: RequestOptionsArgs) {\r\n        opts = opts || {};\r\n        let url = opts.url ? opts.url : joinUrl(this.config.baseUrl, this.config.unlinkUrl);\r\n        opts.body = JSON.stringify({ provider: provider }) || opts.body;\r\n        opts.method = opts.method || 'POST';\r\n        \r\n        return this.http.request(url, opts);\r\n    }\r\n}\r\n","import {Injectable} from '@angular/core';\r\nimport {Response, RequestOptionsArgs} from '@angular/http';\r\nimport {SharedService} from './shared.service';\r\nimport {LocalService} from './local.service';\r\nimport {OauthService} from './oauth.service';\r\nimport {Observable} from 'rxjs/Observable';\r\n\r\n/**\r\n * Created by Ron on 17/12/2015.\r\n */\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n    constructor(private shared: SharedService,\r\n                private local: LocalService,\r\n                private oauth: OauthService) {\r\n    }\r\n\r\n    login(user, opts?: RequestOptionsArgs): Observable<Response> {\r\n        return this.local.login(user, opts);\r\n    }\r\n\r\n    signup(user, opts?: RequestOptionsArgs): Observable<Response> {\r\n        return this.local.signup(user, opts);\r\n    }\r\n\r\n    logout(): Observable<void> {\r\n        return this.shared.logout();\r\n    }\r\n\r\n    authenticate(name: string, userData?: any): Observable<Response> {\r\n        return this.oauth.authenticate(name, userData);\r\n    }\r\n\r\n    link(name: string, userData?: any): Observable<Response> {\r\n        return this.oauth.authenticate(name, userData);\r\n    }\r\n\r\n    unlink(provider: string, opts: RequestOptionsArgs): Observable<Response> {\r\n        return this.oauth.unlink(provider, opts);\r\n    }\r\n\r\n    isAuthenticated(): boolean {\r\n        return this.shared.isAuthenticated();\r\n    }\r\n\r\n    getToken(): string {\r\n        return this.shared.getToken();\r\n    }\r\n\r\n    setToken(token: string): void {\r\n        this.shared.setToken(token);\r\n    }\r\n\r\n    removeToken(): void {\r\n        this.shared.removeToken();\r\n    }\r\n\r\n    getPayload(): any {\r\n        return this.shared.getPayload();\r\n    }\r\n\r\n    setStorageType(type: string): void {\r\n        this.shared.setStorageType(type);\r\n    }\r\n\r\n    getExpirationDate(): Date {\r\n        return this.shared.getExpirationDate();\r\n    }\r\n}\r\n","/**\r\n * Created by Ron on 25/12/2015.\r\n */\r\n\r\nimport {CustomConfig, ConfigService} from './config.service';\r\nimport {SharedService} from './shared.service';\r\nimport {JwtHttp} from './jwt-http.service';\r\nimport {OauthService} from './oauth.service';\r\nimport {PopupService} from './popup.service';\r\nimport {Oauth1Service} from './oauth1.service';\r\nimport {Oauth2Service} from './oauth2.service';\r\nimport {LocalService} from './local.service';\r\nimport {AuthService} from './auth.service';\r\nimport {StorageService} from './storage.service';\r\nimport {ModuleWithProviders, NgModule, Injector} from '@angular/core';\r\nimport {HttpModule, RequestOptions, XHRBackend} from '@angular/http';\r\nimport {Type} from '@angular/core/src/type';\r\nexport {LocalService} from './local.service';\r\nexport {Oauth2Service} from './oauth2.service';\r\nexport {Oauth1Service} from './oauth1.service';\r\nexport {PopupService} from './popup.service';\r\nexport {OauthService} from './oauth.service';\r\nexport {JwtHttp} from './jwt-http.service';\r\nexport {SharedService} from './shared.service';\r\nexport {StorageService} from './storage.service';\r\nexport {AuthService} from './auth.service';\r\nexport {ConfigService, CustomConfig} from './config.service';\r\n\r\n@NgModule({\r\n    imports: [HttpModule]\r\n})\r\nexport class Ng2UiAuthModule {\r\n    static getWithConfig(config: Type<CustomConfig>): ModuleWithProviders {\r\n        return {\r\n            ngModule: Ng2UiAuthModule,\r\n            providers: [\r\n                {provide: CustomConfig, useClass: config },\r\n                {provide: ConfigService, useClass: ConfigService, deps: [CustomConfig] },\r\n                {provide: StorageService, useClass: StorageService, deps: [ConfigService]},\r\n                {provide: SharedService,  useClass: SharedService, deps: [StorageService, ConfigService]},\r\n                {provide: JwtHttp, useClass: JwtHttp, deps: [XHRBackend, RequestOptions, SharedService, ConfigService]},\r\n                {provide: OauthService,  useClass: OauthService, deps: [JwtHttp, Injector, SharedService, ConfigService]} ,\r\n                {provide: PopupService,  useClass: PopupService, deps: [ConfigService]},\r\n                {provide: Oauth1Service,  useClass: Oauth1Service, deps: [JwtHttp, PopupService, ConfigService]} ,\r\n                {provide: Oauth2Service,  useClass: Oauth2Service, deps: [JwtHttp, PopupService, StorageService, ConfigService]} ,\r\n                {provide: LocalService,  useClass: LocalService, deps: [JwtHttp, SharedService, ConfigService]} ,\r\n                {provide: AuthService,  useClass: AuthService, deps: [SharedService, LocalService, OauthService]} ,]\r\n        }\r\n    }\r\n}"],"names":["target","_i","src","TypeError","Object","index","arguments","length","source","key","prototype","hasOwnProperty","call","baseUrl","url","test","joined","join","normalize","str","replace","obj1","obj2","result","i","merge","name","_","separator","letter","offset","toUpperCase","user","userOpts","opts","body","JSON","stringify","method","config","this","facebook","authorizationEndpoint","redirectUri","window","location","origin","requiredUrlParams","scope","scopeDelimiter","display","oauthType","popupOptions","width","height","google","optionalUrlParams","scopePrefix","state","encodeURIComponent","Math","random","toString","substr","github","instagram","linkedin","twitter","twitch","live","yahoo","bitbucket","spotify","keys","forEach","_this","provider","providers","prop","ConfigService","Injectable","isStorageAvailable","supported","storageType","substring","setItem","removeItem","e","console","warn","StorageService","getItem","store","value","storage","tokenPrefix","tokenName","tokenSeparator","SharedService","get","token","getToken","split","base64Url","base64","parse","decodeURIComponent","atob","response","accessToken","json","access_token","tokenObject","data","tokenRootData","tokenRoot","reduce","o","x","tokenPath","set","remove","exp","isExpired","round","Date","getTime","payload","getPayload","date","setUTCSeconds","Observable","create","observer","next","complete","type","_backend","_defaultOptions","_shared","_config","_super","__extends","JwtHttp","options","getExpirationDate","autoRefreshToken","refreshToken","switchMap","actualRequest","RequestMethod","Get","request","Post","Put","Delete","Patch","Head","authHeader","Headers","append","authToken","refreshUrl","headers","do","res","setToken","Request","setHeaders","obj","defaultHeaders","defaultHeader","has","isAuthenticated","Http","PopupService","assign","left","screenX","outerWidth","top","screenY","outerHeight","map","joinedKeyValue","keyValue","stringifiedOptions","stringifyOptions","prepareOptions","UA","navigator","userAgent","windowName","cordova","indexOf","popupWindow","open","focus","fromEvent","concatMap","event","closed","parser","document","createElement","href","search","hash","queryParams","hashParams","parseQueryString","qs","allParams","close","error","take","takeWhile","interval","documentOrigin","host","popupWindowOrigin","http","popup","Oauth1Service","userData","defaults","base","serverUrl","joinUrl","post","buildQueryString","eventListener","pollPopup","exchangeForToken","oauthData","exchangeForTokenUrl","withCredentials","Oauth2Service","openPopup","stateName","responseType","keyValuePairs","urlParams","params","paramName","camelizedName","camelCase","paramValue","Array","isArray","push","pair","defaultUrlParams","responseParams","code","clientId","injector","shared","OauthService","unlinkUrl","LocalService","fullOpts","getFullOpts","loginUrl","signupUrl","local","oauth","AuthService","login","signup","logout","authenticate","unlink","removeToken","setStorageType","Ng2UiAuthModule","ngModule","provide","CustomConfig","useClass","deps","XHRBackend","RequestOptions","Injector","NgModule","imports","HttpModule"],"mappings":"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"}
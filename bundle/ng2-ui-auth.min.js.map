{"version":3,"file":null,"sources":["../src/utils.ts","../src/local.service.ts","../src/config.service.ts","../src/storage.service.ts","../src/shared.service.ts","../src/jwt-http.service.ts","../src/popup.service.ts","../src/oauth1.service.ts","../src/oauth2.service.ts","../src/oauth.service.ts","../src/auth.service.ts","../src/ng2-ui-auth.module.ts"],"sourcesContent":["/**\n * Created by Ron on 17/12/2015.\n */\n\nexport function assign(target: any, ...src: any[]): any {\n    if (target == null) {\n        throw new TypeError('Cannot convert undefined or null to object');\n    }\n\n    target = Object(target);\n    for (var index = 1; index < arguments.length; index++) {\n        var source = arguments[index];\n        if (source != null) {\n            for (var key in source) {\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n    }\n    return target;\n}\n\nexport function joinUrl(baseUrl: string, url: string) {\n    if (/^(?:[a-z]+:)?\\/\\//i.test(url)) {\n        return url;\n    }\n\n    let joined = [baseUrl, url].join('/');\n\n    let normalize = function(str) {\n        return str\n            .replace(/[\\/]+/g, '/')\n            .replace(/\\/\\?/g, '?')\n            .replace(/\\/\\#/g, '#')\n            .replace(/\\:\\//g, '://');\n    };\n\n    return normalize(joined);\n}\n\nexport function merge(obj1, obj2) {\n    let result = {};\n    for (var i in obj1) {\n        if (obj1.hasOwnProperty(i)) {\n            if ((i in obj2) && (typeof obj1[i] === 'object') && (i !== null)) {\n                result[i] = merge(obj1[i], obj2[i]);\n            } else {\n                result[i] = obj1[i];\n            }\n        }\n    }\n    for (i in obj2) {\n        if (obj2.hasOwnProperty(i)) {\n            if (i in result) {\n                continue;\n            }\n            result[i] = obj2[i];\n        }\n\n    }\n    return result;\n}\n\nexport function camelCase(name) {\n    return name.replace(/([\\:\\-\\_]+(.))/g, function(_, separator, letter, offset) {\n        return offset ? letter.toUpperCase() : letter;\n    });\n}\n","import {Injectable} from '@angular/core';\nimport {SharedService} from './shared.service';\nimport {ConfigService} from './config.service';\nimport {RequestOptionsArgs, Response} from '@angular/http';\nimport {joinUrl} from './utils';\nimport {Observable} from 'rxjs/Observable';\nimport 'rxjs/add/operator/do';\nimport {JwtHttp} from './jwt-http.service';\n\n/**\n * Created by Ron on 17/12/2015.\n */\n\nfunction getFullOpts(user: string | Object, userOpts?: RequestOptionsArgs) {\n    const opts = userOpts || {};\n    if (user) {\n        opts.body = typeof user === 'string' ? user : JSON.stringify(user);\n    }\n    opts.method = opts.method || 'POST';\n    return opts;\n}\n\n@Injectable()\nexport class LocalService {\n    constructor(private http: JwtHttp,\n                private shared: SharedService,\n                private config: ConfigService) {}\n\n    login(user: string | Object, opts?: RequestOptionsArgs): Observable<Response> {\n        const fullOpts = getFullOpts(user, opts);\n        const url = fullOpts.url ? fullOpts.url : joinUrl(this.config.baseUrl, this.config.loginUrl);\n\n        return this.http.request(url, fullOpts)\n            .do((response: Response) => this.shared.setToken(response));\n    }\n\n    signup(user: string | Object, opts?: RequestOptionsArgs): Observable<Response> {\n        const fullOpts = getFullOpts(user, opts);\n        const url = fullOpts.url ? fullOpts.url : joinUrl(this.config.baseUrl, this.config.signupUrl);\n\n        return this.http.request(url, getFullOpts(user, fullOpts));\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Response} from '@angular/http';\n\n/**\n * Created by Ron on 17/12/2015.\n */\n\nexport interface IPopupOptions {\n    width?: number;\n    height?: number;\n    left?: number;\n    top?: number;\n}\n\nexport interface IOauth1Options {\n    url?: string;\n    name?: string;\n    popupOptions?: IPopupOptions;\n    redirectUri?: string;\n    authorizationEndpoint?: string;\n    oauthType?: string;\n    exchangeForToken?: boolean | ((options: {code?: string, state?: string}, userData?: any) => Observable<Response>);\n}\n\nexport interface IOauth2Options extends IOauth1Options {\n    state?: string| (() => string);\n    defaultUrlParams?: string[];\n    responseType?: string;\n    responseParams?: {\n        code?: string;\n        clientId?: string;\n        redirectUri?: string;\n    };\n    clientId?: string;\n    scopeDelimiter?: string;\n    scopePrefix?: string;\n\n    requiredUrlParams?: string[];\n    optionalUrlParams?: string[];\n    scope?: string[]|string;\n    display?: string;\n}\n\nexport interface IProviders {\n    [provider: string]: IOauth2Options;\n}\n\nexport abstract class CustomConfig {\n    tokenRoot: string;\n    cordova: boolean;\n    baseUrl: string;\n    loginUrl: string;\n    signupUrl: string;\n    unlinkUrl: string;\n    tokenName: string;\n    tokenSeparator: string;\n    tokenPrefix: string;\n    authToken: string;\n    authHeader: string;\n    storageType: string;\n    providers: IProviders;\n    defaultHeaders: { [name: string]: string };\n    withCredentials: boolean;\n    autoRefreshToken: boolean;\n    refreshUrl: string;\n    refreshBeforeExpiration: number;\n    tryTokenRefreshIfUnauthorized: boolean;\n    resolveToken: (response: Response) => string;\n}\n\n@Injectable()\nexport class ConfigService {\n    constructor(config?: CustomConfig) {\n        Object.keys(config).forEach((key) => {\n            if (typeof config[key] === \"undefined\") {\n                return;\n            }\n            if (key !== 'providers') {\n                this[key] = config[key];\n            } else {\n                Object.keys(config[key]).map(provider => {\n                    this.providers[provider] = Object.assign(\n                        this.providers[provider] || {},\n                        config.providers[provider]\n                    );\n                });\n            }\n        });\n    }\n    withCredentials = false;\n    tokenRoot = null;\n    baseUrl = '/';\n    loginUrl = '/auth/login';\n    signupUrl = '/auth/signup';\n    unlinkUrl = '/auth/unlink/';\n    refreshUrl = '/auth/refresh';\n    tokenName = 'token';\n    tokenSeparator = '_';\n    tokenPrefix = 'ng2-ui-auth';\n    authHeader = 'Authorization';\n    authToken = 'Bearer';\n    storageType = 'localStorage';\n    defaultHeaders = null;\n    autoRefreshToken = false;\n    refreshBeforeExpiration = 600000; //10 minutes\n    tryTokenRefreshIfUnauthorized = false;\n    cordova = this.isCordovaApp();\n    resolveToken = (response: Response|Object) => {\n        let tokenObj = response;\n        if (response instanceof Response) {\n            tokenObj = response.json();\n        }\n        const accessToken: string | Object | null | undefined = tokenObj &&\n            (tokenObj['access_token'] || tokenObj['token'] || tokenObj['data']);\n        if (!accessToken) {\n            console.warn('No token found');\n            return null;\n        }\n        if (typeof accessToken === 'string') {\n            return accessToken;\n        }\n        if (typeof accessToken !== 'object') {\n            console.warn('No token found');\n            return null;\n        }\n        const tokenRootData = this.tokenRoot &&\n            this.tokenRoot.split('.').reduce(\n                (o, x) => {\n                    return o[x];\n                },\n                accessToken);\n        const token = tokenRootData ? tokenRootData[this.tokenName] : accessToken[this.tokenName];\n        if (token) {\n            return token;\n        }\n        let tokenPath = this.tokenRoot ? this.tokenRoot + '.' + this.tokenName : this.tokenName;\n        console.warn('Expecting a token named \"' + tokenPath);\n        return null;\n    };\n    providers: IProviders = {\n        facebook: {\n            name: 'facebook',\n            url: '/auth/facebook',\n            authorizationEndpoint: 'https://www.facebook.com/v2.5/dialog/oauth',\n            redirectUri: this.getHttpHost('/'),\n            requiredUrlParams: ['display', 'scope'],\n            scope: ['email'],\n            scopeDelimiter: ',',\n            display: 'popup',\n            oauthType: '2.0',\n            popupOptions: {width: 580, height: 400}\n        },\n        google: {\n            name: 'google',\n            url: '/auth/google',\n            authorizationEndpoint: 'https://accounts.google.com/o/oauth2/auth',\n            redirectUri: this.getHttpHost(),\n            requiredUrlParams: ['scope'],\n            optionalUrlParams: ['display', 'state'],\n            scope: ['profile', 'email'],\n            scopePrefix: 'openid',\n            scopeDelimiter: ' ',\n            display: 'popup',\n            oauthType: '2.0',\n            popupOptions: {width: 452, height: 633},\n            state: () => encodeURIComponent(Math.random().toString(36).substr(2)),\n        },\n        github: {\n            name: 'github',\n            url: '/auth/github',\n            authorizationEndpoint: 'https://github.com/login/oauth/authorize',\n            redirectUri: this.getHttpHost(),\n            optionalUrlParams: ['scope'],\n            scope: ['user:email'],\n            scopeDelimiter: ' ',\n            oauthType: '2.0',\n            popupOptions: {width: 1020, height: 618}\n        },\n        instagram: {\n            name: 'instagram',\n            url: '/auth/instagram',\n            authorizationEndpoint: 'https://api.instagram.com/oauth/authorize',\n            redirectUri: this.getHttpHost(),\n            requiredUrlParams: ['scope'],\n            scope: ['basic'],\n            scopeDelimiter: '+',\n            oauthType: '2.0'\n        },\n        linkedin: {\n            name: 'linkedin',\n            url: '/auth/linkedin',\n            authorizationEndpoint: 'https://www.linkedin.com/uas/oauth2/authorization',\n            redirectUri: this.getHttpHost(),\n            requiredUrlParams: ['state'],\n            scope: ['r_emailaddress'],\n            scopeDelimiter: ' ',\n            state: 'STATE',\n            oauthType: '2.0',\n            popupOptions: {width: 527, height: 582}\n        },\n        twitter: {\n            name: 'twitter',\n            url: '/auth/twitter',\n            authorizationEndpoint: 'https://api.twitter.com/oauth/authenticate',\n            redirectUri: this.getHttpHost(),\n            oauthType: '1.0',\n            popupOptions: {width: 495, height: 645}\n        },\n        twitch: {\n            name: 'twitch',\n            url: '/auth/twitch',\n            authorizationEndpoint: 'https://api.twitch.tv/kraken/oauth2/authorize',\n            redirectUri: this.getHttpHost(),\n            requiredUrlParams: ['scope'],\n            scope: ['user_read'],\n            scopeDelimiter: ' ',\n            display: 'popup',\n            oauthType: '2.0',\n            popupOptions: {width: 500, height: 560}\n        },\n        live: {\n            name: 'live',\n            url: '/auth/live',\n            authorizationEndpoint: 'https://login.live.com/oauth20_authorize.srf',\n            redirectUri: this.getHttpHost(),\n            requiredUrlParams: ['display', 'scope'],\n            scope: ['wl.emails'],\n            scopeDelimiter: ' ',\n            display: 'popup',\n            oauthType: '2.0',\n            popupOptions: {width: 500, height: 560}\n        },\n        yahoo: {\n            name: 'yahoo',\n            url: '/auth/yahoo',\n            authorizationEndpoint: 'https://api.login.yahoo.com/oauth2/request_auth',\n            redirectUri: this.getHttpHost(),\n            scope: [],\n            scopeDelimiter: ',',\n            oauthType: '2.0',\n            popupOptions: {width: 559, height: 519}\n        },\n        bitbucket: {\n            name: 'bitbucket',\n            url: '/auth/bitbucket',\n            authorizationEndpoint: 'https://bitbucket.org/site/oauth2/authorize',\n            redirectUri: this.getHttpHost('/'),\n            requiredUrlParams: ['scope'],\n            scope: ['email'],\n            scopeDelimiter: ',',\n            oauthType: '2.0',\n            popupOptions: {width: 1028, height: 529}\n        },\n        spotify: {\n            name: 'spotify',\n            url: '/auth/spotify',\n            authorizationEndpoint: 'https://accounts.spotify.com/authorize',\n            redirectUri: this.getHttpHost(),\n            optionalUrlParams: ['state'],\n            requiredUrlParams: ['scope'],\n            scope: ['user-read-email'],\n            scopePrefix: '',\n            scopeDelimiter: ',',\n            oauthType: '2.0',\n            popupOptions: { width: 500, height: 530 },\n            state: () => encodeURIComponent(Math.random().toString(36).substr(2))\n        }\n    };\n\n    getHttpHost(path = '') {\n        return window.location.origin + path;\n    }\n\n    isCordovaApp() {\n        return !!window['cordova'];\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {ConfigService} from './config.service';\n\n/**\n * Created by Ron on 17/12/2015.\n */\n@Injectable()\nexport class StorageService {\n    private store = {};\n    private isStorageAvailable: boolean;\n    constructor(private config: ConfigService) {\n        this.isStorageAvailable = (() => {\n            try {\n                let supported = config.storageType in window && window[config.storageType] !== null;\n\n                if (supported) {\n                    let key = Math.random().toString(36).substring(7);\n                    (<any>window[this.config.storageType]).setItem(key, '');\n                    (<any>window[this.config.storageType]).removeItem(key);\n                }\n\n                return supported;\n            } catch (e) {\n                return false;\n            }\n        })();\n        if (!this.isStorageAvailable) {\n            console.warn(config.storageType + ' is not available.');\n        }\n    }\n    get(key: string) {\n        return this.isStorageAvailable ? window[this.config.storageType].getItem(key) : this.store[key];\n    }\n    set(key: string, value: string) {\n        return this.isStorageAvailable ? window[this.config.storageType].setItem(key, value) : this.store[key] = value;\n    }\n    remove(key: string) {\n        return this.isStorageAvailable ? window[this.config.storageType].removeItem(key) : delete this.store[key];\n    }\n}\n","/**\n * Created by Ron on 17/12/2015.\n */\nimport {Observable} from 'rxjs/Observable';\nimport {Subscriber} from 'rxjs/Subscriber';\nimport {Injectable} from '@angular/core';\nimport {Response} from '@angular/http';\nimport {ConfigService} from './config.service';\nimport {StorageService} from './storage.service';\n/**\n * Created by Ron on 17/12/2015.\n */\n\n@Injectable()\nexport class SharedService {\n    tokenName = this.config.tokenPrefix ? [this.config.tokenPrefix, this.config.tokenName].join(this.config.tokenSeparator) : this.config.tokenName;\n    constructor(private storage: StorageService, private config: ConfigService) {}\n    getToken() {\n        return this.storage.get(this.tokenName);\n    }\n    getPayload() {\n        let token = this.getToken();\n\n        if (token && token.split('.').length === 3) {\n            try {\n                let base64Url = token.split('.')[1];\n                let base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n                return JSON.parse(decodeURIComponent(encodeURIComponent(window.atob(base64))));\n            } catch (e) {\n                return undefined;\n            }\n        }\n    }\n\n    setToken(response: string | Response | Object) {\n        if (!response) {\n            console.warn('Can\\'t set token without passing a value');\n            return;\n        }\n\n        let token: string;\n        if (typeof response === 'string') {\n            token = response;\n        } else {\n            token = this.config.resolveToken(response)\n        }\n\n        if (token) {\n            this.storage.set(this.tokenName, token);\n        }\n    }\n    removeToken() {\n        this.storage.remove(this.tokenName);\n    }\n    isAuthenticated() {\n        let token = this.getToken();\n\n        // a token is present\n        if (token) {\n            // token with a valid JWT format XXX.YYY.ZZZ\n            if (token.split('.').length === 3) {\n                // could be a valid JWT or an access token with the same format\n                try {\n                    let base64Url = token.split('.')[1];\n                    let base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n                    let exp = JSON.parse(window.atob(base64)).exp;\n                    // jwt with an optional expiration claims\n                    if (exp) {\n                        let isExpired = Math.round(new Date().getTime() / 1000) >= exp;\n                        if (isExpired) {\n                            // fail: Expired token\n                            this.storage.remove(this.tokenName);\n                            return false;\n                        } else {\n                            // pass: Non-expired token\n                            return true;\n                        }\n                    }\n                } catch (e) {\n                    // pass: Non-JWT token that looks like JWT\n                    return true;\n                }\n            }\n            // pass: All other tokens\n            return true;\n        }\n        // lail: No token at all\n        return false;\n    }\n    getExpirationDate() {\n        let payload = this.getPayload();\n        if (payload && payload.exp && Math.round(new Date().getTime() / 1000) < payload.exp) {\n            let date = new Date(0);\n            date.setUTCSeconds(payload.exp);\n            return date;\n        }\n        return null;\n    }\n    logout(): Observable<any> {\n        this.storage.remove(this.tokenName);\n        return Observable.create((observer: Subscriber<any>) => {\n            observer.next();\n            observer.complete();\n        });\n    }\n    setStorageType(type) {\n        this.config.storageType = type;\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {Http, RequestMethod, Response, RequestOptionsArgs, Headers, Request} from '@angular/http';\nimport {Observable} from 'rxjs/Observable';\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/operator/catch';\nimport {ConfigService} from './config.service';\nimport {SharedService} from './shared.service';\n/**\n * Created by Ron on 06/01/2016.\n */\n\nexport interface JwtRequestOptionsArgs extends RequestOptionsArgs {\n    autoRefreshToken?: boolean\n}\n\n@Injectable()\nexport class JwtHttp {\n    constructor(\n        private _http: Http,\n        private _shared: SharedService,\n        private _config: ConfigService\n    ) {}\n\n    request(url: string | Request, options?: JwtRequestOptionsArgs): Observable<Response> {\n        //if the token is expired the \"getExpirationDate\" function returns null\n        const exp = this._shared.getExpirationDate();\n        if (this._shared.getToken() &&\n            (!exp || exp.getTime() + this._config.refreshBeforeExpiration > Date.now())  &&\n            (options.autoRefreshToken ||\n            typeof options.autoRefreshToken === 'undefined' && this._config.autoRefreshToken)) {\n            return this.refreshToken()\n                .switchMap(() => this.actualRequest(url, options));\n        }\n        if (this._config.tryTokenRefreshIfUnauthorized) {\n            return this.actualRequest(url, options)\n                .catch((response: Response) => {\n                    if (response.status === 401) {\n                        return this.refreshToken()\n                            .switchMap(() => this.actualRequest(url, options));\n                    }\n                    throw response;\n                })\n        }\n        return this.actualRequest(url, options);\n    }\n\n    get(url: string, options?: JwtRequestOptionsArgs): Observable<Response> {\n        options = options || {};\n        options.method = RequestMethod.Get;\n        return this.request(url, options);\n    }\n\n    post(url: string, body: any, options?: JwtRequestOptionsArgs): Observable<Response> {\n        options = options || {};\n        options.method = RequestMethod.Post;\n        options.body = body;\n        return this.request(url, options);\n    }\n\n    put(url: string, body: any, options?: JwtRequestOptionsArgs): Observable<Response> {\n        options = options || {};\n        options.method = RequestMethod.Put;\n        options.body = body;\n        return this.request(url, options);\n    }\n\n    delete(url: string, options?: JwtRequestOptionsArgs): Observable<Response> {\n        options = options || {};\n        options.method = RequestMethod.Delete;\n        return this.request(url, options);\n    }\n\n    patch(url: string, body: any, options?: JwtRequestOptionsArgs): Observable<Response> {\n        options = options || {};\n        options.method = RequestMethod.Patch;\n        options.body = body;\n        return this.request(url, options);\n    }\n\n    head(url: string, options?: JwtRequestOptionsArgs): Observable<Response> {\n        options = options || {};\n        options.method = RequestMethod.Head;\n        return this.request(url, options);\n    }\n\n\n    refreshToken(): Observable<Response> {\n        const authHeader = new Headers();\n        authHeader.append(this._config.authHeader, (this._config.authToken + ' ' + this._shared.getToken()));\n        return this._http\n            .get(this._config.refreshUrl, {\n                headers: authHeader\n            })\n            .do((res: Response) => this._shared.setToken(res));\n    }\n\n    protected actualRequest(url: string | Request, options?: JwtRequestOptionsArgs) {\n        if (url instanceof Request) {\n            url.headers = url.headers || new Headers();\n            this.setHeaders(url);\n        } else {\n            options = options || {};\n            this.setHeaders(options);\n        }\n        return this._http.request(url, options);\n    }\n\n    protected setHeaders(obj: { headers?: Headers, [index: string]: any }) {\n        obj.headers = obj.headers || new Headers();\n        if (this._config.defaultHeaders) {\n            Object.keys(this._config.defaultHeaders).forEach((defaultHeader) => {\n                if (!obj.headers.has(defaultHeader)) {\n                    obj.headers.set(defaultHeader, this._config.defaultHeaders[defaultHeader]);\n                }\n            });\n        }\n        if (this._shared.isAuthenticated()) {\n            obj.headers.set(this._config.authHeader, this._config.authToken + ' ' + this._shared.getToken());\n        }\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {assign} from './utils';\nimport {ConfigService, IPopupOptions} from './config.service';\nimport 'rxjs/add/observable/interval';\nimport 'rxjs/add/observable/fromEvent';\nimport 'rxjs/add/observable/throw';\nimport 'rxjs/add/observable/empty';\nimport 'rxjs/add/observable/merge';\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/operator/take';\nimport 'rxjs/add/operator/takeWhile';\nimport 'rxjs/add/operator/delay';\n\n/**\n * Created by Ron on 17/12/2015.\n */\n\n@Injectable()\nexport class PopupService {\n    url = '';\n    popupWindow: Window = null;\n\n    private static prepareOptions(options: IPopupOptions) {\n        options = options || {};\n        let width = options.width || 500;\n        let height = options.height || 500;\n        return assign(\n            {\n                width: width,\n                height: height,\n                left: window.screenX + ((window.outerWidth - width) / 2),\n                top: window.screenY + ((window.outerHeight - height) / 2.5)\n            },\n            options);\n    }\n\n    private static stringifyOptions(options: Object) {\n        return Object.keys(options).map((key) => {\n            return key + '=' + options[key];\n        }).join(',');\n    }\n\n    private static parseQueryString(joinedKeyValue: string): any {\n        let key, value;\n        return joinedKeyValue.split('&').reduce(\n            (obj, keyValue) => {\n                if (keyValue) {\n                    value = keyValue.split('=');\n                    key = decodeURIComponent(value[0]);\n                    obj[key] = typeof value[1] !== 'undefined' ? decodeURIComponent(value[1]) : true;\n                }\n                return obj;\n            },\n            {});\n    }\n\n\n    constructor(private config: ConfigService) {}\n    open(url: string, name: string, options: IPopupOptions) {\n        this.url = url;\n\n        let stringifiedOptions = PopupService.stringifyOptions(PopupService.prepareOptions(options));\n        let UA = window.navigator.userAgent;\n        let windowName = (this.config.cordova || UA.indexOf('CriOS') > -1) ? '_blank' : name;\n\n        this.popupWindow = window.open(url, windowName, stringifiedOptions);\n\n        window['popup'] = this.popupWindow;\n\n        if (this.popupWindow && this.popupWindow.focus) {\n            this.popupWindow.focus();\n        }\n\n        return this;\n    }\n\n    eventListener(redirectUri: string) {\n        return Observable\n            .merge(Observable.fromEvent<Event>(this.popupWindow, 'exit')\n                    .delay(1000)\n                   .switchMap(() => {\n                     return Observable.throw(new Error ('Authentication Canceled'))\n                   }),\n                Observable.fromEvent(this.popupWindow, 'loadstart')\n                .switchMap((event: Event & { url: string }) => {\n\n                    if (!this.popupWindow || this.popupWindow.closed) {\n                        return Observable.throw(new Error('Authentication Canceled'));\n                    }\n                    if (event.url.indexOf(redirectUri) !== 0) {\n                        return Observable.empty();\n                    }\n\n                    let parser = document.createElement('a');\n                    parser.href = event.url;\n\n                    if (parser.search || parser.hash) {\n                        const queryParams = parser.search.substring(1).replace(/\\/$/, '');\n                        const hashParams = parser.hash.substring(1).replace(/\\/$/, '');\n                        const hash = PopupService.parseQueryString(hashParams);\n                        const qs = PopupService.parseQueryString(queryParams);\n                        const allParams = assign({}, qs, hash);\n\n                        this.popupWindow.close();\n\n                        if (allParams.error) {\n                            throw allParams.error;\n                        } else {\n                            return Observable.of(allParams);\n                        }\n                    }\n                    return Observable.empty();\n                })\n                .take(1));\n    }\n\n    pollPopup() {\n        return Observable\n            .interval(50)\n            .switchMap(() => {\n                if (!this.popupWindow || this.popupWindow.closed) {\n                    return Observable.throw(new Error('Authentication Canceled'));\n                }\n                let documentOrigin = document.location.host;\n                let popupWindowOrigin = '';\n                try {\n                    popupWindowOrigin = this.popupWindow.location.host;\n                } catch (error) {\n                    // ignore DOMException: Blocked a frame with origin from accessing a cross-origin frame.\n                    //error instanceof DOMException && error.name === 'SecurityError'\n                }\n                if (popupWindowOrigin === documentOrigin && (this.popupWindow.location.search || this.popupWindow.location.hash)) {\n                    const queryParams = this.popupWindow.location.search.substring(1).replace(/\\/$/, '');\n                    const hashParams = this.popupWindow.location.hash.substring(1).replace(/[\\/$]/, '');\n                    const hash = PopupService.parseQueryString(hashParams);\n                    const qs = PopupService.parseQueryString(queryParams);\n                    this.popupWindow.close();\n                    const allParams = assign({}, qs, hash);\n                    if (allParams.error) {\n                        throw allParams.error;\n                    } else {\n                        return Observable.of(allParams);\n                    }\n                }\n                return Observable.empty();\n            })\n            .take(1);\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {PopupService} from './popup.service';\nimport {Response} from '@angular/http';\nimport {joinUrl, assign} from './utils';\nimport {ConfigService, IOauth1Options} from './config.service';\nimport {Observable} from 'rxjs/Observable';\nimport 'rxjs/add/operator/switchMap';\nimport {JwtHttp} from './jwt-http.service';\n\n/**\n * Created by Ron on 17/12/2015.\n */\n\n\n@Injectable()\nexport class Oauth1Service {\n    private static base: IOauth1Options = {\n        url: null,\n        name: null,\n        popupOptions: null,\n        redirectUri: null,\n        authorizationEndpoint: null\n    };\n    private defaults: IOauth1Options;\n    constructor(private http: JwtHttp, private popup: PopupService, private config: ConfigService) {}\n    open(options?: IOauth1Options, userData?: any): Observable<Response> {\n        this.defaults = assign({}, Oauth1Service.base, options);\n        let popupWindow;\n        let serverUrl = this.config.baseUrl ? joinUrl(this.config.baseUrl, this.defaults.url) : this.defaults.url;\n\n        if (!this.config.cordova) {\n            popupWindow = this.popup.open('', this.defaults.name, this.defaults.popupOptions/*, this.defaults.redirectUri*/);\n        }\n\n        return this.http.post(serverUrl, JSON.stringify(this.defaults))\n            .switchMap((response: Response) => {\n                if (this.config.cordova) {\n                    popupWindow = this.popup.open(\n                        [this.defaults.authorizationEndpoint, this.buildQueryString(response.json())].join('?'),\n                        this.defaults.name,\n                        this.defaults.popupOptions);\n                } else {\n                    popupWindow.popupWindow.location =\n                        [this.defaults.authorizationEndpoint, this.buildQueryString(response.json())].join('?');\n                }\n\n                return this.config.cordova ? popupWindow.eventListener(this.defaults.redirectUri) : popupWindow.pollPopup();\n            })\n            .switchMap((response) => {\n                let exchangeForToken: any = options.exchangeForToken;\n                if (typeof exchangeForToken !== 'function') {\n                    exchangeForToken = this.exchangeForToken.bind(this);\n                }\n                return exchangeForToken(response, userData);\n            });\n    }\n    private exchangeForToken(oauthData, userData?: any) {\n        let data = assign({}, this.defaults, oauthData, userData);\n        let exchangeForTokenUrl = this.config.baseUrl ? joinUrl(this.config.baseUrl, this.defaults.url) : this.defaults.url;\n        return this.http.post(exchangeForTokenUrl, data, { withCredentials: this.config.withCredentials });\n    }\n    private buildQueryString(obj: Object) {\n        return Object.keys(obj).map((key) => {\n            return encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]);\n        }).join('&');\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {assign, joinUrl, merge, camelCase} from './utils';\nimport {ConfigService, IOauth2Options} from './config.service';\nimport {PopupService} from './popup.service';\nimport {StorageService} from './storage.service';\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/observable/of';\nimport {JwtHttp} from './jwt-http.service';\n\n/**\n * Created by Ron on 17/12/2015.\n */\n\n\n@Injectable()\nexport class Oauth2Service {\n    private static base: IOauth2Options = {\n        defaultUrlParams: ['response_type', 'client_id', 'redirect_uri'],\n        responseType: 'code',\n        responseParams: {\n            code: 'code',\n            clientId: 'clientId',\n            redirectUri: 'redirectUri'\n        }\n    };\n\n    private defaults: IOauth2Options;\n\n    constructor(private http: JwtHttp,\n                private popup: PopupService,\n                private storage: StorageService,\n                private config: ConfigService) {\n    }\n\n    open(options: IOauth2Options, userData?: any) {\n        this.defaults = merge(options, Oauth2Service.base);\n\n        let url;\n        let openPopup: Observable<any>;\n        let stateName = this.defaults.name + '_state';\n        let state = this.defaults.state;\n        if (typeof state === 'string') {\n            this.storage.set(stateName, state);\n        } else if (typeof state === 'function') {\n            this.storage.set(stateName, state());\n        }\n\n        url = [this.defaults.authorizationEndpoint, this.buildQueryString()].join('?');\n\n        if (this.config.cordova) {\n            openPopup = this.popup\n                .open(url, this.defaults.name, this.defaults.popupOptions/*, this.defaults.redirectUri*/)\n                .eventListener(this.defaults.redirectUri);\n        } else {\n            openPopup = this.popup\n                .open(url, this.defaults.name, this.defaults.popupOptions/*, this.defaults.redirectUri*/)\n                .pollPopup();\n        }\n\n        return openPopup\n            .switchMap((oauthData) => {\n                // when no server URL provided, return popup params as-is.\n                // this is for a scenario when someone wishes to opt out from\n                // satellizer's magic by doing authorization code exchange and\n                // saving a token manually.\n                if (!options.exchangeForToken && (this.defaults.responseType === 'token' || !this.defaults.url)) {\n                    return Observable.of(oauthData);\n                }\n\n                if (oauthData.state && oauthData.state !== this.storage.get(stateName)) {\n                    throw 'OAuth \"state\" mismatch';\n                }\n                let exchangeForToken: any = options.exchangeForToken;\n                if (typeof exchangeForToken !== 'function') {\n                    exchangeForToken = this.exchangeForToken.bind(this);\n                }\n                return exchangeForToken(oauthData, userData);\n            });\n    }\n\n    private exchangeForToken(oauthData: {code?: string, state?: string}, userData?: {}) {\n        let data: any = assign({}, this.defaults, oauthData, userData);\n\n        let exchangeForTokenUrl = this.config.baseUrl ? joinUrl(this.config.baseUrl, this.defaults.url) : this.defaults.url;\n\n        return this.http.post(exchangeForTokenUrl,  JSON.stringify(data), { withCredentials: this.config.withCredentials });\n    }\n\n    private buildQueryString() {\n        let keyValuePairs: string[][] = [];\n        let urlParams = ['defaultUrlParams', 'requiredUrlParams', 'optionalUrlParams'];\n\n        urlParams.forEach((params) => {\n            if (this.defaults[params]) {\n                (<string[]>this.defaults[params]).forEach((paramName) => {\n                    let camelizedName = camelCase(paramName);\n                    let paramValue = typeof this.defaults[paramName] === 'function' ?\n                        this.defaults[paramName]() :\n                        this.defaults[camelizedName];\n\n                    if (paramName === 'state') {\n                        let stateName = this.defaults.name + '_state';\n                        paramValue = encodeURIComponent(this.storage.get(stateName));\n                    }\n\n                    if (paramName === 'scope' && Array.isArray(paramValue)) {\n                        paramValue = paramValue.join(this.defaults.scopeDelimiter);\n\n                        if (this.defaults.scopePrefix) {\n                            paramValue = [this.defaults.scopePrefix, paramValue].join(this.defaults.scopeDelimiter);\n                        }\n                    }\n\n                    keyValuePairs.push([paramName, paramValue]);\n                });\n            }\n        });\n\n        return keyValuePairs.map(function(pair) {\n            return pair.join('=');\n        }).join('&');\n    }\n}\n","import {Injectable, Injector} from '@angular/core';\nimport {Oauth1Service} from './oauth1.service';\nimport {Oauth2Service} from './oauth2.service';\nimport {SharedService} from './shared.service';\nimport {Response, RequestOptionsArgs} from '@angular/http';\nimport {joinUrl} from './utils';\nimport {ConfigService, IOauth1Options} from './config.service';\nimport {Observable} from 'rxjs/Observable';\nimport 'rxjs/add/operator/do';\nimport {JwtHttp} from './jwt-http.service';\n\n/**\n * Created by Ron on 17/12/2015.\n */\n\n@Injectable()\nexport class OauthService {\n    constructor(private http: JwtHttp,\n                private injector: Injector,\n                private shared: SharedService,\n                private config: ConfigService) {}\n    authenticate(name: string, userData?: any): Observable<Response> {\n        // var injector = Injector.resolveAndCreate([Oauth1, Oauth2]);\n        const provider: { open(options?: IOauth1Options, userData?: any): Observable<Response> } = this.config.providers[name].oauthType === '1.0' ? this.injector.get(Oauth1Service) : this.injector.get(Oauth2Service);\n        return provider.open(this.config.providers[name], userData || {})\n            .do((response: Response) => {\n                // this is for a scenario when someone wishes to opt out from\n                // satellizer's magic by doing authorization code exchange and\n                // saving a token manually.\n                if (this.config.providers[name].url) {\n                    this.shared.setToken(response);\n                }\n            });\n    }\n    unlink(provider: string, opts: RequestOptionsArgs) {\n        opts = opts || {};\n        let url = opts.url ? opts.url : joinUrl(this.config.baseUrl, this.config.unlinkUrl);\n        opts.body = JSON.stringify({ provider: provider }) || opts.body;\n        opts.method = opts.method || 'POST';\n\n        return this.http.request(url, opts);\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {Response, RequestOptionsArgs} from '@angular/http';\nimport {SharedService} from './shared.service';\nimport {LocalService} from './local.service';\nimport {OauthService} from './oauth.service';\nimport {Observable} from 'rxjs/Observable';\n\n/**\n * Created by Ron on 17/12/2015.\n */\n\n@Injectable()\nexport class AuthService {\n    constructor(private shared: SharedService,\n                private local: LocalService,\n                private oauth: OauthService) {\n    }\n\n    login(user, opts?: RequestOptionsArgs): Observable<Response> {\n        return this.local.login(user, opts);\n    }\n\n    signup(user, opts?: RequestOptionsArgs): Observable<Response> {\n        return this.local.signup(user, opts);\n    }\n\n    logout(): Observable<void> {\n        return this.shared.logout();\n    }\n\n    authenticate(name: string, userData?: any): Observable<Response> {\n        return this.oauth.authenticate(name, userData);\n    }\n\n    link(name: string, userData?: any): Observable<Response> {\n        return this.oauth.authenticate(name, userData);\n    }\n\n    unlink(provider: string, opts: RequestOptionsArgs): Observable<Response> {\n        return this.oauth.unlink(provider, opts);\n    }\n\n    isAuthenticated(): boolean {\n        return this.shared.isAuthenticated();\n    }\n\n    getToken(): string {\n        return this.shared.getToken();\n    }\n\n    setToken(token: string | Response): void {\n        this.shared.setToken(token);\n    }\n\n    removeToken(): void {\n        this.shared.removeToken();\n    }\n\n    getPayload(): any {\n        return this.shared.getPayload();\n    }\n\n    setStorageType(type: string): void {\n        this.shared.setStorageType(type);\n    }\n\n    getExpirationDate(): Date {\n        return this.shared.getExpirationDate();\n    }\n}\n","/**\n * Created by Ron on 25/12/2015.\n */\nimport {CustomConfig, ConfigService} from './config.service';\nimport {SharedService} from './shared.service';\nimport {JwtHttp} from './jwt-http.service';\nimport {OauthService} from './oauth.service';\nimport {PopupService} from './popup.service';\nimport {Oauth1Service} from './oauth1.service';\nimport {Oauth2Service} from './oauth2.service';\nimport {LocalService} from './local.service';\nimport {AuthService} from './auth.service';\nimport {StorageService} from './storage.service';\nimport {ModuleWithProviders, NgModule, Injector} from '@angular/core';\nimport {HttpModule, Http} from '@angular/http';\nimport {Type} from '@angular/core/src/type';\nexport {LocalService} from './local.service';\nexport {Oauth2Service} from './oauth2.service';\nexport {Oauth1Service} from './oauth1.service';\nexport {PopupService} from './popup.service';\nexport {OauthService} from './oauth.service';\nexport {JwtHttp} from './jwt-http.service';\nexport {SharedService} from './shared.service';\nexport {StorageService} from './storage.service';\nexport {AuthService} from './auth.service';\nexport {ConfigService, CustomConfig} from './config.service';\n\n@NgModule({\n    imports: [HttpModule]\n})\nexport class Ng2UiAuthModule {\n    static forRootWithCustomHttp(config: Type<CustomConfig>, httpProvider: any): ModuleWithProviders {\n        return {\n            ngModule: Ng2UiAuthModule,\n            providers: [\n                {provide: CustomConfig, useClass: config },\n                {provide: ConfigService, useClass: ConfigService, deps: [CustomConfig] },\n                {provide: StorageService, useClass: StorageService, deps: [ConfigService]},\n                {provide: SharedService,  useClass: SharedService, deps: [StorageService, ConfigService]},\n                httpProvider,\n                {provide: OauthService,  useClass: OauthService, deps: [JwtHttp, Injector, SharedService, ConfigService]} ,\n                {provide: PopupService,  useClass: PopupService, deps: [ConfigService]},\n                {provide: Oauth1Service,  useClass: Oauth1Service, deps: [JwtHttp, PopupService, ConfigService]} ,\n                {provide: Oauth2Service,  useClass: Oauth2Service, deps: [JwtHttp, PopupService, StorageService, ConfigService]} ,\n                {provide: LocalService,  useClass: LocalService, deps: [JwtHttp, SharedService, ConfigService]} ,\n                {provide: AuthService,  useClass: AuthService, deps: [SharedService, LocalService, OauthService]} ,]\n        }\n    }\n\n    static forRoot(config: Type<CustomConfig>): ModuleWithProviders {\n        return {\n            ngModule: Ng2UiAuthModule,\n            providers: [\n                {provide: CustomConfig, useClass: config },\n                {provide: ConfigService, useClass: ConfigService, deps: [CustomConfig] },\n                {provide: StorageService, useClass: StorageService, deps: [ConfigService]},\n                {provide: SharedService,  useClass: SharedService, deps: [StorageService, ConfigService]},\n                {provide: JwtHttp, useClass: JwtHttp, deps: [Http, SharedService, ConfigService]},\n                {provide: OauthService,  useClass: OauthService, deps: [JwtHttp, Injector, SharedService, ConfigService]} ,\n                {provide: PopupService,  useClass: PopupService, deps: [ConfigService]},\n                {provide: Oauth1Service,  useClass: Oauth1Service, deps: [JwtHttp, PopupService, ConfigService]} ,\n                {provide: Oauth2Service,  useClass: Oauth2Service, deps: [JwtHttp, PopupService, StorageService, ConfigService]} ,\n                {provide: LocalService,  useClass: LocalService, deps: [JwtHttp, SharedService, ConfigService]} ,\n                {provide: AuthService,  useClass: AuthService, deps: [SharedService, LocalService, OauthService]} ,]\n        }\n    }\n}\n"],"names":["target","_i","src","TypeError","Object","index","arguments","length","source","key","prototype","hasOwnProperty","call","baseUrl","url","test","joined","join","normalize","str","replace","obj1","obj2","result","i","merge","name","_","separator","letter","offset","toUpperCase","user","userOpts","opts","body","JSON","stringify","method","config","this","isCordovaApp","response","tokenObj","Response","json","accessToken","console","warn","tokenRootData","_this","tokenRoot","split","reduce","o","x","token","tokenName","tokenPath","facebook","authorizationEndpoint","redirectUri","getHttpHost","requiredUrlParams","scope","scopeDelimiter","display","oauthType","popupOptions","width","height","google","optionalUrlParams","scopePrefix","state","encodeURIComponent","Math","random","toString","substr","github","instagram","linkedin","twitter","twitch","live","yahoo","bitbucket","spotify","keys","forEach","map","provider","providers","assign","ConfigService","path","window","location","origin","Injectable","isStorageAvailable","supported","storageType","substring","setItem","removeItem","e","StorageService","getItem","store","value","storage","tokenPrefix","tokenSeparator","SharedService","get","getToken","base64Url","base64","parse","decodeURIComponent","atob","resolveToken","set","remove","exp","isExpired","round","Date","getTime","payload","getPayload","date","setUTCSeconds","Observable","create","observer","next","complete","type","_http","_shared","_config","JwtHttp","options","getExpirationDate","refreshBeforeExpiration","now","autoRefreshToken","refreshToken","switchMap","actualRequest","tryTokenRefreshIfUnauthorized","catch","status","RequestMethod","Get","request","Post","Put","Delete","Patch","Head","authHeader","Headers","append","authToken","refreshUrl","headers","do","res","setToken","Request","setHeaders","obj","defaultHeaders","defaultHeader","has","isAuthenticated","PopupService","left","screenX","outerWidth","top","screenY","outerHeight","joinedKeyValue","keyValue","stringifiedOptions","stringifyOptions","prepareOptions","UA","navigator","userAgent","windowName","cordova","indexOf","popupWindow","open","focus","fromEvent","delay","throw","Error","event","closed","empty","parser","document","createElement","href","search","hash","queryParams","hashParams","parseQueryString","qs","allParams","close","error","of","take","interval","documentOrigin","host","popupWindowOrigin","http","popup","Oauth1Service","userData","defaults","base","serverUrl","joinUrl","post","buildQueryString","eventListener","pollPopup","exchangeForToken","bind","oauthData","data","exchangeForTokenUrl","withCredentials","Oauth2Service","openPopup","stateName","responseType","keyValuePairs","urlParams","params","paramName","camelizedName","camelCase","paramValue","Array","isArray","push","pair","defaultUrlParams","responseParams","code","clientId","injector","shared","OauthService","unlinkUrl","LocalService","fullOpts","getFullOpts","loginUrl","signupUrl","local","oauth","AuthService","login","signup","logout","authenticate","unlink","removeToken","setStorageType","Ng2UiAuthModule","httpProvider","ngModule","provide","CustomConfig","useClass","deps","Injector","Http","NgModule","imports","HttpModule"],"mappings":"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"}